openapi: 3.0.3
info:
  contact:
    email: vrchatapi.lpv0t@aries.fyi
    name: Unofficial VRChat API Documentation Project
    url: https://github.com/VRChatAPI
  description: |-
    ![VRChat API Banner](https://vrchatapi.github.io/assets/img/api_banner_1500x400.png)

    # Welcome to the VRChat API

    Before we begin, we would like to state this is a **COMMUNITY DRIVEN PROJECT**.
    This means that everything you read on here was written by the community itself and is **not** officially supported by VRChat.
    The documentation is provided "AS IS", and any action you take towards VRChat is completely your own responsibility.

    The documentation and additional libraries SHALL ONLY be used for applications interacting with VRChat's API in accordance
    with their [Terms of Service](https://hello.vrchat.com/legal) and [Community Guidelines](https://hello.vrchat.com/community-guidelines), and MUST NOT be used for modifying the client, "avatar ripping", or other illegal activities.
    Malicious usage or spamming the API may result in account termination.
    Certain parts of the API are also more sensitive than others, for example moderation, so please tread extra carefully and read the warnings when present.

    ![Tupper Policy on API](https://i.imgur.com/yLlW7Ok.png)

    Finally, use of the API using applications other than the approved methods (website, VRChat application, Unity SDK) is not officially supported.
    VRChat provides no guarantee or support for external applications using the API. Access to API endpoints may break **at any time, without notice**.
    Therefore, please **do not ping** VRChat Staff in the VRChat Discord if you are having API problems, as they do not provide API support.
    We will make a best effort in keeping this documentation and associated language libraries up to date, but things might be outdated or missing.
    If you find that something is no longer valid, please contact us on Discord or [create an issue](https://github.com/vrchatapi/specification/issues) and tell us so we can fix it.

    # Getting Started

    The VRChat API can be used to programmatically retrieve or update information regarding your profile, friends, avatars, worlds and more.
    The API consists of two parts, "Photon" which is only used in-game, and the "Web API" which is used by both the game and the website.
    This documentation focuses only on the Web API.

    The API is designed around the REST ideology, providing semi-simple and usually predictable URIs to access and modify objects.
    Requests support standard HTTP methods like GET, PUT, POST, and DELETE and standard status codes.
    Response bodies are always UTF-8 encoded JSON objects, unless explicitly documented otherwise.

    <div class="callout callout-error">
      <strong>üõë Warning! Do not touch Photon!</strong><br>
      Photon is only used by the in-game client and should <b>not</b> be touched. Doing so may result in permanent account termination.
    </div>

    <div class="callout callout-info">
      <strong>‚ÑπÔ∏è API Key and Authentication</strong><br>
      The API Key has always been the same and is currently <code>JlE5Jldo5Jibnk5O5hTx6XVqsJu4WJ26</code>.
      Read <a href="#tag--authentication">Authentication</a> for how to log in.
    </div>

    # Using the API

    For simply exploring what the API can do it is strongly recommended to download [Insomnia](https://insomnia.rest/download), a free and open-source
    API client that's great for sending requests to the API in an orderly fashion.
    Insomnia allows you to send data in the format that's required for VRChat's API.
    It is also possible to try out the API in your browser, by first logging in at [vrchat.com/home](https://vrchat.com/home/) and then going to
    [vrchat.com/api/1/auth/user](https://vrchat.com/api/1/auth/user), but the information will be much harder to work with.

    For more permanent operation such as software development it is instead recommended to use one of the existing language SDKs.
    This community project maintains API libraries in several languages, which allows you to interact with the API with simple function calls
    rather than having to implement the HTTP protocol yourself. Most of these libraries are automatically generated from the API specification,
    sometimes with additional helpful wrapper code to make usage easier. This allows them to be almost automatically updated and expanded upon
    as soon as a new feature is introduced in the specification itself. The libraries can be found on [GitHub](https://github.com/vrchatapi) or following:

    * [NodeJS (JavaScript)](https://www.npmjs.com/package/vrchat)
    * [Dart](https://pub.dev/packages/vrchat_dart)
    * [Rust](https://crates.io/crates/vrchatapi)
    * [C#](https://github.com/vrchatapi/vrchatapi-csharp)
    * [Python](https://github.com/vrchatapi/vrchatapi-python)

    # Pagination

    Most endpoints enforce pagination, meaning they will only return 10 entries by default, and never more than 100.<br>
    Using both the limit and offset parameters allows you to easily paginate through a large number of objects.

    | Query Parameter | Type | Description |
    | ----------|--|------- |
    | `n` | integer  | The number of objects to return. This value often defaults to 10. Highest limit is always 100.|
    | `offset` | integer  | A zero-based offset from the default object sorting.|

    If a request returns fewer objects than the `limit` parameter, there are no more items available to return.

    # Contribution

    Do you want to get involved in the documentation effort? Do you want to help improve one of the language API libraries?
    This project is an [OPEN Open Source Project](https://openopensource.org)! This means that individuals making significant and valuable contributions are given
    commit-access to the project. It also means we are very open and welcoming of new people making contributions, unlike some more guarded open-source projects.

    [![Discord](https://img.shields.io/static/v1?label=vrchatapi&message=discord&color=blueviolet&style=for-the-badge)](https://discord.gg/qjZE9C9fkB)
  license:
    name: MIT
    url: https://github.com/vrchatapi/specification/blob/master/LICENSE
  termsOfService: https://vrchat.com/legal/
  title: VRChat API Documentation
  version: 1.12.0
servers:
- url: https://api.vrchat.cloud/api/1
tags:
- description: Authentication Docs Here
  name: authentication
- description: Avatars Docs Here
  name: avatars
- description: Economy Docs Here
  name: economy
- description: Favorites Docs Here
  name: favorites
- description: Files Docs Here
  name: files
- description: Friends Docs Here
  name: friends
- description: Group Docs Here
  name: groups
- description: Invite Docs Here
  name: invite
- description: Instances Docs Here
  name: instances
- description: Notifiations Docs
  name: notifications
- description: "Permissions are a way to individually grant specific access to a user,\
    \ often through a license such as VRC+ subscription."
  name: permissions
- description: |-
    There are two different moderation API's, "moderation" for Staff actions, and "playermoderation" for players.
    PlayerModerations are user-generated actions towards others, such as muting them, blocking, or toggling interaction.

    Your global permission settings are stored locally on your computer.
    Only player-specific moderations (when you target a player, and allow them specifically to interact with you) are stored in the API.

    ## Implementation details

    There are three different user-targetted permission options:

    - Mode 1: interactOn/unmute/unblock
    - Mode 2: interactOff/mute/block
    - *Default setting*

    **Example:**

    Force On (`interactOn`) and Force Off (`interactOff`) always or never allow that person to interact with you.
    These are stored as PlayerModerations. When you select a player and select "Force On", it creates a playerModeration of type `interactOn`.

    **Important order:**

    1. When switching between one mode from the other, e.g. "Force On" and "Force Off", **the previous playerModeration MUST first be deleted before creating the second.**
       The game sends these in sequence, first delete the old, then create the new. Attempting to create both `interactOn` and `interactOff` is UNDOCUMENTED behavior.
    2. "Use Current Setting" **does not have it's own enum**. The game removes any previous playerModeration of same type.
       No playerModeration of either type means fallback to the global setting.

    ## Deprecation notice

    As of October 2022, `showAvatar` and `hideAvatar` has been moved to local storage.
    Sending these types to the API will result in a 200 OK response, but the API will **not** store them.
    More information is avaiable on VRChat's official [documentation on Local Storage](https://docs.vrchat.com/docs/local-vrchat-storage).
  name: playermoderation
- description: System Docs Here
  name: system
- description: Users Docs Here
  name: users
- description: Worlds Docs Here
  name: worlds
paths:
  /auth/exists:
    get:
      description: |-
        Checks if a user by a given `username`, `displayName` or `email` exist. This is used during registration to check if a username has already been taken, during change of displayName to check if a displayName is available, and during change of email to check if the email is already used. In the later two cases the `excludeUserId` is used to exclude oneself, otherwise the result would always be true.

        It is **REQUIRED** to include **AT LEAST** `username`, `displayName` **or** `email` query parameter. Although they can be combined - in addition with `excludeUserId` (generally to exclude yourself) - to further fine-tune the search.
      operationId: checkUserExists
      parameters:
      - description: Filter by email.
        explode: true
        in: query
        name: email
        required: false
        schema:
          type: string
        style: form
      - description: Filter by displayName.
        explode: true
        in: query
        name: displayName
        required: false
        schema:
          type: string
        style: form
      - description: Filter by UserID.
        explode: true
        in: query
        name: userId
        required: false
        schema:
          type: string
        style: form
      - description: Exclude by UserID.
        explode: true
        in: query
        name: excludeUserId
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserExists'
          description: Returns a response if a user exists or not.
        "400":
          content:
            application/json:
              examples:
                "400 At Least One Parameter Required":
                  value:
                    error:
                      message: "\"username, email, or displayName required\""
                      status_code: 400
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when missing at least 1 of the required parameters.
      summary: Check User Exists
      tags:
      - authentication
      x-codeSamples:
      - lang: cURL
        source: "curl -X GET \"https://api.vrchat.cloud/api/1/auth/exists?email={string}\"\
          \ "
  /auth/user:
    get:
      description: "This endpoint does the following two operations:\n  1) Checks\
        \ if you are already logged in by looking for a valid `auth` cookie. If you\
        \ are have a valid auth cookie then no additional auth-related actions are\
        \ taken. If you are **not** logged in then it will log you in with the `Authorization`\
        \ header and set the `auth` cookie. The `auth` cookie will only be sent once.\n\
        \  2) If logged in, this function will also return the CurrentUser object\
        \ containing detailed information about the currently logged in user.\n\n\
        The auth string after `Authorization: Basic {string}` is a base64-encoded\
        \ string of the username and password, both individually url-encoded, and\
        \ then joined with a colon.\n  \n> base64(urlencode(username):urlencode(password))\n\
        \n**WARNING: Session Limit:** Each authentication with login credentials counts\
        \ as a separate session, out of which you have a limited amount. Make sure\
        \ to save and reuse the `auth` cookie if you are often restarting the program.\
        \ The provided API libraries automatically save cookies during runtime, but\
        \ does not persist during restart. While it can be fine to use username/password\
        \ during development, expect in production to very fast run into the rate-limit\
        \ and be temporarily blocked from making new sessions until older ones expire.\
        \ The exact number of simultaneous sessions is unknown/undisclosed."
      operationId: getCurrentUser
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentUser'
          description: OK
          headers:
            Set-Cookie:
              description: Successful authentication returns an `auth` cookie.
              explode: false
              schema:
                example: "auth=authcookie_00000000-0000-0000-0000-000000000000; Expires=Tue,\
                  \ 01 Jan 2030 00:00:00 GMT; Path=/; HttpOnly"
                type: string
              style: simple
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
      security:
      - authHeader: []
      - authHeader: []
        twoFactorAuthCookie: []
      - authCookie: []
      summary: Login and/or Get Current User Info
      tags:
      - authentication
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET "https://api.vrchat.cloud/api/1/auth/user" \
               -H "Authorization: Basic {string}"
  /auth/twofactorauth/totp/verify:
    post:
      description: Finishes the login sequence with a normal 2FA-generated code for
        accounts with 2FA-protection enabled.
      operationId: verify2FA
      parameters: []
      requestBody:
        content:
          application/json:
            examples: {}
            schema:
              $ref: '#/components/schemas/TwoFactorAuthCode'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Verify2FAResult'
          description: OK
          headers:
            Set-Cookie:
              description: "Provides a `twoFactorAuth` cookie, which can be used to\
                \ bypasses the 2FA requirement for future logins on the same device."
              explode: false
              schema:
                example: "twoFactorAuth=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;\
                  \ Expires=Tue, 01 Jan 2030 00:00:00 GMT; Path=/; HttpOnly"
                type: string
              style: simple
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
      security:
      - authCookie: []
      summary: Verify 2FA code
      tags:
      - authentication
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X POST "https://api.vrchat.cloud/api/1/auth/twofactorauth/totp/verify" \
               -H "Content-Type: application/json" \
               -b "auth={authCookie}" \
               --data '{"code": "string"}'
  /auth/twofactorauth/otp/verify:
    post:
      description: Finishes the login sequence with an OTP (One Time Password) recovery
        code for accounts with 2FA-protection enabled.
      operationId: verifyRecoveryCode
      requestBody:
        content:
          application/json:
            examples: {}
            schema:
              $ref: '#/components/schemas/TwoFactorAuthCode'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Verify2FAResult'
          description: OK
          headers:
            Set-Cookie:
              description: "Provides a `twoFactorAuth` cookie, which can be used to\
                \ bypasses the 2FA requirement for future logins on the same device."
              explode: false
              schema:
                example: "twoFactorAuth=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;\
                  \ Expires=Tue, 01 Jan 2030 00:00:00 GMT; Path=/; HttpOnly"
                type: string
              style: simple
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
      security:
      - authCookie: []
      summary: Verify 2FA code with Recovery code
      tags:
      - authentication
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X POST "https://api.vrchat.cloud/api/1/auth/twofactorauth/otp/verify" \
               -H "Content-Type: application/json" \
               -b "auth={authCookie}" \
               --data '{"code": "string"}'
  /auth/twofactorauth/emailotp/verify:
    post:
      description: Finishes the login sequence with an 2FA email code.
      operationId: verify2FAEmailCode
      parameters: []
      requestBody:
        content:
          application/json:
            examples: {}
            schema:
              $ref: '#/components/schemas/TwoFactorEmailCode'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Verify2FAEmailCodeResult'
          description: OK
          headers:
            Set-Cookie:
              description: "Provides a `twoFactorAuth` cookie, which can be used to\
                \ bypasses the 2FA requirement for future logins on the same device."
              explode: false
              schema:
                example: "twoFactorAuth=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;\
                  \ Expires=Tue, 01 Jan 2030 00:00:00 GMT; Path=/; HttpOnly"
                type: string
              style: simple
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
      security:
      - authCookie: []
      summary: Verify 2FA email code
      tags:
      - authentication
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X POST "https://api.vrchat.cloud/api/1/auth/twofactorauth/emailotp/verify" \
               -H "Content-Type: application/json" \
               -b "auth={authCookie}" \
               --data '{"code": "string"}'
  /auth:
    get:
      description: Verify whether the currently provided Auth Token is valid.
      operationId: verifyAuthToken
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyAuthTokenResult'
          description: Returns wether a provided auth token is valid or not.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
      security:
      - authCookie: []
      summary: Verify Auth Token
      tags:
      - authentication
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET "https://api.vrchat.cloud/api/1/auth" \
               -b "amplitude_id_a750df50d11f21f712262cbd4c0bab37vrchat.com={string}; auth={authCookie}"
  /logout:
    put:
      description: Invalidates the login session.
      operationId: logout
      responses:
        "200":
          content:
            application/json:
              examples:
                Logout Success:
                  value:
                    success:
                      message: Ok!
                      status_code: 200
              schema:
                $ref: '#/components/schemas/Success'
          description: OK
          headers:
            Set-Cookie:
              description: Clears the `auth` cookie.
              explode: false
              schema:
                default: "auth=; Expires=Tue, 01 Jan 2030 00:00:00 GMT; Path=/"
                type: string
              style: simple
            \0Set-Cookie:
              description: Clears the `age` cookie.
              explode: false
              schema:
                default: "age=; Expires=Tue, 01 Jan 2030 00:00:00 GMT; Path=/"
                type: string
              style: simple
            \0\0Set-Cookie:
              description: Clears the `tos` cookie.
              explode: false
              schema:
                default: "tos=; Expires=Tue, 01 Jan 2030 00:00:00 GMT; Path=/"
                type: string
              style: simple
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
      security:
      - authCookie: []
      summary: Logout
      tags:
      - authentication
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X PUT "https://api.vrchat.cloud/api/1/logout" \
               -b "auth={authCookie}"
  /users/{userId}/delete:
    put:
      description: |-
        Deletes the account with given ID. Normal users only have permission to delete their own account. Account deletion is 14 days from this request, and will be cancelled if you do an authenticated request with the account afterwards.

        **VRC+ NOTE:** Despite the 14-days cooldown, any VRC+ subscription will be cancelled **immediately**.

        **METHOD NOTE:** Despite this being a Delete action, the method type required is PUT.
      operationId: deleteUser
      parameters:
      - description: Must be a valid user ID.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentUser'
          description: OK
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
      security:
      - authCookie: []
      summary: Delete User
      tags:
      - authentication
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X PUT "https://api.vrchat.cloud/api/1/user/{userId}/delete" \
               -b "auth={authCookie}"
  /users/{userId}/avatar:
    get:
      description: Get the current avatar for the user. This will return an error
        for any other user than the one logged in.
      operationId: getOwnAvatar
      parameters:
      - description: Must be a valid user ID.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Avatar'
          description: Returns a single Avatar object.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "403":
          content:
            application/json:
              examples:
                "403 Cant See Other Users Current Avatar":
                  value:
                    error:
                      message: \"You do not have permission to fetch details about
                        the avatar on this user.\"
                      status_code: 403
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to see another users current avatar
            without sufficient admin permissions.
      security:
      - authCookie: []
      summary: Get Own Avatar
      tags:
      - avatars
      x-codeSamples:
      - lang: cURL
        source: "curl -X GET \"https://api.vrchat.cloud/api/1/users/{userId}/avatar\"\
          \ -b \"auth={authCookie}\""
  /avatars:
    get:
      description: Search and list avatars by query filters. You can only search your
        own or featured avatars. It is not possible as a normal user to search other
        peoples avatars.
      operationId: searchAvatars
      parameters:
      - description: Filters on featured results.
        explode: true
        in: query
        name: featured
        required: false
        schema:
          type: boolean
        style: form
      - description: The sort order of the results.
        explode: true
        in: query
        name: sort
        required: false
        schema:
          $ref: '#/components/schemas/SortOption'
        style: form
      - description: Set to `me` for searching own avatars.
        explode: true
        in: query
        name: user
        required: false
        schema:
          enum:
          - me
          type: string
        style: form
      - description: Filter by UserID.
        explode: true
        in: query
        name: userId
        required: false
        schema:
          type: string
        style: form
      - description: The number of objects to return.
        explode: true
        in: query
        name: "n"
        required: false
        schema:
          default: 60
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: Result ordering
        explode: true
        in: query
        name: order
        required: false
        schema:
          $ref: '#/components/schemas/OrderOption'
        style: form
      - description: A zero-based offset from the default object sorting from where
          search results start.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - description: Tags to include (comma-separated). Any of the tags needs to be
          present.
        explode: true
        in: query
        name: tag
        required: false
        schema:
          type: string
        style: form
      - description: Tags to exclude (comma-separated).
        explode: true
        in: query
        name: notag
        required: false
        schema:
          type: string
        style: form
      - description: Filter by ReleaseStatus.
        explode: true
        in: query
        name: releaseStatus
        required: false
        schema:
          $ref: '#/components/schemas/ReleaseStatus'
        style: form
      - description: The maximum Unity version supported by the asset.
        explode: true
        in: query
        name: maxUnityVersion
        required: false
        schema:
          type: string
        style: form
      - description: The minimum Unity version supported by the asset.
        explode: true
        in: query
        name: minUnityVersion
        required: false
        schema:
          type: string
        style: form
      - description: The platform the asset supports.
        explode: true
        in: query
        name: platform
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Avatar'
                type: array
          description: Returns a list of Avatar objects.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
      security:
      - authCookie: []
      summary: Search Avatars
      tags:
      - avatars
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET "https://api.vrchat.cloud/api/1/avatars?featured=true" \
               -b "auth={authCookie}"
    post:
      description: Create an avatar. It's possible to optionally specify a ID if you
        want a custom one. Attempting to create an Avatar with an already claimed
        ID will result in a DB error.
      operationId: createAvatar
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAvatarRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Avatar'
          description: Returns a single Avatar object.
        "401":
          content:
            application/json:
              examples:
                "401 Cannot Set Featured":
                  value:
                    error:
                      message: cannot set featured tag if you are not an admin
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when set featured to true without being an admin.
      security:
      - authCookie: []
      summary: Create Avatar
      tags:
      - avatars
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X POST "https://api.vrchat.cloud/api/1/avatars" \
               -H "Content-Type: application/json" \
               -b "auth={authCookie}" \
               --data '{"assetUrl": "string", "id": "{avatarId}", "name": "string", "description": "string", "tags": ["string"], "imageUrl": "string", "releaseStatus": "public", "version": 1, "unityPackageUrl": "string"}'
  /avatars/{avatarId}:
    delete:
      description: "Delete an avatar. Notice an avatar is never fully \"deleted\"\
        , only its ReleaseStatus is set to \"hidden\" and the linked Files are deleted.\
        \ The AvatarID is permanently reserved."
      operationId: deleteAvatar
      parameters:
      - description: Must be a valid avatar ID.
        explode: false
        in: path
        name: avatarId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Avatar'
          description: Returns a single Avatar object.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 Can't find avatar":
                  value:
                    error:
                      message: Can't find avatar!
                      status_code: 404
                "404 Couldn't find that avatar":
                  value:
                    error:
                      message: We couldn't find that avatar!
                      status_code: 404
                "404 Avatar Not Found":
                  value:
                    error:
                      message: Avatar Not Found
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to show information about a non-existent
            avatar.
      security:
      - authCookie: []
      summary: Delete Avatar
      tags:
      - avatars
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X DELETE "https://api.vrchat.cloud/api/1/avatars/{avatarId}" \
               -b "auth={authCookie}"
    get:
      description: Get information about a specific Avatar.
      operationId: getAvatar
      parameters:
      - description: Must be a valid avatar ID.
        explode: false
        in: path
        name: avatarId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Avatar'
          description: Returns a single Avatar object.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 Can't find avatar":
                  value:
                    error:
                      message: Can't find avatar!
                      status_code: 404
                "404 Couldn't find that avatar":
                  value:
                    error:
                      message: We couldn't find that avatar!
                      status_code: 404
                "404 Avatar Not Found":
                  value:
                    error:
                      message: Avatar Not Found
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to show information about a non-existent
            avatar.
      security:
      - authCookie: []
      summary: Get Avatar
      tags:
      - avatars
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET "https://api.vrchat.cloud/api/1/avatars/{avatarId}" \
               -b "auth={authCookie}"
    put:
      description: Update information about a specific avatar.
      operationId: updateAvatar
      parameters:
      - description: Must be a valid avatar ID.
        explode: false
        in: path
        name: avatarId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAvatarRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Avatar'
          description: Returns a single Avatar object.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 Can't find avatar":
                  value:
                    error:
                      message: Can't find avatar!
                      status_code: 404
                "404 Couldn't find that avatar":
                  value:
                    error:
                      message: We couldn't find that avatar!
                      status_code: 404
                "404 Avatar Not Found":
                  value:
                    error:
                      message: Avatar Not Found
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to show information about a non-existent
            avatar.
      security:
      - authCookie: []
      summary: Update Avatar
      tags:
      - avatars
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X PUT "https://api.vrchat.cloud/api/1/avatars/{avatarId}" \
               -H "Content-Type: application/json" \
               -b "auth={authCookie}" \
               --data '{"assetUrl": "string", "id": "{avatarId}", "name": "string", "description": "string", "tags": ["string"], "imageUrl": "string", "releaseStatus": "public", "version": 1, "unityPackageUrl": "string"}'
  /avatars/{avatarId}/select:
    put:
      description: Switches into that avatar.
      operationId: selectAvatar
      parameters:
      - description: Must be a valid avatar ID.
        explode: false
        in: path
        name: avatarId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentUser'
          description: Returns a single CurrentUser object.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 Can't find avatar":
                  value:
                    error:
                      message: Can't find avatar!
                      status_code: 404
                "404 Couldn't find that avatar":
                  value:
                    error:
                      message: We couldn't find that avatar!
                      status_code: 404
                "404 Avatar Not Found":
                  value:
                    error:
                      message: Avatar Not Found
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to show information about a non-existent
            avatar.
      security:
      - authCookie: []
      summary: Select Avatar
      tags:
      - avatars
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X PUT "https://api.vrchat.cloud/api/1/avatars/{avatarId}/select" \
               -b "auth={authCookie}"
  /avatars/{avatarId}/selectFallback:
    put:
      description: Switches into that avatar as your fallback avatar.
      operationId: selectFallbackAvatar
      parameters:
      - description: Must be a valid avatar ID.
        explode: false
        in: path
        name: avatarId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentUser'
          description: Returns a single CurrentUser object.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "403":
          content:
            application/json:
              examples:
                "403 Cant Select Non-Fallback as Fallback":
                  value:
                    error:
                      message: This avatar isn't tagged as a quest fallback avatar.
                      status_code: 403
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to select a fallback avatar that
            is missing the fallback tag.
        "404":
          content:
            application/json:
              examples:
                "404 Can't find avatar":
                  value:
                    error:
                      message: Can't find avatar!
                      status_code: 404
                "404 Couldn't find that avatar":
                  value:
                    error:
                      message: We couldn't find that avatar!
                      status_code: 404
                "404 Avatar Not Found":
                  value:
                    error:
                      message: Avatar Not Found
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to show information about a non-existent
            avatar.
      security:
      - authCookie: []
      summary: Select Fallback Avatar
      tags:
      - avatars
      x-codeSamples:
      - lang: cURL
        source: "curl -X PUT \"https://api.vrchat.cloud/api/1/avatars/{avatarId}/selectFallback\""
  /avatars/favorites:
    get:
      description: Search and list favorited avatars by query filters.
      operationId: getFavoritedAvatars
      parameters:
      - description: Filters on featured results.
        explode: true
        in: query
        name: featured
        required: false
        schema:
          type: boolean
        style: form
      - description: The sort order of the results.
        explode: true
        in: query
        name: sort
        required: false
        schema:
          $ref: '#/components/schemas/SortOption'
        style: form
      - description: The number of objects to return.
        explode: true
        in: query
        name: "n"
        required: false
        schema:
          default: 60
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: Result ordering
        explode: true
        in: query
        name: order
        required: false
        schema:
          $ref: '#/components/schemas/OrderOption'
        style: form
      - description: A zero-based offset from the default object sorting from where
          search results start.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - description: Filters by world name.
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: Tags to include (comma-separated). Any of the tags needs to be
          present.
        explode: true
        in: query
        name: tag
        required: false
        schema:
          type: string
        style: form
      - description: Tags to exclude (comma-separated).
        explode: true
        in: query
        name: notag
        required: false
        schema:
          type: string
        style: form
      - description: Filter by ReleaseStatus.
        explode: true
        in: query
        name: releaseStatus
        required: false
        schema:
          $ref: '#/components/schemas/ReleaseStatus'
        style: form
      - description: The maximum Unity version supported by the asset.
        explode: true
        in: query
        name: maxUnityVersion
        required: false
        schema:
          type: string
        style: form
      - description: The minimum Unity version supported by the asset.
        explode: true
        in: query
        name: minUnityVersion
        required: false
        schema:
          type: string
        style: form
      - description: The platform the asset supports.
        explode: true
        in: query
        name: platform
        required: false
        schema:
          type: string
        style: form
      - description: "Target user to see information on, admin-only."
        explode: true
        in: query
        name: userId
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Avatar'
                type: array
          description: Returns a list of Avatar objects.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "403":
          content:
            application/json:
              examples:
                "403 Cant See Other User Favorite Avatars":
                  value:
                    error:
                      message: \"You can only see your own favorite avatars!\"
                      status_code: 403
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to see favourited avatars of another
            user without sufficient admin permissions.
      security:
      - authCookie: []
      summary: List Favorited Avatars
      tags:
      - avatars
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET "https://api.vrchat.cloud/api/1/avatars/favorites?featured=true" \
               -b "auth={authCookie}"
  /Steam/transactions:
    get:
      description: Get all own Steam transactions.
      operationId: getSteamTransactions
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Transaction'
                type: array
          description: Returns a list of Transaction objects.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
      security:
      - authCookie: []
      summary: List Steam Transactions
      tags:
      - economy
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET "https://api.vrchat.cloud/api/1/Steam/transactions" \
               -b "auth={authCookie}"
  /Steam/transactions/{transactionId}:
    get:
      deprecated: true
      description: "Get a single Steam transactions by ID. This returns the exact\
        \ same information as `getSteamTransactions`, so no point in using this endpoint."
      operationId: getSteamTransaction
      parameters:
      - description: Must be a valid transaction ID.
        explode: false
        in: path
        name: transactionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
          description: Returns a single Transaction object.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
      security:
      - authCookie: []
      summary: Get Steam Transaction
      tags:
      - economy
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET "https://api.vrchat.cloud/api/1/Steam/transactions/{transactionId}" \
               -b "auth={authCookie}"
  /Admin/transactions/{transactionId}: {}
  /auth/user/subscription:
    get:
      description: Get a list of all current user subscriptions.
      operationId: getCurrentSubscriptions
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserSubscription'
                type: array
          description: Returns a list of UserSubscription objects.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
      security:
      - authCookie: []
      summary: Get Current Subscriptions
      tags:
      - economy
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET "https://api.vrchat.cloud/api/1/auth/user/subscription" \
               -b "auth={authCookie}"
  /subscriptions:
    get:
      description: "List all existing Subscriptions. For example, \"vrchatplus-monthly\"\
        \ and \"vrchatplus-yearly\"."
      operationId: getSubscriptions
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Subscription'
                type: array
          description: Returns a list of Subscription objects.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
      security:
      - authCookie: []
      summary: List Subscriptions
      tags:
      - economy
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET "https://api.vrchat.cloud/api/1/subscriptions" \
               -b "auth={authCookie}"
  /licenseGroups/{licenseGroupId}:
    get:
      description: Get a single License Group by given ID.
      operationId: getLicenseGroup
      parameters:
      - description: Must be a valid license group ID.
        explode: false
        in: path
        name: licenseGroupId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseGroup'
          description: Returns a single LicenseGroup object.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
      security:
      - authCookie: []
      summary: Get License Group
      tags:
      - economy
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET "https://api.vrchat.cloud/api/1/licenseGroups/{licenseGroupId}" \
               -b "auth={authCookie}"
  /favorites:
    get:
      description: Returns a list of favorites.
      operationId: getFavorites
      parameters:
      - description: The number of objects to return.
        explode: true
        in: query
        name: "n"
        required: false
        schema:
          default: 60
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: A zero-based offset from the default object sorting from where
          search results start.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - description: "The type of favorites to return, FavoriteType."
        explode: true
        in: query
        name: type
        required: false
        schema:
          type: string
        style: form
      - description: Tags to include (comma-separated). Any of the tags needs to be
          present.
        explode: true
        in: query
        name: tag
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Favorite'
                type: array
          description: Returns a list of Favorite objects.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
      security:
      - authCookie: []
      summary: List Favorites
      tags:
      - favorites
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET "https://api.vrchat.cloud/api/1/favorites?type={string}&tag={string}" \
               -b "auth={authCookie}"
    post:
      description: |-
        Add a new favorite.

        Friend groups are named `group_0` through `group_3`. Avatar and World groups are named `avatars1` to `avatars4` and `worlds1` to `worlds4`.

        You cannot add people whom you are not friends with to your friends list. Destroying a friendship removes the person as favorite on both sides.
      operationId: addFavorite
      requestBody:
        content:
          application/json:
            examples:
              Example Favorite Friend:
                value:
                  type: friend
                  favoriteId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
                  tags:
                  - group_0
              Example Favorite Avatar:
                value:
                  type: avatar
                  favoriteId: avtr_912d66a4-4714-43b8-8407-7de2cafbf55b
                  tags:
                  - avatars1
            schema:
              $ref: '#/components/schemas/AddFavoriteRequest'
        description: ""
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favorite'
          description: Returns a single Favorite object.
        "400":
          content:
            application/json:
              examples:
                "400 Already Favorited That Friend":
                  value:
                    error:
                      message: You already have that friend favorited
                      status_code: 400
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying favorite someone or something when
            already having it/them favorited.
        "403":
          content:
            application/json:
              examples:
                "403 Favorite Add Not Friends Error":
                  value:
                    error:
                      message: you are not friends with that user«É
                      status_code: 403
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying favorite someone whom you are not
            friends with.
      security:
      - authCookie: []
      summary: Add Favorite
      tags:
      - favorites
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X POST "https://api.vrchat.cloud/api/1/favorites" \
               -H "Content-Type: application/json" \
               -b "auth={authCookie}" \
               --data '{"type": "friend", "favoriteId": "userId", "tags": ["string"]}'
  /favorites/{favoriteId}:
    delete:
      description: Remove a favorite from your favorites list.
      operationId: removeFavorite
      parameters:
      - description: Must be a valid favorite ID.
        explode: false
        in: path
        name: favoriteId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                "200 Favorite Removed":
                  value:
                    success:
                      message: favorite deleted!
                      status_code: 200
              schema:
                $ref: '#/components/schemas/Success'
          description: Success response after removing a favorite.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 Favorite not found":
                  value:
                    error:
                      message: 404 couldn't find that favorite
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to show information about a non-existent
            favorite.
      security:
      - authCookie: []
      summary: Remove Favorite
      tags:
      - favorites
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X DELETE "https://api.vrchat.cloud/api/1/favorites/{favoriteId}" \
               -b "auth={authCookie}"
    get:
      description: Return information about a specific Favorite.
      operationId: getFavorite
      parameters:
      - description: Must be a valid favorite ID.
        explode: false
        in: path
        name: favoriteId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favorite'
          description: Returns a single Favorite object.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 Favorite not found":
                  value:
                    error:
                      message: 404 couldn't find that favorite
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to show information about a non-existent
            favorite.
      security:
      - authCookie: []
      summary: Show Favorite
      tags:
      - favorites
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET "https://api.vrchat.cloud/api/1/favorites/{favoriteId}" \
               -b "auth={authCookie}"
  /favorite/groups:
    get:
      description: Return a list of favorite groups owned by a user. Returns the same
        information as `getFavoriteGroups`.
      operationId: getFavoriteGroups
      parameters:
      - description: The number of objects to return.
        explode: true
        in: query
        name: "n"
        required: false
        schema:
          default: 60
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: A zero-based offset from the default object sorting from where
          search results start.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - description: The owner of whoms favorite groups to return. Must be a UserID.
        explode: true
        in: query
        name: ownerId
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/FavoriteGroup'
                type: array
          description: Returns a list of FavoriteGroup objects.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
      security:
      - authCookie: []
      summary: List Favorite Groups
      tags:
      - favorites
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET "https://api.vrchat.cloud/api/1/favorite/groups?ownerId={userId}" \
               -b "auth={authCookie}"
  /favorite/group/{favoriteGroupType}/{favoriteGroupName}/{userId}:
    delete:
      description: Clear ALL contents of a specific favorite group.
      operationId: clearFavoriteGroup
      parameters:
      - description: "The type of group to fetch, must be a valid FavoriteType."
        explode: false
        in: path
        name: favoriteGroupType
        required: true
        schema:
          enum:
          - world
          - friend
          - avatar
          type: string
        style: simple
      - description: "The name of the group to fetch, must be a name of a FavoriteGroup."
        explode: false
        in: path
        name: favoriteGroupName
        required: true
        schema:
          type: string
        style: simple
      - description: Must be a valid user ID.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                "200 Favorite Group Cleared":
                  value:
                    success:
                      message: favorite deleted!
                      status_code: 200
              schema:
                $ref: '#/components/schemas/Success'
          description: Success response after clearing a favorite group.
      security:
      - authCookie: []
      summary: Clear Favorite Group
      tags:
      - favorites
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X DELETE "https://api.vrchat.cloud/api/1/favorite/group/{favoriteGroupType}/{favoriteGroupName}/{userId}" \
               -b "auth={authCookie}"
    get:
      description: Fetch information about a specific favorite group.
      operationId: getFavoriteGroup
      parameters:
      - description: "The type of group to fetch, must be a valid FavoriteType."
        explode: false
        in: path
        name: favoriteGroupType
        required: true
        schema:
          enum:
          - world
          - friend
          - avatar
          type: string
        style: simple
      - description: "The name of the group to fetch, must be a name of a FavoriteGroup."
        explode: false
        in: path
        name: favoriteGroupName
        required: true
        schema:
          type: string
        style: simple
      - description: Must be a valid user ID.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteGroup'
          description: Returns a single FavoriteGroup object.
      security:
      - authCookie: []
      summary: Show Favorite Group
      tags:
      - favorites
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET "https://api.vrchat.cloud/api/1/favorite/group/{favoriteGroupType}/{favoriteGroupName}/{userId}" \
               -b "auth={authCookie}"
    put:
      description: Update information about a specific favorite group.
      operationId: updateFavoriteGroup
      parameters:
      - description: "The type of group to fetch, must be a valid FavoriteType."
        explode: false
        in: path
        name: favoriteGroupType
        required: true
        schema:
          enum:
          - world
          - friend
          - avatar
          type: string
        style: simple
      - description: "The name of the group to fetch, must be a name of a FavoriteGroup."
        explode: false
        in: path
        name: favoriteGroupName
        required: true
        schema:
          type: string
        style: simple
      - description: Must be a valid user ID.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFavoriteGroupRequest'
      responses:
        "200":
          description: OK
      security:
      - authCookie: []
      summary: Update Favorite Group
      tags:
      - favorites
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X PUT -H "Content-Type: application/json" "https://api.vrchat.cloud/api/1/favorite/group/{favoriteGroupType}/{favoriteGroupName}/{userId}" \
               -b "auth={authCookie}" \
               --data '{"displayName": "string", "visibility": "private", "tags": ["string"]}'
  /files:
    get:
      description: Returns a list of files
      operationId: getFiles
      parameters:
      - description: "Tag, for example \"icon\" or \"gallery\", not included by default."
        explode: true
        in: query
        name: tag
        required: false
        schema:
          minLength: 1
          type: string
        style: form
      - deprecated: true
        description: "UserID, will always generate a 500 permission error."
        explode: true
        in: query
        name: userId
        required: false
        schema:
          type: string
        style: form
      - description: The number of objects to return.
        explode: true
        in: query
        name: "n"
        required: false
        schema:
          default: 60
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: A zero-based offset from the default object sorting from where
          search results start.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/File'
                type: array
          description: Returns a list of File objects.
      security:
      - authCookie: []
      summary: List Files
      tags:
      - files
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET "https://api.vrchat.cloud/api/1/files?tag={string}" \
               -b "auth={authCookie}"
  /file:
    post:
      description: Creates a new File object
      operationId: createFile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFileRequest'
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Avatar File:
                  value:
                    id: file_00000000-0000-0000-0000-000000000000
                    name: Avatar - Test Avatar - Unity package - 2017‚Ä§4‚Ä§28f1_3_standalonewindows_Release
                    ownerId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
                    mimeType: application/gzip
                    extension: .unitypackage
                    tags: []
                    versions:
                    - version: 0
                      status: complete
                      created_at: 2019-08-15T11:04:37.910Z
                    - version: 1
                      status: complete
                      created_at: 2019-08-15T11:04:49.702Z
                      file:
                        fileName: Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage
                        url: https://s3.us-east-1.amazonaws.com/files.vrchat.cloud/Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage
                        md5: xxxxxxxxxxxxxxxxxxx==
                        sizeInBytes: 303055180
                        status: complete
                        category: multipart
                        uploadId: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
                      delta:
                        fileName: Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.delta
                        url: https://s3.us-east-1.amazonaws.com/files.vrchat.cloud/Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.delta
                        md5: ""
                        sizeInBytes: 0
                        status: none
                        category: queued
                        uploadId: ""
                      signature:
                        fileName: Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.signature
                        url: https://s3.us-east-1.amazonaws.com/files.vrchat.cloud/Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.signature
                        md5: xxxxxxxxxxxxxxxx==
                        sizeInBytes: 532748
                        status: complete
                        category: simple
                        uploadId: ""
              schema:
                $ref: '#/components/schemas/File'
          description: Returns a single File object.
      security:
      - authCookie: []
      summary: Create File
      tags:
      - files
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X POST "https://api.vrchat.cloud/api/1/file" \
               -H "Content-Type: application/json" \
               -b "auth={authCookie}" \
               --data '{"name": "string", "mimeType": "image/jpeg", "extension": "string", "tags": ["string"]}'
  /file/{fileId}:
    delete:
      description: Deletes a File object.
      operationId: deleteFile
      parameters:
      - description: Must be a valid file ID.
        explode: false
        in: path
        name: fileId
        required: true
        schema:
          example: file_00000000-0000-0000-0000-000000000000
          pattern: "file_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                File Deleted Success:
                  value:
                    success:
                      message: File deleted
                      status_code: 200
              schema:
                $ref: '#/components/schemas/Success'
          description: Successful response after deleting a File.
        "404":
          content:
            application/json:
              examples:
                File Deleted Error:
                  value:
                    error:
                      message: File 'file_ce35d830-e20a-4df0-a6d4-5aaef4508044' not
                        found
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to delete a non-existent file.
      security:
      - authCookie: []
      summary: Delete File
      tags:
      - files
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X DELETE "https://api.vrchat.cloud/api/1/file/{fileId}" \
               -b "auth={authCookie}"
    get:
      description: "Shows general information about the \"File\" object. Each File\
        \ can have several \"Version\"'s, and each Version can have multiple real\
        \ files or \"Data\" blobs."
      operationId: getFile
      parameters:
      - description: Must be a valid file ID.
        explode: false
        in: path
        name: fileId
        required: true
        schema:
          example: file_00000000-0000-0000-0000-000000000000
          pattern: "file_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Avatar File:
                  value:
                    id: file_00000000-0000-0000-0000-000000000000
                    name: Avatar - Test Avatar - Unity package - 2017‚Ä§4‚Ä§28f1_3_standalonewindows_Release
                    ownerId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
                    mimeType: application/gzip
                    extension: .unitypackage
                    tags: []
                    versions:
                    - version: 0
                      status: complete
                      created_at: 2019-08-15T11:04:37.910Z
                    - version: 1
                      status: complete
                      created_at: 2019-08-15T11:04:49.702Z
                      file:
                        fileName: Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage
                        url: https://s3.us-east-1.amazonaws.com/files.vrchat.cloud/Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage
                        md5: xxxxxxxxxxxxxxxxxxx==
                        sizeInBytes: 303055180
                        status: complete
                        category: multipart
                        uploadId: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
                      delta:
                        fileName: Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.delta
                        url: https://s3.us-east-1.amazonaws.com/files.vrchat.cloud/Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.delta
                        md5: ""
                        sizeInBytes: 0
                        status: none
                        category: queued
                        uploadId: ""
                      signature:
                        fileName: Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.signature
                        url: https://s3.us-east-1.amazonaws.com/files.vrchat.cloud/Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.signature
                        md5: xxxxxxxxxxxxxxxx==
                        sizeInBytes: 532748
                        status: complete
                        category: simple
                        uploadId: ""
              schema:
                $ref: '#/components/schemas/File'
          description: Returns a single File object.
        "404":
          content:
            application/json:
              examples:
                "404 File Not Found":
                  value:
                    error:
                      message: File 'file_ce35d830-e20a-4df0-a6d4-5aaef4508044' not
                        found
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to show information about a non-existent
            file.
      security:
      - authCookie: []
      summary: Show File
      tags:
      - files
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET "https://api.vrchat.cloud/api/1/file/{fileId}" \
               -b "auth={authCookie}"
    post:
      description: "Creates a new FileVersion. Once a Version has been created, proceed\
        \ to the `/file/{fileId}/{versionId}/file/start` endpoint to start a file\
        \ upload."
      operationId: createFileVersion
      parameters:
      - description: Must be a valid file ID.
        explode: false
        in: path
        name: fileId
        required: true
        schema:
          example: file_00000000-0000-0000-0000-000000000000
          pattern: "file_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFileVersionRequest'
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Avatar File:
                  value:
                    id: file_00000000-0000-0000-0000-000000000000
                    name: Avatar - Test Avatar - Unity package - 2017‚Ä§4‚Ä§28f1_3_standalonewindows_Release
                    ownerId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
                    mimeType: application/gzip
                    extension: .unitypackage
                    tags: []
                    versions:
                    - version: 0
                      status: complete
                      created_at: 2019-08-15T11:04:37.910Z
                    - version: 1
                      status: complete
                      created_at: 2019-08-15T11:04:49.702Z
                      file:
                        fileName: Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage
                        url: https://s3.us-east-1.amazonaws.com/files.vrchat.cloud/Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage
                        md5: xxxxxxxxxxxxxxxxxxx==
                        sizeInBytes: 303055180
                        status: complete
                        category: multipart
                        uploadId: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
                      delta:
                        fileName: Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.delta
                        url: https://s3.us-east-1.amazonaws.com/files.vrchat.cloud/Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.delta
                        md5: ""
                        sizeInBytes: 0
                        status: none
                        category: queued
                        uploadId: ""
                      signature:
                        fileName: Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.signature
                        url: https://s3.us-east-1.amazonaws.com/files.vrchat.cloud/Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.signature
                        md5: xxxxxxxxxxxxxxxx==
                        sizeInBytes: 532748
                        status: complete
                        category: simple
                        uploadId: ""
              schema:
                $ref: '#/components/schemas/File'
          description: Returns a single File object.
      security:
      - authCookie: []
      summary: Create File Version
      tags:
      - files
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X POST "https://api.vrchat.cloud/api/1/file/{fileId}" \
               -H "Content-Type: application/json" \
               -b "auth={authCookie}" \
               --data '{"signatureMd5": "string", "signatureSizeInBytes": 0, "fileMd5": "string", "fileSizeInBytes": 0}'
  /file/{fileId}/{versionId}:
    delete:
      description: Delete a specific version of a file. You can only delete the latest
        version.
      operationId: deleteFileVersion
      parameters:
      - description: Must be a valid file ID.
        explode: false
        in: path
        name: fileId
        required: true
        schema:
          example: file_00000000-0000-0000-0000-000000000000
          pattern: "file_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      - description: Version ID of the asset.
        explode: false
        in: path
        name: versionId
        required: true
        schema:
          example: 1
          minimum: 1
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Avatar File:
                  value:
                    id: file_00000000-0000-0000-0000-000000000000
                    name: Avatar - Test Avatar - Unity package - 2017‚Ä§4‚Ä§28f1_3_standalonewindows_Release
                    ownerId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
                    mimeType: application/gzip
                    extension: .unitypackage
                    tags: []
                    versions:
                    - version: 0
                      status: complete
                      created_at: 2019-08-15T11:04:37.910Z
                    - version: 1
                      status: complete
                      created_at: 2019-08-15T11:04:49.702Z
                      file:
                        fileName: Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage
                        url: https://s3.us-east-1.amazonaws.com/files.vrchat.cloud/Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage
                        md5: xxxxxxxxxxxxxxxxxxx==
                        sizeInBytes: 303055180
                        status: complete
                        category: multipart
                        uploadId: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
                      delta:
                        fileName: Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.delta
                        url: https://s3.us-east-1.amazonaws.com/files.vrchat.cloud/Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.delta
                        md5: ""
                        sizeInBytes: 0
                        status: none
                        category: queued
                        uploadId: ""
                      signature:
                        fileName: Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.signature
                        url: https://s3.us-east-1.amazonaws.com/files.vrchat.cloud/Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.signature
                        md5: xxxxxxxxxxxxxxxx==
                        sizeInBytes: 532748
                        status: complete
                        category: simple
                        uploadId: ""
              schema:
                $ref: '#/components/schemas/File'
          description: Returns a single File object.
        "400":
          content:
            application/json:
              examples:
                "400 Delete Initial File Version":
                  value:
                    error:
                      message: Cannot delete the initial version of the file‚Äö just
                        delete the entire file record‚Ä§
                      status_code: 400
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to delete the initial version of
            a file. Delete the main File object instead.
        "500":
          content:
            application/json:
              examples:
                "409/500 Delete Non-Last File Version":
                  value:
                    error:
                      message: 409 Cannot delete against anything but the latest version
                        of this fileÀ∏ 1‚Äö 11
                      status_code: 500
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to delete any version of a file
            that is not hte last one.
      security:
      - authCookie: []
      summary: Delete File Version
      tags:
      - files
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X DELETE "https://api.vrchat.cloud/api/1/file/{fileId}/{versionId}" \
            -b "auth={authCookie}"
    get:
      description: |-
        Downloads the file with the provided version number.

        **Version Note:** Version 0 is always when the file was created. The real data is usually always located in version 1 and up.

        **Extension Note:** Files are not guaranteed to have a file extensions. UnityPackage files tends to have it, images through this endpoint do not. You are responsible for appending file extension from the `extension` field when neccesary.
      operationId: downloadFileVersion
      parameters:
      - description: Must be a valid file ID.
        explode: false
        in: path
        name: fileId
        required: true
        schema:
          example: file_00000000-0000-0000-0000-000000000000
          pattern: "file_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      - description: Version ID of the asset.
        explode: false
        in: path
        name: versionId
        required: true
        schema:
          example: 1
          minimum: 1
          type: integer
        style: simple
      responses:
        "200":
          description: Raw file
      security:
      - authCookie: []
      summary: Download File Version
      tags:
      - files
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET "https://api.vrchat.cloud/api/1/file/{fileId}/{versionId}" \
            -b "auth={authCookie}"
  /file/{fileId}/{versionId}/{fileType}/finish:
    put:
      description: Finish an upload of a FileData. This will mark it as "complete".
        After uploading the `file` for Avatars and Worlds you then have to upload
        a `signature` file.
      operationId: finishFileDataUpload
      parameters:
      - description: Must be a valid file ID.
        explode: false
        in: path
        name: fileId
        required: true
        schema:
          example: file_00000000-0000-0000-0000-000000000000
          pattern: "file_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      - description: Version ID of the asset.
        explode: false
        in: path
        name: versionId
        required: true
        schema:
          example: 1
          minimum: 1
          type: integer
        style: simple
      - description: Type of file.
        explode: false
        in: path
        name: fileType
        required: true
        schema:
          enum:
          - file
          - signature
          - delta
          example: file
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              Example Request:
                value:
                  etags:
                  - xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
                  - yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
                  nextPartNumber: "0"
                  maxParts: "0"
            schema:
              $ref: '#/components/schemas/FinishFileDataUploadRequest'
        description: |-
          Please see documentation on ETag's:
          [https://teppen.io/2018/06/23/aws_s3_etags/](https://teppen.io/2018/06/23/aws_s3_etags/)

          ETag's should NOT be present when uploading a `signature`.
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Avatar File:
                  value:
                    id: file_00000000-0000-0000-0000-000000000000
                    name: Avatar - Test Avatar - Unity package - 2017‚Ä§4‚Ä§28f1_3_standalonewindows_Release
                    ownerId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
                    mimeType: application/gzip
                    extension: .unitypackage
                    tags: []
                    versions:
                    - version: 0
                      status: complete
                      created_at: 2019-08-15T11:04:37.910Z
                    - version: 1
                      status: complete
                      created_at: 2019-08-15T11:04:49.702Z
                      file:
                        fileName: Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage
                        url: https://s3.us-east-1.amazonaws.com/files.vrchat.cloud/Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage
                        md5: xxxxxxxxxxxxxxxxxxx==
                        sizeInBytes: 303055180
                        status: complete
                        category: multipart
                        uploadId: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
                      delta:
                        fileName: Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.delta
                        url: https://s3.us-east-1.amazonaws.com/files.vrchat.cloud/Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.delta
                        md5: ""
                        sizeInBytes: 0
                        status: none
                        category: queued
                        uploadId: ""
                      signature:
                        fileName: Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.signature
                        url: https://s3.us-east-1.amazonaws.com/files.vrchat.cloud/Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.signature
                        md5: xxxxxxxxxxxxxxxx==
                        sizeInBytes: 532748
                        status: complete
                        category: simple
                        uploadId: ""
              schema:
                $ref: '#/components/schemas/File'
          description: Returns a single File object.
      security:
      - authCookie: []
      summary: Finish FileData Upload
      tags:
      - files
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X PUT "https://api.vrchat.cloud/api/1/file/{fileId}/{versionId}/{fileType}/finish" \
               -H "Content-Type: application/json" \
               -b "auth={authCookie}" \
               --data '{"etags": ["xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy"], "nextPartNumber": "0", "maxParts": "0"}'
  /file/{fileId}/{versionId}/{fileType}/start:
    put:
      description: |-
        Starts an upload of a specific FilePart. This endpoint will return an AWS URL which you can PUT data to. You need to call this and receive a new AWS API URL for each `partNumber`. Please see AWS's REST documentation on "PUT Object to S3" on how to upload. Once all parts has been uploaded, proceed to `/finish` endpoint.

        **Note:** `nextPartNumber` seems like it is always ignored. Despite it returning 0, first partNumber is always 1.
      operationId: startFileDataUpload
      parameters:
      - description: Must be a valid file ID.
        explode: false
        in: path
        name: fileId
        required: true
        schema:
          example: file_00000000-0000-0000-0000-000000000000
          pattern: "file_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      - description: Version ID of the asset.
        explode: false
        in: path
        name: versionId
        required: true
        schema:
          example: 1
          minimum: 1
          type: integer
        style: simple
      - description: Type of file.
        explode: false
        in: path
        name: fileType
        required: true
        schema:
          enum:
          - file
          - signature
          - delta
          example: file
          type: string
        style: simple
      - deprecated: true
        description: "The part number to start uploading. If not provided, the first\
          \ part will be started."
        explode: true
        in: query
        name: partNumber
        required: false
        schema:
          example: 1
          minimum: 0
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Response:
                  value:
                    url: https://s3.amazonaws.com/files.vrchat.cloud/Avatar-MyAvatar-Un.file_00000000-0000-0000-0000-000000000000.1.unitypackage?AWSAccessKeyId=XXXXXXXXXXXXXXXXXXXX&Expires=1626028518&Signature=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&partNumber=1&uploadId=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx_xxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxx_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx..xxxxxxxxxxxxxxxxxxxxxxx
              schema:
                $ref: '#/components/schemas/FileUploadURL'
          description: "See [https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html](AWS\
            \ REST docs - PUT Object)"
        "400":
          content:
            application/json:
              examples:
                Tried To Upload Against Already Finished Version:
                  value:
                    error:
                      message: Cannot upload against a complete version entry‚Ä§ Create
                        a new version of this file before uploading‚Ä§
                      status_code: 400
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to start an upload against a FileVersion
            that is already marked as  `complete`.
      security:
      - authCookie: []
      summary: Start FileData Upload
      tags:
      - files
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X PUT "https://api.vrchat.cloud/api/1/file/{fileId}/{versionId}/{fileType}/start" \
               -b "auth={authCookie}"
  /file/{fileId}/{versionId}/{fileType}/status:
    get:
      description: Retrieves the upload status for file upload. Can currently only
        be accessed when `status` is `waiting`. Trying to access it on a file version
        already uploaded currently times out.
      operationId: getFileDataUploadStatus
      parameters:
      - description: Must be a valid file ID.
        explode: false
        in: path
        name: fileId
        required: true
        schema:
          example: file_00000000-0000-0000-0000-000000000000
          pattern: "file_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      - description: Version ID of the asset.
        explode: false
        in: path
        name: versionId
        required: true
        schema:
          example: 1
          minimum: 1
          type: integer
        style: simple
      - description: Type of file.
        explode: false
        in: path
        name: fileType
        required: true
        schema:
          enum:
          - file
          - signature
          - delta
          example: file
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Access Key:
                  value:
                    uploadId: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx_xxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxx_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx..xxxxxxxxxxxxxxxxxxxxxxx
                    fileName: Avatar-MyAvatar-Un.file_00000000-0000-0000-0000-000000000000.1.unitypackage
                    nextPartNumber: 0
                    maxParts: 1000
                    parts: []
                    etags: []
              schema:
                $ref: '#/components/schemas/FileVersionUploadStatus'
          description: "Current FileVersion upload status. Contains the uploadId needed\
            \ for uploading, as well as the already uploaded parts."
      security:
      - authCookie: []
      summary: Check FileData Upload Status
      tags:
      - files
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET "https://api.vrchat.cloud/api/1/file/{fileId}/{versionId}/{fileType}/status" \
               -b "auth={authCookie}"
  /auth/user/friends:
    get:
      description: List information about friends.
      operationId: getFriends
      parameters:
      - description: A zero-based offset from the default object sorting from where
          search results start.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - description: The number of objects to return.
        explode: true
        in: query
        name: "n"
        required: false
        schema:
          default: 60
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: "Returns *only* offline users if true, returns only online and\
          \ active users if false"
        explode: true
        in: query
        name: offline
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/LimitedUser'
                type: array
          description: Returns a list of LimitedUser objects.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
      security:
      - authCookie: []
      summary: List Friends
      tags:
      - friends
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET "https://api.vrchat.cloud/api/1/auth/user/friends?offline=true" \
               -b "auth={authCookie}"
  /user/{userId}/friendRequest:
    delete:
      description: "Deletes an outgoing pending friend request to another user. To\
        \ delete an incoming friend request, use the `deleteNotification` endpoint\
        \ instead."
      operationId: deleteFriendRequest
      parameters:
      - description: Must be a valid user ID.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Deleted Friend Request:
                  value:
                    success:
                      message: Friendship request deleted
                      status_code: 200
              schema:
                $ref: '#/components/schemas/Success'
          description: Successful response after cancelling a friend request.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 Delete Friend Request":
                  value:
                    error:
                      message: that friend request could not be found
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to delete a non-existent friend-request.
      security:
      - authCookie: []
      summary: Delete Friend Request
      tags:
      - friends
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X DELETE "https://api.vrchat.cloud/api/1/user/{userId}/friendRequest" \
               -b "auth={authCookie}"
    post:
      description: Send a friend request to another user.
      operationId: friend
      parameters:
      - description: Must be a valid user ID.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Friend Request Response:
                  value:
                    id: frq_00000000-0000-0000-0000-000000000000
                    senderUserId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
                    type: friendRequest
                    message: ""
                    details: "{}"
                    seen: false
                    created_at: 2021-01-01T00:00:00.000Z
              schema:
                $ref: '#/components/schemas/Notification'
          description: Returns a single Notifcation object.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 User Doesn't Exist Response":
                  value:
                    error:
                      message: user doesn't exist«É
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to send a friend request to a user
            which doesn't exist.
      security:
      - authCookie: []
      summary: Send Friend Request
      tags:
      - friends
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X POST "https://api.vrchat.cloud/api/1/user/{userId}/friendRequest" \
               -b "auth={authCookie}"
  /user/{userId}/friendStatus:
    get:
      description: "Retrieve if the user is currently a friend with a given user,\
        \ if they have an outgoing friend request, and if they have an incoming friend\
        \ request. The proper way to receive and accept friend request is by checking\
        \ if the user has an incoming `Notification` of type `friendRequest`, and\
        \ then accepting that notification."
      operationId: getFriendStatus
      parameters:
      - description: Must be a valid user ID.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Not Friends:
                  value:
                    isFriend: true
                    outgoingRequest: false
                    incomingRequest: false
                Is Friend:
                  value:
                    isFriend: true
                    outgoingRequest: false
                    incomingRequest: false
              schema:
                $ref: '#/components/schemas/FriendStatus'
          description: Returns a users Friend Status.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
      security:
      - authCookie: []
      summary: Check Friend Status
      tags:
      - friends
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET "https://api.vrchat.cloud/api/1/user/{userId}/friendStatus" \
               -b "auth={authCookie}"
  /auth/user/friends/{userId}:
    delete:
      description: Unfriend a user by ID.
      operationId: unfriend
      parameters:
      - description: Must be a valid user ID.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Unfriend Success:
                  value:
                    success:
                      message: Friendship destroyed
                      status_code: 200
              schema:
                $ref: '#/components/schemas/Success'
          description: Successful response after unfriending a user.
        "400":
          content:
            application/json:
              examples:
                "400 Not Friends Response":
                  value:
                    error:
                      message: These users are not friends
                      status_code: 400
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to unfriend someone who is not a
            friend.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
      security:
      - authCookie: []
      summary: Unfriend
      tags:
      - friends
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X DELETE "https://api.vrchat.cloud/api/1/auth/user/friends/{userId}" \
               -b "auth={authCookie}"
  /groups:
    post:
      description: Creates a Group and returns a Group object. **Requires VRC+ Subscription.**
      operationId: createGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroupRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: Returns a single Group object.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
      security:
      - authCookie: []
      summary: Create Group
      tags:
      - groups
  /groups/{groupId}:
    delete:
      description: Deletes a Group.
      operationId: deleteGroup
      parameters:
      - description: Must be a valid group ID.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          example: grp_00000000-0000-0000-0000-000000000000
          pattern: "grp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Deleted Group:
                  value:
                    success:
                      message: Group deleted!
                      status_code: 200
              schema:
                $ref: '#/components/schemas/Success'
          description: Successful response after deleting a Group.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 World Not Found":
                  value:
                    error:
                      message: Can't find group«É
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to perform operations on a non-existing
            group.
      security:
      - authCookie: []
      summary: Delete Group
      tags:
      - groups
    get:
      description: Returns a single Group by ID.
      operationId: getGroup
      parameters:
      - description: Must be a valid group ID.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          example: grp_00000000-0000-0000-0000-000000000000
          pattern: "grp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      - description: Include roles for the Group object. Defaults to false.
        explode: true
        in: query
        name: includeRoles
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: Returns a single Group object.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 World Not Found":
                  value:
                    error:
                      message: Can't find group«É
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to perform operations on a non-existing
            group.
      security:
      - authCookie: []
      summary: Get Group by ID
      tags:
      - groups
    put:
      description: Updates a Group and returns it.
      operationId: updateGroup
      parameters:
      - description: Must be a valid group ID.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          example: grp_00000000-0000-0000-0000-000000000000
          pattern: "grp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGroupRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: Returns a single Group object.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 World Not Found":
                  value:
                    error:
                      message: Can't find group«É
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to perform operations on a non-existing
            group.
      security:
      - authCookie: []
      summary: Update Group
      tags:
      - groups
  /groups/{groupId}/announcement:
    delete:
      description: Deletes the announcement for a Group.
      operationId: deleteGroupAnnouncement
      parameters:
      - description: Must be a valid group ID.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          example: grp_00000000-0000-0000-0000-000000000000
          pattern: "grp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Deleted Group Announcement:
                  value:
                    success:
                      message: Group announcement was cleared!
                      status_code: 200
              schema:
                $ref: '#/components/schemas/Success'
          description: Successful response after deleting/clearing the group announcement.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 World Not Found":
                  value:
                    error:
                      message: Can't find group«É
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to perform operations on a non-existing
            group.
      security:
      - authCookie: []
      summary: Delete Group Announcement
      tags:
      - groups
    get:
      description: "Returns the announcement for a Group.\nIf no announcement has\
        \ been made, then it returns **empty object**. \nIf an announcement exists,\
        \ then it will always return all fields except `imageId` and `imageUrl` which\
        \ may be null."
      operationId: getGroupAnnouncements
      parameters:
      - description: Must be a valid group ID.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          example: grp_00000000-0000-0000-0000-000000000000
          pattern: "grp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupAnnouncement'
          description: Returns a single GroupAnnouncement object.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 World Not Found":
                  value:
                    error:
                      message: Can't find group«É
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to perform operations on a non-existing
            group.
      security:
      - authCookie: []
      summary: Get Group Announcement
      tags:
      - groups
    post:
      description: Creates an Announcement for a Group.
      operationId: createGroupAnnouncement
      parameters:
      - description: Must be a valid group ID.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          example: grp_00000000-0000-0000-0000-000000000000
          pattern: "grp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroupAnnouncementRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupAnnouncement'
          description: Returns a single GroupAnnouncement object.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 World Not Found":
                  value:
                    error:
                      message: Can't find group«É
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to perform operations on a non-existing
            group.
      security:
      - authCookie: []
      summary: Create Group Announcement
      tags:
      - groups
  /groups/{groupId}/auditLogs:
    get:
      description: Returns a list of audit logs for a Group.
      operationId: getGroupAuditLogs
      parameters:
      - description: Must be a valid group ID.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          example: grp_00000000-0000-0000-0000-000000000000
          pattern: "grp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      - description: The number of objects to return.
        explode: true
        in: query
        name: "n"
        required: false
        schema:
          default: 60
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: A zero-based offset from the default object sorting from where
          search results start.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - description: The start date of the search range.
        explode: true
        in: query
        name: startDate
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: The end date of the search range.
        explode: true
        in: query
        name: endDate
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedGroupAuditLogEntryList'
          description: "Returns a list of GroupAudit objects, wrapped in new pagination\
            \ format."
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 World Not Found":
                  value:
                    error:
                      message: Can't find group«É
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to perform operations on a non-existing
            group.
      security:
      - authCookie: []
      summary: Get Group Audit Logs
      tags:
      - groups
  /groups/{groupId}/bans:
    get:
      description: Returns a list of banned users for a Group.
      operationId: getGroupBans
      parameters:
      - description: Must be a valid group ID.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          example: grp_00000000-0000-0000-0000-000000000000
          pattern: "grp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      - description: The number of objects to return.
        explode: true
        in: query
        name: "n"
        required: false
        schema:
          default: 60
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: A zero-based offset from the default object sorting from where
          search results start.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GroupMember'
                type: array
          description: Returns a list of GroupMember objects.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 World Not Found":
                  value:
                    error:
                      message: Can't find group«É
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to perform operations on a non-existing
            group.
      security:
      - authCookie: []
      summary: Get Group Bans
      tags:
      - groups
    post:
      description: Bans a user from a Group.
      operationId: banGroupMember
      parameters:
      - description: Must be a valid group ID.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          example: grp_00000000-0000-0000-0000-000000000000
          pattern: "grp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BanGroupMemberRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMember'
          description: Returns a list of GroupMember objects.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 World Not Found":
                  value:
                    error:
                      message: Can't find group«É
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to perform operations on a non-existing
            group.
      security:
      - authCookie: []
      summary: Ban Group Member
      tags:
      - groups
  /groups/{groupId}/bans/{userId}:
    delete:
      description: Unbans a user from a Group.
      operationId: unbanGroupMember
      parameters:
      - description: Must be a valid group ID.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          example: grp_00000000-0000-0000-0000-000000000000
          pattern: "grp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      - description: Must be a valid user ID.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMember'
          description: Returns a list of GroupMember objects.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 World Not Found":
                  value:
                    error:
                      message: Can't find group«É
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to perform operations on a non-existing
            group.
      security:
      - authCookie: []
      summary: Unban Group Member
      tags:
      - groups
  /groups/{groupId}/galleries:
    post:
      description: Creates a gallery for a Group.
      operationId: createGroupGallery
      parameters:
      - description: Must be a valid group ID.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          example: grp_00000000-0000-0000-0000-000000000000
          pattern: "grp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroupGalleryRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupGallery'
          description: Returns a single GroupGallery object.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 World Not Found":
                  value:
                    error:
                      message: Can't find group«É
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to perform operations on a non-existing
            group.
      security:
      - authCookie: []
      summary: Create Group Gallery
      tags:
      - groups
  /groups/{groupId}/galleries/{groupGalleryId}:
    delete:
      description: Deletes a gallery for a Group.
      operationId: deleteGroupGallery
      parameters:
      - description: Must be a valid group ID.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          example: grp_00000000-0000-0000-0000-000000000000
          pattern: "grp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      - description: Must be a valid group gallery ID.
        explode: false
        in: path
        name: groupGalleryId
        required: true
        schema:
          example: ggal_00000000-0000-0000-0000-000000000000
          pattern: "ggal_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Deleted Group Gallery:
                  value:
                    success:
                      message: Gallery deleted!
                      status_code: 200
              schema:
                $ref: '#/components/schemas/Success'
          description: Successful response after deleting a group gallery.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 World Not Found":
                  value:
                    error:
                      message: Can't find group«É
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to perform operations on a non-existing
            group.
      security:
      - authCookie: []
      summary: Delete Group Gallery
      tags:
      - groups
    get:
      description: Returns a list of images for a Group gallery.
      operationId: getGroupGalleryImages
      parameters:
      - description: Must be a valid group ID.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          example: grp_00000000-0000-0000-0000-000000000000
          pattern: "grp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      - description: Must be a valid group gallery ID.
        explode: false
        in: path
        name: groupGalleryId
        required: true
        schema:
          example: ggal_00000000-0000-0000-0000-000000000000
          pattern: "ggal_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      - description: The number of objects to return.
        explode: true
        in: query
        name: "n"
        required: false
        schema:
          default: 60
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: A zero-based offset from the default object sorting from where
          search results start.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - description: "If specified, only returns images that have been approved or\
          \ not approved."
        explode: true
        in: query
        name: approved
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GroupGalleryImage'
                type: array
          description: Returns a list of GroupGalleryImage objects.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 World Not Found":
                  value:
                    error:
                      message: Can't find group«É
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to perform operations on a non-existing
            group.
      security:
      - authCookie: []
      summary: Get Group Gallery Images
      tags:
      - groups
    put:
      description: Updates a gallery for a Group.
      operationId: updateGroupGallery
      parameters:
      - description: Must be a valid group ID.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          example: grp_00000000-0000-0000-0000-000000000000
          pattern: "grp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      - description: Must be a valid group gallery ID.
        explode: false
        in: path
        name: groupGalleryId
        required: true
        schema:
          example: ggal_00000000-0000-0000-0000-000000000000
          pattern: "ggal_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGroupGalleryRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupGallery'
          description: Returns a single GroupGallery object.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 World Not Found":
                  value:
                    error:
                      message: Can't find group«É
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to perform operations on a non-existing
            group.
      security:
      - authCookie: []
      summary: Update Group Gallery
      tags:
      - groups
  /groups/{groupId}/galleries/{groupGalleryId}/images:
    post:
      description: Adds an image to a Group gallery.
      operationId: addGroupGalleryImage
      parameters:
      - description: Must be a valid group ID.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          example: grp_00000000-0000-0000-0000-000000000000
          pattern: "grp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      - description: Must be a valid group gallery ID.
        explode: false
        in: path
        name: groupGalleryId
        required: true
        schema:
          example: ggal_00000000-0000-0000-0000-000000000000
          pattern: "ggal_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddGroupGalleryImageRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupGalleryImage'
          description: Returns a single GroupGalleryImage object.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 World Not Found":
                  value:
                    error:
                      message: Can't find group«É
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to perform operations on a non-existing
            group.
      security:
      - authCookie: []
      summary: Add Group Gallery Image
      tags:
      - groups
  /groups/{groupId}/galleries/{groupGalleryId}/images/{groupGalleryImageId}:
    delete:
      description: Deletes an image from a Group gallery.
      operationId: deleteGroupGalleryImage
      parameters:
      - description: Must be a valid group ID.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          example: grp_00000000-0000-0000-0000-000000000000
          pattern: "grp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      - description: Must be a valid group gallery ID.
        explode: false
        in: path
        name: groupGalleryId
        required: true
        schema:
          example: ggal_00000000-0000-0000-0000-000000000000
          pattern: "ggal_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      - description: Must be a valid group gallery image ID.
        explode: false
        in: path
        name: groupGalleryImageId
        required: true
        schema:
          example: ggim_00000000-0000-0000-0000-000000000000
          pattern: "ggim_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Deleted Group Gallery Image:
                  value:
                    success:
                      message: Gallery image removed!
                      status_code: 200
              schema:
                $ref: '#/components/schemas/Success'
          description: Successful response after deleting a group gallery image.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "403":
          content:
            application/json:
              examples:
                "403 Cannot Delete Submission":
                  value:
                    error:
                      message: You can't remove this gallery submission!
                      status_code: 403
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to delete a submission to a group's
            gallery when the user does not have permission to do so.
        "404":
          content:
            application/json:
              examples:
                "404 World Not Found":
                  value:
                    error:
                      message: Can't find group«É
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to perform operations on a non-existing
            group.
      security:
      - authCookie: []
      summary: Delete Group Gallery Image
      tags:
      - groups
  /groups/{groupId}/invites:
    get:
      description: Returns a list of members that have been invited to the Group.
      operationId: getGroupInvites
      parameters:
      - description: Must be a valid group ID.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          example: grp_00000000-0000-0000-0000-000000000000
          pattern: "grp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GroupMember'
                type: array
          description: Returns a list of GroupMember objects.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "403":
          content:
            application/json:
              examples:
                "403 Not Group Member":
                  value:
                    error:
                      message: You're not a member.
                      status_code: 403
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to perform operations on a group
            you are not member of.
        "404":
          content:
            application/json:
              examples:
                "404 World Not Found":
                  value:
                    error:
                      message: Can't find group«É
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to perform operations on a non-existing
            group.
      security:
      - authCookie: []
      summary: Get Group Invites Sent
      tags:
      - groups
    post:
      description: Sends an invite to a user to join the group.
      operationId: createGroupInvite
      parameters:
      - description: Must be a valid group ID.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          example: grp_00000000-0000-0000-0000-000000000000
          pattern: "grp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroupInviteRequest'
      responses:
        "200":
          description: OK
        "400":
          description: User <displayName> is already invited
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 World Not Found":
                  value:
                    error:
                      message: Can't find group«É
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to perform operations on a non-existing
            group.
      security:
      - authCookie: []
      summary: Invite User to Group
      tags:
      - groups
  /groups/{groupId}/invites/{userId}:
    delete:
      description: Deletes an Group invite sent to a User
      operationId: deleteGroupInvite
      parameters:
      - description: Must be a valid group ID.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          example: grp_00000000-0000-0000-0000-000000000000
          pattern: "grp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      - description: Must be a valid user ID.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
      security:
      - authCookie: []
      summary: Delete User Invite
      tags:
      - groups
  /groups/{groupId}/join:
    post:
      description: Join a Group by ID and returns the member object.
      operationId: joinGroup
      parameters:
      - description: Must be a valid group ID.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          example: grp_00000000-0000-0000-0000-000000000000
          pattern: "grp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMember'
          description: Returns a list of GroupMember objects.
        "400":
          content:
            application/json:
              examples:
                "400 User Already Member":
                  value:
                    error:
                      message: You're already a member!
                      status_code: 400
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to join a group that the user is
            already a member of.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 World Not Found":
                  value:
                    error:
                      message: Can't find group«É
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to perform operations on a non-existing
            group.
      security:
      - authCookie: []
      summary: Join Group
      tags:
      - groups
  /groups/{groupId}/leave:
    post:
      description: Leave a group by ID.
      operationId: leaveGroup
      parameters:
      - description: Must be a valid group ID.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          example: grp_00000000-0000-0000-0000-000000000000
          pattern: "grp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      responses:
        "200":
          description: OK
        "403":
          content:
            application/json:
              examples:
                "403 Not Group Member":
                  value:
                    error:
                      message: You're not a member.
                      status_code: 403
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to perform operations on a group
            you are not member of.
        "404":
          content:
            application/json:
              examples:
                "404 World Not Found":
                  value:
                    error:
                      message: Can't find group«É
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to perform operations on a non-existing
            group.
      security:
      - authCookie: []
      summary: Leave Group
      tags:
      - groups
  /groups/{groupId}/members:
    get:
      description: |-
        Returns a List of all **other** Group Members. This endpoint will never return the user calling the endpoint.
        Information about the user calling the endpoint must be found in the `myMember` field of the Group object.
      operationId: getGroupMembers
      parameters:
      - description: Must be a valid group ID.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          example: grp_00000000-0000-0000-0000-000000000000
          pattern: "grp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      - description: The number of objects to return.
        explode: true
        in: query
        name: "n"
        required: false
        schema:
          default: 60
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: A zero-based offset from the default object sorting from where
          search results start.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GroupMember'
                type: array
          description: Returns a list of GroupMember objects.
        "400":
          content:
            application/json:
              examples:
                "400 N is too low":
                  value:
                    error:
                      message: n must be a positive integerÀ∏ '-1'
                      status_code: 400
                "400 N is too high":
                  value:
                    error:
                      message: nÔºù1000 is much too high‚Ä§ implement paging you savages‚Ä§
                      status_code: 400
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to search list of users with an
            invalid request.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 World Not Found":
                  value:
                    error:
                      message: Can't find group«É
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to perform operations on a non-existing
            group.
      security:
      - authCookie: []
      summary: List Group Members
      tags:
      - groups
  /groups/{groupId}/members/{userId}:
    delete:
      description: Kicks a Group Member from the Group. The current user must have
        the "Remove Group Members" permission.
      operationId: kickGroupMember
      parameters:
      - description: Must be a valid group ID.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          example: grp_00000000-0000-0000-0000-000000000000
          pattern: "grp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      - description: Must be a valid user ID.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "403":
          content:
            application/json:
              examples:
                "403 Not Group Member":
                  value:
                    error:
                      message: You're not a member.
                      status_code: 403
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to perform operations on a group
            you are not member of.
        "404":
          content:
            application/json:
              examples:
                "404 World Not Found":
                  value:
                    error:
                      message: Can't find group«É
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to perform operations on a non-existing
            group.
      security:
      - authCookie: []
      summary: Kick Group Member
      tags:
      - groups
    get:
      description: Returns a LimitedGroup Member.
      operationId: getGroupMember
      parameters:
      - description: Must be a valid group ID.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          example: grp_00000000-0000-0000-0000-000000000000
          pattern: "grp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      - description: Must be a valid user ID.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupLimitedMember'
          description: Returns a list of GroupMember objects.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 World Not Found":
                  value:
                    error:
                      message: Can't find group«É
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to perform operations on a non-existing
            group.
      security:
      - authCookie: []
      summary: Get Group Member
      tags:
      - groups
    put:
      description: Updates a Group Member
      operationId: updateGroupMember
      parameters:
      - description: Must be a valid group ID.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          example: grp_00000000-0000-0000-0000-000000000000
          pattern: "grp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      - description: Must be a valid user ID.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGroupMemberRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupLimitedMember'
          description: Returns a list of GroupMember objects.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 World Not Found":
                  value:
                    error:
                      message: Can't find group«É
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to perform operations on a non-existing
            group.
      security:
      - authCookie: []
      summary: Update Group Member
      tags:
      - groups
  /groups/{groupId}/members/{userId}/roles/{groupRoleId}:
    delete:
      description: Removes a Role from a Group Member
      operationId: removeGroupMemberRole
      parameters:
      - description: Must be a valid group ID.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          example: grp_00000000-0000-0000-0000-000000000000
          pattern: "grp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      - description: Must be a valid user ID.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - description: Must be a valid group role ID.
        explode: false
        in: path
        name: groupRoleId
        required: true
        schema:
          example: grol_00000000-0000-0000-0000-000000000000
          pattern: "grol_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupRoleIDList'
          description: Returns a list of GroupRoleID objects.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 World Not Found":
                  value:
                    error:
                      message: Can't find group«É
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to perform operations on a non-existing
            group.
      security:
      - authCookie: []
      summary: Remove Role from GroupMember
      tags:
      - groups
    put:
      description: Adds a Role to a Group Member
      operationId: addGroupMemberRole
      parameters:
      - description: Must be a valid group ID.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          example: grp_00000000-0000-0000-0000-000000000000
          pattern: "grp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      - description: Must be a valid user ID.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - description: Must be a valid group role ID.
        explode: false
        in: path
        name: groupRoleId
        required: true
        schema:
          example: grol_00000000-0000-0000-0000-000000000000
          pattern: "grol_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupRoleIDList'
          description: Returns a list of GroupRoleID objects.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 World Not Found":
                  value:
                    error:
                      message: Can't find group«É
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to perform operations on a non-existing
            group.
      security:
      - authCookie: []
      summary: Add Role to GroupMember
      tags:
      - groups
  /groups/{groupId}/permissions:
    get:
      description: Returns a List of all possible/available permissions for a Group.
      operationId: getGroupPermissions
      parameters:
      - description: Must be a valid group ID.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          example: grp_00000000-0000-0000-0000-000000000000
          pattern: "grp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GroupPermission'
                type: array
          description: Returns a list of GroupPermission objects.
        "400":
          content:
            application/json:
              examples:
                "400 N is too low":
                  value:
                    error:
                      message: n must be a positive integerÀ∏ '-1'
                      status_code: 400
                "400 N is too high":
                  value:
                    error:
                      message: nÔºù1000 is much too high‚Ä§ implement paging you savages‚Ä§
                      status_code: 400
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to search list of users with an
            invalid request.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 World Not Found":
                  value:
                    error:
                      message: Can't find group«É
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to perform operations on a non-existing
            group.
      security:
      - authCookie: []
      summary: List Group Permissions
      tags:
      - groups
  /groups/{groupId}/requests:
    delete:
      description: Cancels a request sent to join the group.
      operationId: cancelGroupRequest
      parameters:
      - description: Must be a valid group ID.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          example: grp_00000000-0000-0000-0000-000000000000
          pattern: "grp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      responses:
        "200":
          description: OK
        "400":
          description: You can't cancel a join request if you didn't request to join‚Ä§
        "403":
          content:
            application/json:
              examples:
                "403 Not Group Member":
                  value:
                    error:
                      message: You're not a member.
                      status_code: 403
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to perform operations on a group
            you are not member of.
        "404":
          content:
            application/json:
              examples:
                "404 World Not Found":
                  value:
                    error:
                      message: Can't find group«É
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to perform operations on a non-existing
            group.
      security:
      - authCookie: []
      summary: Cancel Group Join Request
      tags:
      - groups
    get:
      description: Returns a list of members that have requested to join the Group.
      operationId: getGroupRequests
      parameters:
      - description: Must be a valid group ID.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          example: grp_00000000-0000-0000-0000-000000000000
          pattern: "grp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GroupMember'
                type: array
          description: Returns a list of GroupMember objects.
        "403":
          content:
            application/json:
              examples:
                "403 Not Group Member":
                  value:
                    error:
                      message: You're not a member.
                      status_code: 403
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to perform operations on a group
            you are not member of.
        "404":
          content:
            application/json:
              examples:
                "404 World Not Found":
                  value:
                    error:
                      message: Can't find group«É
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to perform operations on a non-existing
            group.
      security:
      - authCookie: []
      summary: Get Group Join Requests
      tags:
      - groups
  /groups/{groupId}/requests/{userId}:
    put:
      description: Responds to a Group Join Request with Accept/Deny
      operationId: respondGroupJoinRequest
      parameters:
      - description: Must be a valid group ID.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          example: grp_00000000-0000-0000-0000-000000000000
          pattern: "grp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      - description: Must be a valid user ID.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RespondGroupJoinRequest'
      responses:
        "200":
          description: OK
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 World Not Found":
                  value:
                    error:
                      message: Can't find group«É
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to perform operations on a non-existing
            group.
      security:
      - authCookie: []
      summary: Respond Group Join request
      tags:
      - groups
  /groups/{groupId}/roles:
    get:
      description: Returns a Group Role by ID.
      operationId: getGroupRoles
      parameters:
      - description: Must be a valid group ID.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          example: grp_00000000-0000-0000-0000-000000000000
          pattern: "grp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GroupRole'
                type: array
          description: Returns a list of GroupRole objects.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 World Not Found":
                  value:
                    error:
                      message: Can't find group«É
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to perform operations on a non-existing
            group.
      security:
      - authCookie: []
      summary: Get Group Roles
      tags:
      - groups
    post:
      description: Create a Group role.
      operationId: createGroupRole
      parameters:
      - description: Must be a valid group ID.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          example: grp_00000000-0000-0000-0000-000000000000
          pattern: "grp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroupRoleRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupRole'
          description: Returns a single GroupRole object.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 World Not Found":
                  value:
                    error:
                      message: Can't find group«É
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to perform operations on a non-existing
            group.
      security:
      - authCookie: []
      summary: Create GroupRole
      tags:
      - groups
  /groups/{groupId}/roles/{groupRoleId}:
    delete:
      description: Deletes a Group Role by ID and returns the remaining roles.
      operationId: deleteGroupRole
      parameters:
      - description: Must be a valid group ID.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          example: grp_00000000-0000-0000-0000-000000000000
          pattern: "grp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      - description: Must be a valid group role ID.
        explode: false
        in: path
        name: groupRoleId
        required: true
        schema:
          example: grol_00000000-0000-0000-0000-000000000000
          pattern: "grol_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GroupRole'
                type: array
          description: Returns a list of GroupRole objects.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "404":
          content:
            application/json:
              examples:
                "403 Not Group Member":
                  value:
                    error:
                      message: You're not a member.
                      status_code: 403
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to perform operations on a group
            you are not member of.
      security:
      - authCookie: []
      summary: Delete Group Role
      tags:
      - groups
    put:
      description: Updates a group role by ID.
      operationId: updateGroupRole
      parameters:
      - description: Must be a valid group ID.
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          example: grp_00000000-0000-0000-0000-000000000000
          pattern: "grp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      - description: Must be a valid group role ID.
        explode: false
        in: path
        name: groupRoleId
        required: true
        schema:
          example: grol_00000000-0000-0000-0000-000000000000
          pattern: "grol_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGroupRoleRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GroupRole'
                type: array
          description: Returns a list of GroupRole objects.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
      security:
      - authCookie: []
      summary: Update Group Role
      tags:
      - groups
  /invite/{userId}:
    post:
      description: Sends an invite to a user. Returns the Notification of type `invite`
        that was sent.
      operationId: inviteUser
      parameters:
      - description: Must be a valid user ID.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InviteRequest'
        description: Slot number of the Invite Message to use when inviting a user.
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Friend Request Response:
                  value:
                    id: frq_00000000-0000-0000-0000-000000000000
                    recieverUserId: usr_00000000-0000-0000-0000-000000000000
                    senderUserId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
                    type: friendRequest
                    message: ""
                    details: "{}"
                    created_at: 2021-01-01T00:00:00.000Z
              schema:
                $ref: '#/components/schemas/SentNotification'
          description: Returns a single SentNotifcation object.
        "403":
          content:
            application/json:
              examples:
                Must Be Friends Error:
                  value:
                    error:
                      message: '"You need to be friends with that user first."'
                      status_code: 403
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to invite someome whom you are not
            friends with.
      security:
      - authCookie: []
      summary: Invite User
      tags:
      - invite
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X POST "https://api.vrchat.cloud/api/1/invite/{userId}" \
               -H "Content-Type: application/json" \
               -b "auth={authCookie}" \
               --data '{"instanceId": "wrld_ba913a96-fac4-4048-a062-9aa5db092812:12345~hidden(usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469)~region(eu)~nonce(27e8414a-59a0-4f3d-af1f-f27557eb49a2)", "messageSlot": 11}'
  /invite/myself/to/{worldId}:{instanceId}:
    post:
      description: Sends self an invite to an instance
      operationId: inviteMyselfTo
      parameters:
      - description: Must be a valid world ID.
        explode: false
        in: path
        name: worldId
        required: true
        schema:
          type: string
        style: simple
      - description: Must be a valid instance ID.
        explode: false
        in: path
        name: instanceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Friend Request Response:
                  value:
                    id: frq_00000000-0000-0000-0000-000000000000
                    recieverUserId: usr_00000000-0000-0000-0000-000000000000
                    senderUserId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
                    type: friendRequest
                    message: ""
                    details: "{}"
                    created_at: 2021-01-01T00:00:00.000Z
              schema:
                $ref: '#/components/schemas/SentNotification'
          description: Returns a single SentNotifcation object.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "404":
          content:
            application/json:
              examples:
                Instance Not Found Example:
                  value:
                    error:
                      message: '"Instance not found"'
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to non existant instance
      security:
      - authCookie: []
      summary: Invite Myself To Instance
      tags:
      - invite
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X POST "https://api.vrchat.cloud/api/1/invite/myself/to/{worldid}:{instanceid}" \
               -H "Content-Type: application/json" \
               -b "auth={authCookie}"'
  /requestInvite/{userId}:
    post:
      description: Requests an invite from a user. Returns the Notification of type
        `requestInvite` that was sent.
      operationId: requestInvite
      parameters:
      - description: Must be a valid user ID.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestInviteRequest'
        description: Slot number of the Request Message to use when request an invite.
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Friend Request Response:
                  value:
                    id: frq_00000000-0000-0000-0000-000000000000
                    senderUserId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
                    type: friendRequest
                    message: ""
                    details: "{}"
                    seen: false
                    created_at: 2021-01-01T00:00:00.000Z
              schema:
                $ref: '#/components/schemas/Notification'
          description: Returns a single Notifcation object.
        "403":
          content:
            application/json:
              examples:
                Must Be Friends Error:
                  value:
                    error:
                      message: '"You need to be friends with that user first."'
                      status_code: 403
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to invite someome whom you are not
            friends with.
      security:
      - authCookie: []
      summary: Request Invite
      tags:
      - invite
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X POST "https://api.vrchat.cloud/api/1/requestInvite/{userId}" \
               -H "Content-Type: application/json" \
               -b "auth={authCookie}" \
               --data '{"messageSlot": 11}'
  /invite/{notificationId}/response:
    post:
      description: Respond to an invite request by sending a world invite to the requesting
        user. `:notificationId` is the ID of the requesting notification.
      operationId: respondInvite
      parameters:
      - description: Must be a valid notification ID.
        explode: false
        in: path
        name: notificationId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InviteResponse'
        description: Slot number of the Response Message to use when responding to
          a user.
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Friend Request Response:
                  value:
                    id: frq_00000000-0000-0000-0000-000000000000
                    senderUserId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
                    type: friendRequest
                    message: ""
                    details: "{}"
                    seen: false
                    created_at: 2021-01-01T00:00:00.000Z
              schema:
                $ref: '#/components/schemas/Notification'
          description: Returns a single Notifcation object.
        "400":
          content:
            application/json:
              examples:
                Response Slot Out Of Bounds Error:
                  value:
                    error:
                      message: '"Response slot is out of bounds."'
                      status_code: 400
                Already Responded Error:
                  value:
                    error:
                      message: '"You''ve already responded to that request."'
                      status_code: 400
                Cannot Respond Self Invite Error:
                  value:
                    error:
                      message: '"You cannot respond to your own invites."'
                      status_code: 400
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to respond to an invite and something
            went wrong.
      security:
      - authCookie: []
      summary: Respond Invite
      tags:
      - invite
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X POST "https://api.vrchat.cloud/api/1/invite/{notificationId}/response" \
               -H "Content-Type: application/json" \
               -b "auth={authCookie}" \
               --data '{"responseSlot": 11}'
  /message/{userId}/{messageType}:
    get:
      description: |-
        Returns a list of all the users Invite Messages. Admin Credentials are required to view messages of other users!

        Message type refers to a different collection of messages, used during different types of responses.

        * `message` = Message during a normal invite
        * `response` = Message when replying to a message
        * `request` = Message when requesting an invite
        * `requestResponse` = Message when replying to a request for invite
      operationId: getInviteMessages
      parameters:
      - description: Must be a valid user ID.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - description: "The type of message to fetch, must be a valid InviteMessageType."
        explode: false
        in: path
        name: messageType
        required: true
        schema:
          $ref: '#/components/schemas/InviteMessageType'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/InviteMessage'
                type: array
          description: Returns a list of InviteMessage objects.
        "400":
          content:
            application/json:
              examples:
                "400 Negative Slot Number Error":
                  value:
                    error:
                      message: Really? A negative slot? Tsk-tsk‚Ä§‚Ä§‚Ä§
                      status_code: 400
                "400 Too High Slot Number Error":
                  value:
                    error:
                      message: That is too high of a slot number‚Ä§
                      status_code: 400
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to update an Invite Message with
            an invalid slot number.
        "401":
          content:
            application/json:
              examples:
                Not Authorized Example:
                  value:
                    error:
                      message: You are not authorized to perform that action.
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing authorization to perform that
            action.
      security:
      - authCookie: []
      summary: List Invite Messages
      tags:
      - invite
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET "https://api.vrchat.cloud/api/1/message/{userId}/{messageType}" \
               -b "auth={authCookie}"
  /message/{userId}/{messageType}/{slot}:
    delete:
      description: |-
        Resets a single Invite Message back to its original message, and then returns a list of all of them. Admin Credentials are required to update messages of other users!

        Resetting a message respects the rate-limit, so it is not possible to reset within the 60 minutes countdown.
        Resetting it does however not set the rate-limit to 60 like when editing it.
        It is possible to edit it right after resetting it.
        Trying to edit a message before the cooldown timer expires results in a 429 "Too Fast Error".

        Message type refers to a different collection of messages, used during different types of responses.

        * `message` = Message during a normal invite
        * `response` = Message when replying to a message
        * `request` = Message when requesting an invite
        * `requestResponse` = Message when replying to a request for invite

        The DELETE endpoint does not have/require any request body.
      operationId: resetInviteMessage
      parameters:
      - description: Must be a valid user ID.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - description: "The type of message to fetch, must be a valid InviteMessageType."
        explode: false
        in: path
        name: messageType
        required: true
        schema:
          $ref: '#/components/schemas/InviteMessageType'
        style: simple
      - description: The message slot to fetch of a given message type.
        explode: false
        in: path
        name: slot
        required: true
        schema:
          maximum: 11
          minimum: 0
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/InviteMessage'
                type: array
          description: Returns a list of InviteMessage objects.
        "400":
          content:
            application/json:
              examples:
                "400 Negative Slot Number Error":
                  value:
                    error:
                      message: Really? A negative slot? Tsk-tsk‚Ä§‚Ä§‚Ä§
                      status_code: 400
                "400 Too High Slot Number Error":
                  value:
                    error:
                      message: That is too high of a slot number‚Ä§
                      status_code: 400
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to update an Invite Message with
            an invalid slot number.
        "401":
          content:
            application/json:
              examples:
                Not Authorized Example:
                  value:
                    error:
                      message: You are not authorized to perform that action.
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing authorization to perform that
            action.
        "404":
          content:
            application/json:
              examples:
                "404 No Custom Invite Message In Slot":
                  value:
                    error:
                      message: There's no entry for that slot.
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to reset an Invite Message whos
            slot doesn't exist.
        "429":
          content:
            application/json:
              examples:
                Update Invite Message Please Wait Error:
                  value:
                    error:
                      message: Please wait 60 more minutes until you try again‚Ä§
                      status_code: 429
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to update an Invite Message before
            the cooldown has expired.
      security:
      - authCookie: []
      summary: Reset Invite Message
      tags:
      - invite
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X DELETE "https://api.vrchat.cloud/api/1/message/{userId}/{messageType}/{slot}" \
               -b "auth={authCookie}"
    get:
      description: |-
        Returns a single Invite Message. This returns the exact same information but less than `getInviteMessages`. Admin Credentials are required to view messages of other users!

        Message type refers to a different collection of messages, used during different types of responses.

        * `message` = Message during a normal invite
        * `response` = Message when replying to a message
        * `request` = Message when requesting an invite
        * `requestResponse` = Message when replying to a request for invite
      operationId: getInviteMessage
      parameters:
      - description: Must be a valid user ID.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - description: "The type of message to fetch, must be a valid InviteMessageType."
        explode: false
        in: path
        name: messageType
        required: true
        schema:
          $ref: '#/components/schemas/InviteMessageType'
        style: simple
      - description: The message slot to fetch of a given message type.
        explode: false
        in: path
        name: slot
        required: true
        schema:
          maximum: 11
          minimum: 0
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InviteMessage'
          description: Returns a single InviteMessage object.
        "400":
          content:
            application/json:
              examples:
                "200 Negative Slot Number Error":
                  value: {}
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to get an Invite Message with a
            negative slot number.
        "401":
          content:
            application/json:
              examples:
                Not Authorized Example:
                  value:
                    error:
                      message: You are not authorized to perform that action.
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing authorization to perform that
            action.
        "404":
          content:
            application/json:
              examples:
                "404 Slot Number Too High Error":
                  value:
                    error:
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to get an Invite Message with a
            too high slot number.
      security:
      - authCookie: []
      summary: Get Invite Message
      tags:
      - invite
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET "https://api.vrchat.cloud/api/1/message/{userId}/{messageType}/{slot}" \
               -b "auth={authCookie}"
    put:
      description: |-
        Updates a single Invite Message and then returns a list of all of them. Admin Credentials are required to update messages of other users!

        Updating a message automatically sets the cooldown timer to 60 minutes.
        Trying to edit a message before the cooldown timer expires results in a 429 "Too Fast Error".

        Message type refers to a different collection of messages, used during different types of responses.

        * `message` = Message during a normal invite
        * `response` = Message when replying to a message
        * `request` = Message when requesting an invite
        * `requestResponse` = Message when replying to a request for invite
      operationId: updateInviteMessage
      parameters:
      - description: Must be a valid user ID.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - description: "The type of message to fetch, must be a valid InviteMessageType."
        explode: false
        in: path
        name: messageType
        required: true
        schema:
          $ref: '#/components/schemas/InviteMessageType'
        style: simple
      - description: The message slot to fetch of a given message type.
        explode: false
        in: path
        name: slot
        required: true
        schema:
          maximum: 11
          minimum: 0
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateInviteMessageRequest'
        description: Message of what to set the invite message to.
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/InviteMessage'
                type: array
          description: Returns a list of InviteMessage objects.
        "400":
          content:
            application/json:
              examples:
                "400 Negative Slot Number Error":
                  value:
                    error:
                      message: Really? A negative slot? Tsk-tsk‚Ä§‚Ä§‚Ä§
                      status_code: 400
                "400 Too High Slot Number Error":
                  value:
                    error:
                      message: That is too high of a slot number‚Ä§
                      status_code: 400
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to update an Invite Message with
            an invalid slot number.
        "401":
          content:
            application/json:
              examples:
                Not Authorized Example:
                  value:
                    error:
                      message: You are not authorized to perform that action.
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing authorization to perform that
            action.
        "429":
          content:
            application/json:
              examples:
                Update Invite Message Please Wait Error:
                  value:
                    error:
                      message: Please wait 60 more minutes until you try again‚Ä§
                      status_code: 429
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to update an Invite Message before
            the cooldown has expired.
      security:
      - authCookie: []
      summary: Update Invite Message
      tags:
      - invite
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X PUT "https://api.vrchat.cloud/api/1/message/{userId}/{messageType}/{slot}" \
               -H "Content-Type: application/json" \
               -b "auth={authCookie}" \
               --data '{"message": "string"}'
  /instances/{worldId}:{instanceId}:
    get:
      description: |-
        Returns an instance. Please read [Instances Tutorial](https://vrchatapi.github.io/tutorials/instances/) for more information on Instances.

        If an invalid instanceId is provided, this endpoint will simply return "null"!
      operationId: getInstance
      parameters:
      - description: Must be a valid world ID.
        explode: false
        in: path
        name: worldId
        required: true
        schema:
          type: string
        style: simple
      - description: Must be a valid instance ID.
        explode: false
        in: path
        name: instanceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instance'
          description: Returns a single Instance object.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
      security:
      - authCookie: []
      summary: Get Instance
      tags:
      - instances
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET "https://api.vrchat.cloud/api/1/instances/{worldId}:{instanceId}" \
               -b "auth={authCookie}"
  /instances/{worldId}:{instanceId}/shortName:
    get:
      description: Returns an instance short name.
      operationId: getShortName
      parameters:
      - description: Must be a valid world ID.
        explode: false
        in: path
        name: worldId
        required: true
        schema:
          type: string
        style: simple
      - description: Must be a valid instance ID.
        explode: false
        in: path
        name: instanceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/InstanceShortNameResponse'
          description: Returns an instance secureName and/or shortName.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
      security:
      - authCookie: []
      summary: Get Instance Short Name
      tags:
      - instances
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET "https://api.vrchat.cloud/api/1/instances/{worldId}:{instanceId}/shortName" \
               -b "auth={authCookie}"
  /instances/{worldId}:{instanceId}/invite:
    post:
      description: Sends an invite to the instance to yourself.
      operationId: sendSelfInvite
      parameters:
      - description: Must be a valid world ID.
        explode: false
        in: path
        name: worldId
        required: true
        schema:
          type: string
        style: simple
      - description: Must be a valid instance ID.
        explode: false
        in: path
        name: instanceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                "200 Ok":
                  value:
                    success:
                      message: Ok
                      status_code: 200
              schema:
                $ref: '#/components/schemas/Success'
          description: Success response after sending an invite to yourself to the
            instance.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
      security:
      - authCookie: []
      summary: Send Self Invite
      tags:
      - instances
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X POST "https://api.vrchat.cloud/api/1/instances/{worldId}:{instanceId}/invite" \
               -b "auth={authCookie}"
  /instances/s/{shortName}:
    get:
      description: "Returns an instance. Please read [Instances Tutorial](https://vrchatapi.github.io/tutorials/instances/)\
        \ for more information on Instances."
      operationId: getInstanceByShortName
      parameters:
      - description: Must be a valid instance short name.
        explode: false
        in: path
        name: shortName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instance'
          description: Returns a single Instance object.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "404":
          content:
            application/json:
              examples:
                Instance Not Found Example:
                  value:
                    error:
                      message: '"Instance not found"'
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to non existant instance
      security:
      - authCookie: []
      summary: Get Instance By Short Name
      tags:
      - instances
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET "https://api.vrchat.cloud/api/1/instances/s/{shortname}" \
               -b "auth={authCookie}"
  /auth/user/notifications:
    get:
      description: Retrieve all of the current user's notifications.
      operationId: getNotifications
      parameters:
      - deprecated: true
        description: "Only send notifications of this type (can use `all` for all).\
          \ This parameter no longer does anything, and is deprecated."
        explode: true
        in: query
        name: type
        required: false
        schema:
          example: all
          type: string
        style: form
      - deprecated: true
        description: Return notifications sent by the user. Must be false or omitted.
        explode: true
        in: query
        name: sent
        required: false
        schema:
          type: boolean
        style: form
      - description: Whether to return hidden or non-hidden notifications. True only
          allowed on type `friendRequest`.
        explode: true
        in: query
        name: hidden
        required: false
        schema:
          type: boolean
        style: form
      - description: Only return notifications sent after this Date. Ignored if type
          is `friendRequest`.
        explode: true
        in: query
        name: after
        required: false
        schema:
          example: five_minutes_ago
          type: string
        style: form
      - description: The number of objects to return.
        explode: true
        in: query
        name: "n"
        required: false
        schema:
          default: 60
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: A zero-based offset from the default object sorting from where
          search results start.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Notification'
                type: array
          description: Returns a list of Notifcation objects.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
      security:
      - authCookie: []
      summary: List Notifications
      tags:
      - notifications
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET "https://api.vrchat.cloud/api/1/auth/user/notifications?type=all" \
               -b "auth={authCookie}"
  /auth/user/notifications/{notificationId}/accept:
    put:
      description: Accept a friend request by notification `frq_` ID. Friend requests
        can be found using the NotificationsAPI `getNotifications` by filtering of
        type `friendRequest`.
      operationId: acceptFriendRequest
      parameters:
      - description: Must be a valid notification ID.
        explode: false
        in: path
        name: notificationId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Unfriend Success:
                  value:
                    success:
                      message: Ok
                      status_code: 200
              schema:
                $ref: '#/components/schemas/Success'
          description: Successful response after friending a user.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 Accept Friend Request":
                  value:
                    error:
                      message: that friend request could not be found
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to accept a non-existent friend
            request.
      security:
      - authCookie: []
      summary: Accept Friend Request
      tags:
      - notifications
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X PUT "https://api.vrchat.cloud/api/1/auth/user/notifications/{notificationId}/accept" \
               -b "auth={authCookie}"
  /auth/user/notifications/{notificationId}/see:
    put:
      description: Mark a notification as seen.
      operationId: markNotificationAsRead
      parameters:
      - description: Must be a valid notification ID.
        explode: false
        in: path
        name: notificationId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Friend Request Response:
                  value:
                    id: frq_00000000-0000-0000-0000-000000000000
                    senderUserId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
                    type: friendRequest
                    message: ""
                    details: "{}"
                    seen: false
                    created_at: 2021-01-01T00:00:00.000Z
              schema:
                $ref: '#/components/schemas/Notification'
          description: Returns a single Notifcation object.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
      security:
      - authCookie: []
      summary: Mark Notification As Read
      tags:
      - notifications
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X PUT "https://api.vrchat.cloud/api/1/auth/user/notifications/{notificationId}/see" \
               -b "auth={authCookie}"
  /auth/user/notifications/{notificationId}/hide:
    put:
      description: Delete a notification.
      operationId: deleteNotification
      parameters:
      - description: Must be a valid notification ID.
        explode: false
        in: path
        name: notificationId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Friend Request Response:
                  value:
                    id: frq_00000000-0000-0000-0000-000000000000
                    senderUserId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
                    type: friendRequest
                    message: ""
                    details: "{}"
                    seen: false
                    created_at: 2021-01-01T00:00:00.000Z
              schema:
                $ref: '#/components/schemas/Notification'
          description: Returns a single Notifcation object.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
      security:
      - authCookie: []
      summary: Delete Notification
      tags:
      - notifications
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X PUT "https://api.vrchat.cloud/api/1/auth/user/notifications/{notificationId}/hide" \
               -b "auth={authCookie}"
  /auth/user/notifications/clear:
    put:
      description: Clear **all** notifications.
      operationId: clearNotifications
      responses:
        "200":
          content:
            application/json:
              examples:
                Unfriend Success:
                  value:
                    success:
                      message: Ok
                      status_code: 200
              schema:
                $ref: '#/components/schemas/Success'
          description: Successful response after clearing all notifications.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
      security:
      - authCookie: []
      summary: Clear All Notifications
      tags:
      - notifications
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X PUT "https://api.vrchat.cloud/api/1/auth/user/notifications/notifications/clear" \
               -b "auth={authCookie}"
  /auth/permissions:
    get:
      description: Returns a list of all permissions currently granted by the user.
        Permissions are assigned e.g. by subscribing to VRC+.
      operationId: getAssignedPermissions
      responses:
        "200":
          content:
            application/json:
              examples:
                Standard Permissions Inherited By VRC+:
                  value:
                  - id: prms_fe07c8a7-a4ca-4eda-97e5-e241040ef6f8
                    ownerId: usr_17f19d1e-fd48-493b-a8ad-807a3d8bdd1b
                    name: permission-trust-boost
                  - id: prms_804ba021-9f47-4e25-9847-1f42fdb2e6ff
                    ownerId: usr_17f19d1e-fd48-493b-a8ad-807a3d8bdd1b
                    name: permission-extra-favorites-avatar-groups
                    data:
                      maxFavoritesPerGroup:
                        avatar: 25
                      maxFavoriteGroups:
                        avatar: 4
                  - id: prms_ac88a3e0-c236-47c7-9b47-d795551b7520
                    ownerId: usr_17f19d1e-fd48-493b-a8ad-807a3d8bdd1b
                    name: permission-early-adopter-tags
                    data:
                      tags:
                      - system_early_adopter
                  - id: prms_76f33deb-dd5d-46b7-b79d-e1f8f0a9a1e0
                    ownerId: usr_17f19d1e-fd48-493b-a8ad-807a3d8bdd1b
                    name: permission-supporter-tags
                    data:
                      tags:
                      - system_supporter
                  - id: prms_0d9549db-d30a-48f3-a6b8-6741ce5a4283
                    ownerId: usr_bc012e97-a292-4abc-b4e6-f9edcc8c0d2b
                    name: permission-invite-photos
                    data: {}
                  - id: prms_153ac0b7-c2dd-43f9-96e3-c61fd2e85509
                    ownerId: usr_bc012e97-a292-4abc-b4e6-f9edcc8c0d2b
                    name: permission-profile-pic-override
                    data: {}
                  - id: prms_1d9549db-d30a-48f3-a6b8-6741ce5a4283
                    ownerId: usr_bc012e97-a292-4abc-b4e6-f9edcc8c0d2b
                    name: permission-user-icons
                    data: {}
                  - id: prms_dc02c512-4c03-479c-8c6a-d9329c023baf
                    ownerId: usr_bc012e97-a292-4abc-b4e6-f9edcc8c0d2b
                    name: permission-user-gallery
                    data: {}
              schema:
                items:
                  $ref: '#/components/schemas/Permission'
                type: array
          description: Returns a list of Permission objects.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
      security:
      - authCookie: []
      summary: Get Assigned Permissions
      tags:
      - permissions
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET "https://api.vrchat.cloud/api/1/auth/permissions" \
               -b "auth={authCookie}"
  /permissions/{permissionId}:
    get:
      description: "Returns a single permission. This endpoint is pretty useless,\
        \ as it returns the exact same information as `/auth/permissions`."
      operationId: getPermission
      parameters:
      - description: Must be a valid permission ID.
        explode: false
        in: path
        name: permissionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
          description: Returns a single Permission object.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
      security:
      - authCookie: []
      summary: Get Permission
      tags:
      - permissions
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET "https://api.vrchat.cloud/api/1/permissions/{permissionId}" \
               -b "auth={authCookie}"
  /auth/user/playermoderations:
    delete:
      description: ‚ö†Ô∏è **This will delete every single player moderation you've ever
        made.**
      operationId: clearAllPlayerModerations
      responses:
        "200":
          content:
            application/json:
              examples:
                "200 OK":
                  value:
                    success:
                      message: OK
                      status_code: 200
              schema:
                $ref: '#/components/schemas/Success'
          description: Success response after e.g. clearing all player moderations.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
      security:
      - authCookie: []
      summary: Clear All Player Moderations
      tags:
      - playermoderation
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X DELETE "https://api.vrchat.cloud/api/1/auth/user/playermoderations" \
               -b "auth={authCookie}"
    get:
      description: |-
        Returns a list of all player moderations made by **you**.

        This endpoint does not have pagination, and will return *all* results. Use query parameters to limit your query if needed.
      operationId: getPlayerModerations
      parameters:
      - description: "Must be one of PlayerModerationType, except unblock. Unblocking\
          \ simply removes a block."
        explode: true
        in: query
        name: type
        required: false
        schema:
          type: string
        style: form
      - description: Must be valid UserID.
        explode: true
        in: query
        name: targetUserId
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PlayerModeration'
                type: array
          description: Returns a list of PlayerModeration objects.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
      security:
      - authCookie: []
      summary: Search Player Moderations
      tags:
      - playermoderation
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET "https://api.vrchat.cloud/api/1/auth/user/playermoderations?type=unmute&targetUserId={userId}" \
               -b "auth={authCookie}"
    post:
      description: |-
        Moderate a user, e.g. unmute them or show their avatar.

        Please see the [Player Moderation docs](https://vrchatapi.github.io/docs/api/#tag--playermoderation) on what playerModerations are, and how they differ from staff moderations.
      operationId: moderateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModerateUserRequest'
        description: ""
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerModeration'
          description: Returns a single PlayerModeration object.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
      security:
      - authCookie: []
      summary: Moderate User
      tags:
      - playermoderation
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X POST "https://api.vrchat.cloud/api/1/auth/user/playermoderations" \
               -H "Content-Type: application/json" \
               -b "auth={authCookie}" \
               --data '{"moderated": "usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469", "type": "unmute"}'
  /auth/user/playermoderations/{playerModerationId}:
    delete:
      description: Deletes a specific player moderation based on it's `pmod_` ID.
        The website uses `unmoderateUser` instead. You can delete the same player
        moderation multiple times successfully.
      operationId: deletePlayerModeration
      parameters:
      - description: Must be a valid `pmod_` ID.
        explode: false
        in: path
        name: playerModerationId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                "200 Player Moderation Removed":
                  value:
                    success:
                      message: PlayerModeration pmod_25551a8d-6f5d-430a-88d3-9c0ce08b5244
                        removed
                      status_code: 200
              schema:
                $ref: '#/components/schemas/Success'
          description: Success response after removing a PlayerModeration by ID.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "403":
          content:
            application/json:
              examples:
                "403 Can't delete Player Moderation You Didn't Create":
                  value:
                    error:
                      message: You definitely can't delete a playerModeration you
                        didn't create
                      status_code: 403
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to delete someone else's player
            moderation.
      security:
      - authCookie: []
      summary: Delete Player Moderation
      tags:
      - playermoderation
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X DELETE "https://api.vrchat.cloud/api/1/auth/user/playermoderations/{playerModerationId}" \
               -b "auth={authCookie}"
    get:
      description: Returns a single Player Moderation. This returns the exact same
        amount of information as the more generalised `getPlayerModerations`.
      operationId: getPlayerModeration
      parameters:
      - description: Must be a valid `pmod_` ID.
        explode: false
        in: path
        name: playerModerationId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerModeration'
          description: Returns a single PlayerModeration object.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 Player Moderation Not Found":
                  value:
                    error:
                      message: Can't find playerModeration«É
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to show information about a non-existent
            player moderation.
      security:
      - authCookie: []
      summary: Get Player Moderation
      tags:
      - playermoderation
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET "https://api.vrchat.cloud/api/1/auth/user/playermoderations/{playerModerationId}" \
               -b "auth={authCookie}"
  /auth/user/unplayermoderate:
    put:
      description: "Removes a player moderation previously added through `moderateUser`.\
        \ E.g if you previously have shown their avatar, but now want to reset it\
        \ to default."
      operationId: unmoderateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModerateUserRequest'
      responses:
        "200":
          content:
            application/json:
              examples:
                "200 Specific User Unmoderated":
                  value:
                    success:
                      message: User usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469 unmoderated
                      status_code: 200
                "200 All Of PlayerModerationType Unmoderated":
                  value:
                    success:
                      message: PlayerModerations of type undefined removed
                      status_code: 200
              schema:
                $ref: '#/components/schemas/Success'
          description: Success response after unmoderating a player moderation.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
      security:
      - authCookie: []
      summary: Unmoderate User
      tags:
      - playermoderation
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X PUT "https://api.vrchat.cloud/api/1/auth/user/unplayermoderate" \
               -H "Content-Type: application/json" \
               -b "auth={authCookie}" \
               --data '{"moderated": "usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469", "type": "unmute"}'
  /config:
    get:
      description: |-
        API config contains configuration that the clients needs to work properly.

        Currently the most important value here is `clientApiKey` which is used for all other API endpoints.
      operationId: getConfig
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIConfig'
          description: Returns the API's config.
      security: []
      summary: Fetch API Config
      tags:
      - system
      x-codeSamples:
      - lang: cURL
        source: curl -X GET "https://api.vrchat.cloud/api/1/config"
  /infoPush:
    get:
      description: |-
        IPS (Info Push System) is a system for VRChat to push out dynamic information to the client. This is primarily used by the Quick-Menu info banners, but can also be used to e.g. alert you to update your game to the latest version.

        `include` is used to query what Information Pushes should be included in the response. If include is missing or empty, then no notices will normally be returned. This is an "any of" search.

        `require` is used to limit what Information Pushes should be included in the response. This is usually used in combination with `include`, and is an "all of" search.
      operationId: getInfoPush
      parameters:
      - description: Tags to include (comma-separated). All of the tags needs to be
          present.
        explode: true
        in: query
        name: require
        required: false
        schema:
          type: string
        style: form
      - description: Tags to include (comma-separated). Any of the tags needs to be
          present.
        explode: true
        in: query
        name: include
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                New Quick Menu:
                  value:
                  - id: launch-beta
                    isEnabled: true
                    releaseStatus: public
                    priority: 970
                    tags:
                    - quick-menu-banner
                    - user-all
                    data:
                      imageUrl: https://assets.vrchat.com/ips/assets/b5af844263458d3a5b3e01b52ef7fe47f7b3b563eace4ee972205f250474c879.png
                      onPressed:
                        command: OpenURL
                        parameters:
                        - https://docs.vrchat.com/v2021.4.1/docs/latest-release
                    hash: 69abf85064503e870124acde330bb0ae
                    createdAt: 2021-09-13T20:50:40+00:00
                    updatedAt: 2021-11-08T22:45:25+00:00
                World Hot Row:
                  value:
                  - id: world-hot
                    isEnabled: true
                    releaseStatus: public
                    priority: 1000
                    tags:
                    - world-category
                    data:
                      imageUrl: https://assets.vrchat.com/ips/assets/40f8ad117f8d6734ac84039d8ced290b6676486099b7cc56759efe7b259ca05d.png
                      contentList:
                        name: Hot
                        sortHeading: heat
                        sortOwnership: any
                        sortOrder: descending
                        platform: ThisPlatformSupported
                    hash: f0e97e72c437aa437e92c1184630bec6
                    createdAt: 2020-06-05T08:23:31+00:00
                    updatedAt: 2020-08-16T07:04:07+00:00
                Game Version:
                  value:
                  - id: build-config
                    isEnabled: true
                    releaseStatus: public
                    priority: 1000
                    tags:
                    - high-priority
                    - user-all
                    data:
                      version: 2021.3.4
                    hash: a76e7da333c6a5a8f7ec2adee064cac9
                    createdAt: 2021-08-21T04:27:05+00:00
                    updatedAt: 2021-09-18T04:37:29+00:00
              schema:
                items:
                  $ref: '#/components/schemas/InfoPush'
                type: array
          description: Returns a list of InfoPush objects.
      summary: Show Information Notices
      tags:
      - system
      x-codeSamples:
      - lang: cURL
        source: "curl -X GET \"https://api.vrchat.cloud/api/1/infoPush?require={string}&include={string}\""
      x-badges:
      - color: gold
        label: "Status: Early Access (Still Under Development)"
  /css/app.css:
    get:
      description: Fetches the CSS code to the frontend React website.
      operationId: getCSS
      parameters:
      - allowEmptyValue: true
        description: "Specifies which `variant` of the site. Public is the end-user\
          \ site, while `internal` is the staff-only site with special pages for moderation\
          \ and management."
        explode: true
        in: query
        name: variant
        required: false
        schema:
          default: public
          enum:
          - public
          - internal
          type: string
        style: form
      - allowEmptyValue: true
        description: Specifies which git branch the site should load frontend source
          code from.
        explode: true
        in: query
        name: branch
        required: false
        schema:
          default: main
          type: string
        style: form
      responses:
        "200":
          content:
            text/css:
              schema:
                type: string
          description: '**Note:** VRChat uses 302 Redirect to Cloudfront. The implementing
            library **must** support and follow redirects natively.'
        "400":
          content:
            application/json:
              examples:
                Only Admins Can Get Non-Public Variants:
                  value:
                    error:
                      message: only admins can get non-public variants
                      status_code: 400
                Only Admins Can Get Non-Main Branches:
                  value:
                    error:
                      message: only admins can get non-main branches
                      status_code: 400
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to download non-public and non-main
            JavaScript or CSS without Admin Credentials.
      summary: Download CSS
      tags:
      - system
      x-codeSamples:
      - lang: cURL
        source: curl -X GET "https://api.vrchat.cloud/api/1/css/app.css?variant=public&branch=main"
  /js/app.js:
    get:
      description: Fetches the JavaScript code to the frontend React website.
      operationId: getJavaScript
      parameters:
      - allowEmptyValue: true
        description: "Specifies which `variant` of the site. Public is the end-user\
          \ site, while `internal` is the staff-only site with special pages for moderation\
          \ and management."
        explode: true
        in: query
        name: variant
        required: false
        schema:
          default: public
          enum:
          - public
          - internal
          type: string
        style: form
      - allowEmptyValue: true
        description: Specifies which git branch the site should load frontend source
          code from.
        explode: true
        in: query
        name: branch
        required: false
        schema:
          default: main
          type: string
        style: form
      responses:
        "200":
          content:
            application/javascript:
              schema:
                type: string
          description: '**Note:** VRChat uses 302 Redirect to Cloudfront. The implementing
            library **must** support and follow redirects natively.'
        "400":
          content:
            application/json:
              examples:
                Only Admins Can Get Non-Public Variants:
                  value:
                    error:
                      message: only admins can get non-public variants
                      status_code: 400
                Only Admins Can Get Non-Main Branches:
                  value:
                    error:
                      message: only admins can get non-main branches
                      status_code: 400
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to download non-public and non-main
            JavaScript or CSS without Admin Credentials.
      summary: Download JavaScript
      tags:
      - system
      x-codeSamples:
      - lang: cURL
        source: curl -X GET "https://api.vrchat.cloud/api/1/js/app.js?variant=internal&branch=main"
  /health:
    get:
      deprecated: true
      description: |-
        ~~Gets the overall health status, the server name, and the current build version tag of the API.~~

        **DEPRECATED:** VRChat has suddenly restricted this endpoint for unknown reasons, and now always return 401 Unauthorized.
      operationId: getHealth
      responses:
        "200":
          content:
            application/json:
              examples:
                Example Response:
                  value:
                    ok: true
                    serverName: prod-api-green-marsh-dgt
                    buildVersionTag: master-build-2021-06-24-fred-drakeshoot
              schema:
                $ref: '#/components/schemas/APIHealth'
          description: Returns the API's health.
      security: []
      summary: Check API Health
      tags:
      - system
      x-codeSamples:
      - lang: cURL
        source: curl -X GET "https://api.vrchat.cloud/api/1/health"
  /visits:
    get:
      description: |-
        Returns the current number of online users.

        **NOTE:** The response type is not a JSON object, but a simple JSON integer.
      operationId: getCurrentOnlineUsers
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Number of online users
                example: 12345
                minimum: 0
                type: integer
          description: OK
      security: []
      summary: Current Online Users
      tags:
      - system
      x-codeSamples:
      - lang: cURL
        source: curl -X GET "https://api.vrchat.cloud/api/1/visits"
  /time:
    get:
      description: |-
        Returns the current time of the API server.

        **NOTE:** The response type is not a JSON object, but a simple JSON string.
      operationId: getSystemTime
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Does not return millisecond precision. Always returns
                  time in UTC.
                example: 2021-08-20T12:38:42Z
                format: date-time
                type: string
          description: OK
      security: []
      summary: Current System Time
      tags:
      - system
      x-codeSamples:
      - lang: cURL
        source: curl -X GET "https://api.vrchat.cloud/api/1/time"
  /users:
    get:
      description: Search and list any users by text query
      operationId: searchUsers
      parameters:
      - description: Searches by `displayName`. Will return empty array if search
          query is empty or missing.
        explode: true
        in: query
        name: search
        required: false
        schema:
          minLength: 0
          type: string
        style: form
      - description: "Active user by developer type, none for normal users and internal\
          \ for moderators"
        explode: true
        in: query
        name: developerType
        required: false
        schema:
          type: string
        style: form
      - description: The number of objects to return.
        explode: true
        in: query
        name: "n"
        required: false
        schema:
          default: 60
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: A zero-based offset from the default object sorting from where
          search results start.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/LimitedUser'
                type: array
          description: Returns a list of LimitedUser objects.
        "400":
          content:
            application/json:
              examples:
                "400 N is too low":
                  value:
                    error:
                      message: n must be a positive integerÀ∏ '-1'
                      status_code: 400
                "400 N is too high":
                  value:
                    error:
                      message: nÔºù1000 is much too high‚Ä§ implement paging you savages‚Ä§
                      status_code: 400
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to search list of users with an
            invalid request.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
      security:
      - authCookie: []
      summary: Search All Users
      tags:
      - users
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET "https://api.vrchat.cloud/api/1/users?search={string}&developerType=internal" \
               -b "auth={authCookie}"
  /users/{username}/name:
    get:
      deprecated: true
      description: |-
        ~~Get public user information about a specific user using their name.~~

        **DEPRECATED:** VRChat API no longer return usernames of other users. [See issue by Tupper for more information](https://github.com/pypy-vrc/VRCX/issues/429).
        This endpoint now require Admin Credentials.
      operationId: getUserByName
      parameters:
      - description: Username of the user
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Returns a single User object.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
      security:
      - authCookie: []
      summary: Get User by Username
      tags:
      - users
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET "https://api.vrchat.cloud/api/1/users/{username}/name" \
               -b "auth={authCookie}"
  /users/{userId}:
    get:
      description: Get public user information about a specific user using their ID.
      operationId: getUser
      parameters:
      - description: Must be a valid user ID.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Returns a single User object.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
      security:
      - authCookie: []
      summary: Get User by ID
      tags:
      - users
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET "https://api.vrchat.cloud/api/1/users/{userId}" \
               -b "auth={authCookie}"
    put:
      description: Update a users information such as the email and birthday.
      operationId: updateUser
      parameters:
      - description: Must be a valid user ID.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentUser'
          description: Returns a single CurrentUser object.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
      security:
      - authCookie: []
      summary: Update User Info
      tags:
      - users
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET "https://api.vrchat.cloud/api/1/users/{userId}" \
               -H "Content-Type: application/json" \
               -b "auth={authCookie}" \
               --data '{"email": "string", "birthday": "2019-08-24", "acceptedTOSVersion": 0, "tags": ["string"], "status": "active", "statusDescription": "string", "bio": "string", "bioLinks": ["string"], "userIcon": "https://api.vrchat.cloud/api/1/file/file_76dc2964-0ce8-41df-b2e7-8edf994fee31/1"}'
  /users/{userId}/groups:
    get:
      description: Get user's public groups
      operationId: getUserGroups
      parameters:
      - description: Must be a valid user ID.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Group'
                type: array
          description: Returns a list of Group objects.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
      security:
      - authCookie: []
      summary: Get User Groups
      tags:
      - users
  /users/{userId}/groups/requested:
    get:
      description: Returns a list of Groups the user has requested to be invited into.
      operationId: getUserGroupRequests
      parameters:
      - description: Must be a valid user ID.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Group'
                type: array
          description: Returns a list of Group objects.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
      security:
      - authCookie: []
      summary: Get User Group Requests
      tags:
      - users
  /worlds:
    get:
      description: Search and list any worlds by query filters.
      operationId: searchWorlds
      parameters:
      - description: Filters on featured results.
        explode: true
        in: query
        name: featured
        required: false
        schema:
          type: boolean
        style: form
      - description: The sort order of the results.
        explode: true
        in: query
        name: sort
        required: false
        schema:
          $ref: '#/components/schemas/SortOption'
        style: form
      - description: Set to `me` for searching own worlds.
        explode: true
        in: query
        name: user
        required: false
        schema:
          enum:
          - me
          type: string
        style: form
      - description: Filter by UserID.
        explode: true
        in: query
        name: userId
        required: false
        schema:
          type: string
        style: form
      - description: The number of objects to return.
        explode: true
        in: query
        name: "n"
        required: false
        schema:
          default: 60
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: Result ordering
        explode: true
        in: query
        name: order
        required: false
        schema:
          $ref: '#/components/schemas/OrderOption'
        style: form
      - description: A zero-based offset from the default object sorting from where
          search results start.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - description: Filters by world name.
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: Tags to include (comma-separated). Any of the tags needs to be
          present.
        explode: true
        in: query
        name: tag
        required: false
        schema:
          type: string
        style: form
      - description: Tags to exclude (comma-separated).
        explode: true
        in: query
        name: notag
        required: false
        schema:
          type: string
        style: form
      - description: Filter by ReleaseStatus.
        explode: true
        in: query
        name: releaseStatus
        required: false
        schema:
          $ref: '#/components/schemas/ReleaseStatus'
        style: form
      - description: The maximum Unity version supported by the asset.
        explode: true
        in: query
        name: maxUnityVersion
        required: false
        schema:
          type: string
        style: form
      - description: The minimum Unity version supported by the asset.
        explode: true
        in: query
        name: minUnityVersion
        required: false
        schema:
          type: string
        style: form
      - description: The platform the asset supports.
        explode: true
        in: query
        name: platform
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/LimitedWorld'
                type: array
          description: Returns a list of LimitedWorld objects.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
      security:
      - authCookie: []
      summary: Search All Worlds
      tags:
      - worlds
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET "https://api.vrchat.cloud/api/1/worlds?featured=true&sort=popularity&userId={userId}&order=descending&search={string}&tag={string}&notag={string}" \
               -b "auth={authCookie}"
    post:
      description: "Create a new world. This endpoint requires `assetUrl` to be a\
        \ valid File object with `.vrcw` file extension, and `imageUrl` to be a valid\
        \ File object with an image file extension."
      operationId: createWorld
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWorldRequest'
        description: ""
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/World'
          description: Returns a single World object.
        "400":
          content:
            application/json:
              examples:
                "400 Can't Create World Yet":
                  value:
                    error:
                      message: \"You can't create a world right now\"
                      status_code: 400
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying create a world without having the
            neccesary Trust rank yet.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
      summary: Create World
      tags:
      - worlds
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X POST "https://api.vrchat.cloud/api/1/worlds" \
               -H "Content-Type: application/json" \
               -b "auth={authCookie}" \
               --data '{"assetUrl": "string", "assetVersion": 0, "authorId": "usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469", "authorName": "string", "capacity": 8, "description": "string", "id": "wrld_ba913a96-fac4-4048-a062-9aa5db092812", "imageUrl": "string", "name": "string", "platform": "standalonewindows", "releaseStatus": "public", "tags": ["string"], "unityPackageUrl": "string", "unityVersion": "2018.4.20f1"}'
  /worlds/active:
    get:
      description: Search and list currently Active worlds by query filters.
      operationId: getActiveWorlds
      parameters:
      - description: Filters on featured results.
        explode: true
        in: query
        name: featured
        required: false
        schema:
          type: boolean
        style: form
      - description: The sort order of the results.
        explode: true
        in: query
        name: sort
        required: false
        schema:
          $ref: '#/components/schemas/SortOption'
        style: form
      - description: The number of objects to return.
        explode: true
        in: query
        name: "n"
        required: false
        schema:
          default: 60
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: Result ordering
        explode: true
        in: query
        name: order
        required: false
        schema:
          $ref: '#/components/schemas/OrderOption'
        style: form
      - description: A zero-based offset from the default object sorting from where
          search results start.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - description: Filters by world name.
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: Tags to include (comma-separated). Any of the tags needs to be
          present.
        explode: true
        in: query
        name: tag
        required: false
        schema:
          type: string
        style: form
      - description: Tags to exclude (comma-separated).
        explode: true
        in: query
        name: notag
        required: false
        schema:
          type: string
        style: form
      - description: Filter by ReleaseStatus.
        explode: true
        in: query
        name: releaseStatus
        required: false
        schema:
          $ref: '#/components/schemas/ReleaseStatus'
        style: form
      - description: The maximum Unity version supported by the asset.
        explode: true
        in: query
        name: maxUnityVersion
        required: false
        schema:
          type: string
        style: form
      - description: The minimum Unity version supported by the asset.
        explode: true
        in: query
        name: minUnityVersion
        required: false
        schema:
          type: string
        style: form
      - description: The platform the asset supports.
        explode: true
        in: query
        name: platform
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/LimitedWorld'
                type: array
          description: Returns a list of LimitedWorld objects.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
      security:
      - authCookie: []
      summary: List Active Worlds
      tags:
      - worlds
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET "https://api.vrchat.cloud/api/1/worlds/active?featured=false&sort=heat&order=ascending&search={string}&tag={string}&notag={string}&releaseStatus=all" \
               -b "auth={authCookie}"
  /worlds/favorites:
    get:
      description: Search and list favorited worlds by query filters.
      operationId: getFavoritedWorlds
      parameters:
      - description: Filters on featured results.
        explode: true
        in: query
        name: featured
        required: false
        schema:
          type: boolean
        style: form
      - description: The sort order of the results.
        explode: true
        in: query
        name: sort
        required: false
        schema:
          $ref: '#/components/schemas/SortOption'
        style: form
      - description: The number of objects to return.
        explode: true
        in: query
        name: "n"
        required: false
        schema:
          default: 60
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: Result ordering
        explode: true
        in: query
        name: order
        required: false
        schema:
          $ref: '#/components/schemas/OrderOption'
        style: form
      - description: A zero-based offset from the default object sorting from where
          search results start.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - description: Filters by world name.
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: Tags to include (comma-separated). Any of the tags needs to be
          present.
        explode: true
        in: query
        name: tag
        required: false
        schema:
          type: string
        style: form
      - description: Tags to exclude (comma-separated).
        explode: true
        in: query
        name: notag
        required: false
        schema:
          type: string
        style: form
      - description: Filter by ReleaseStatus.
        explode: true
        in: query
        name: releaseStatus
        required: false
        schema:
          $ref: '#/components/schemas/ReleaseStatus'
        style: form
      - description: The maximum Unity version supported by the asset.
        explode: true
        in: query
        name: maxUnityVersion
        required: false
        schema:
          type: string
        style: form
      - description: The minimum Unity version supported by the asset.
        explode: true
        in: query
        name: minUnityVersion
        required: false
        schema:
          type: string
        style: form
      - description: The platform the asset supports.
        explode: true
        in: query
        name: platform
        required: false
        schema:
          type: string
        style: form
      - description: "Target user to see information on, admin-only."
        explode: true
        in: query
        name: userId
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/LimitedWorld'
                type: array
          description: Returns a list of LimitedWorld objects.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "403":
          content:
            application/json:
              examples:
                "404 Cant See Other User Favorite Worlds":
                  value:
                    error:
                      message: 403 You can't see another user's favorites
                      status_code: 403
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to see favourited worlds of another
            user without sufficient admin permissions.
      security:
      - authCookie: []
      summary: List Favorited Worlds
      tags:
      - worlds
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET "https://api.vrchat.cloud/api/1/worlds/favorites?featured=false&sort=popularity&order=descending&search={string}&tag={string}&notag={string}&releaseStatus=private&userId={userId}" \
               -b "auth={authCookie}"
  /worlds/recent:
    get:
      description: Search and list recently visited worlds by query filters.
      operationId: getRecentWorlds
      parameters:
      - description: Filters on featured results.
        explode: true
        in: query
        name: featured
        required: false
        schema:
          type: boolean
        style: form
      - description: The sort order of the results.
        explode: true
        in: query
        name: sort
        required: false
        schema:
          $ref: '#/components/schemas/SortOption'
        style: form
      - description: The number of objects to return.
        explode: true
        in: query
        name: "n"
        required: false
        schema:
          default: 60
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: Result ordering
        explode: true
        in: query
        name: order
        required: false
        schema:
          $ref: '#/components/schemas/OrderOption'
        style: form
      - description: A zero-based offset from the default object sorting from where
          search results start.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - description: Filters by world name.
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: Tags to include (comma-separated). Any of the tags needs to be
          present.
        explode: true
        in: query
        name: tag
        required: false
        schema:
          type: string
        style: form
      - description: Tags to exclude (comma-separated).
        explode: true
        in: query
        name: notag
        required: false
        schema:
          type: string
        style: form
      - description: Filter by ReleaseStatus.
        explode: true
        in: query
        name: releaseStatus
        required: false
        schema:
          $ref: '#/components/schemas/ReleaseStatus'
        style: form
      - description: The maximum Unity version supported by the asset.
        explode: true
        in: query
        name: maxUnityVersion
        required: false
        schema:
          type: string
        style: form
      - description: The minimum Unity version supported by the asset.
        explode: true
        in: query
        name: minUnityVersion
        required: false
        schema:
          type: string
        style: form
      - description: The platform the asset supports.
        explode: true
        in: query
        name: platform
        required: false
        schema:
          type: string
        style: form
      - description: "Target user to see information on, admin-only."
        explode: true
        in: query
        name: userId
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/LimitedWorld'
                type: array
          description: Returns a list of LimitedWorld objects.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "403":
          content:
            application/json:
              examples:
                "403 Only See Own Recents":
                  value:
                    error:
                      message: \"You can only see your own recent worlds!\"
                      status_code: 403
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to see recently visited worlds of
            another user without sufficient admin permissions.
      security:
      - authCookie: []
      summary: List Recent Worlds
      tags:
      - worlds
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET "https://api.vrchat.cloud/api/1/worlds/recent?featured=false" \
               -b "auth={authCookie}"
  /worlds/{worldId}:
    delete:
      description: "Delete a world. Notice a world is never fully \"deleted\", only\
        \ its ReleaseStatus is set to \"hidden\" and the linked Files are deleted.\
        \ The WorldID is permanently reserved."
      operationId: deleteWorld
      parameters:
      - description: Must be a valid world ID.
        explode: false
        in: path
        name: worldId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 World Not Found":
                  value:
                    error:
                      message: World wrld_ba913a96-fac4-4048-a062-9aa5db092812 not
                        found
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to show information about a non-existent
            world. Sometimes returns with `model <worldId> not found` instead of `World
            <worldId not found`.
      security:
      - authCookie: []
      summary: Delete World
      tags:
      - worlds
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X DELETE "https://api.vrchat.cloud/api/1/worlds/{worldId}" \
               -b "auth={authCookie}"
    get:
      description: |-
        Get information about a specific World.
        Works unauthenticated but when so will always return `0` for certain fields.
      operationId: getWorld
      parameters:
      - description: Must be a valid world ID.
        explode: false
        in: path
        name: worldId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/World'
          description: Returns a single World object.
        "404":
          content:
            application/json:
              examples:
                "404 World Not Found":
                  value:
                    error:
                      message: World wrld_ba913a96-fac4-4048-a062-9aa5db092812 not
                        found
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to show information about a non-existent
            world. Sometimes returns with `model <worldId> not found` instead of `World
            <worldId not found`.
      summary: Get World by ID
      tags:
      - worlds
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET "https://api.vrchat.cloud/api/1/worlds/{worldId}" \
               -b "auth={authCookie}"
    put:
      description: Update information about a specific World.
      operationId: updateWorld
      parameters:
      - description: Must be a valid world ID.
        explode: false
        in: path
        name: worldId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWorldRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/World'
          description: Returns a single World object.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 World Not Found":
                  value:
                    error:
                      message: World wrld_ba913a96-fac4-4048-a062-9aa5db092812 not
                        found
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to show information about a non-existent
            world. Sometimes returns with `model <worldId> not found` instead of `World
            <worldId not found`.
      security:
      - authCookie: []
      summary: Update World
      tags:
      - worlds
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X PUT "https://api.vrchat.cloud/api/1/worlds/{worldId}" \
               -H "Content-Type: application/json" \
               -b "auth={authCookie}" \
               --data '{"assetUrl": "string", "assetVersion": "string","authorId": "usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469", "authorName": "string", "capacity": 8, "description": "string", "imageUrl": "string", "name": "string", "platform": "standalonewindows", "releaseStatus": "public", "tags": ["string"], "unityPackageUrl": "string", "unityVersion": "2018.4.20f1"}'
  /worlds/{worldId}/metadata:
    get:
      deprecated: true
      description: Return a worlds custom metadata. This is currently believed to
        be unused. Metadata can be set with `updateWorld` and can be any arbitrary
        object.
      operationId: getWorldMetadata
      parameters:
      - description: Must be a valid world ID.
        explode: false
        in: path
        name: worldId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorldMetadata'
          description: OK
        "404":
          content:
            application/json:
              examples:
                "404 World Not Found":
                  value:
                    error:
                      message: World wrld_ba913a96-fac4-4048-a062-9aa5db092812 not
                        found
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to show information about a non-existent
            world. Sometimes returns with `model <worldId> not found` instead of `World
            <worldId not found`.
      security:
      - authCookie: []
      summary: Get World Metadata
      tags:
      - worlds
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET "https://api.vrchat.cloud/api/1/worlds/{worldId}/metadata" \
               -b "auth={authCookie}"
  /worlds/{worldId}/publish:
    delete:
      description: Unpublish a world.
      operationId: unpublishWorld
      parameters:
      - description: Must be a valid world ID.
        explode: false
        in: path
        name: worldId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 World Not Found":
                  value:
                    error:
                      message: World wrld_ba913a96-fac4-4048-a062-9aa5db092812 not
                        found
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to show information about a non-existent
            world. Sometimes returns with `model <worldId> not found` instead of `World
            <worldId not found`.
      security:
      - authCookie: []
      summary: Unpublish World
      tags:
      - worlds
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X DELETE "https://api.vrchat.cloud/api/1/worlds/{worldId}/publish" \
               -b "auth={authCookie}"
    get:
      description: Returns a worlds publish status.
      operationId: getWorldPublishStatus
      parameters:
      - description: Must be a valid world ID.
        explode: false
        in: path
        name: worldId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorldPublishStatus'
          description: Returns a single WorldPublishStatus object.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 World Not Found":
                  value:
                    error:
                      message: World wrld_ba913a96-fac4-4048-a062-9aa5db092812 not
                        found
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to show information about a non-existent
            world. Sometimes returns with `model <worldId> not found` instead of `World
            <worldId not found`.
      security:
      - authCookie: []
      summary: Get World Publish Status
      tags:
      - worlds
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET "https://api.vrchat.cloud/api/1/worlds/{worldId}/publish" \
               -b "auth={authCookie}"
    put:
      description: Publish a world. You can only publish one world per week.
      operationId: publishWorld
      parameters:
      - description: Must be a valid world ID.
        explode: false
        in: path
        name: worldId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: TODO
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
        "404":
          content:
            application/json:
              examples:
                "404 World Not Found":
                  value:
                    error:
                      message: World wrld_ba913a96-fac4-4048-a062-9aa5db092812 not
                        found
                      status_code: 404
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response when trying to show information about a non-existent
            world. Sometimes returns with `model <worldId> not found` instead of `World
            <worldId not found`.
      security:
      - authCookie: []
      summary: Publish World
      tags:
      - worlds
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X PUT "https://api.vrchat.cloud/api/1/worlds/{worldId}/publish" \
               -b "auth={authCookie}"
  /worlds/{worldId}/{instanceId}:
    get:
      description: Returns a worlds instance.
      operationId: getWorldInstance
      parameters:
      - description: Must be a valid world ID.
        explode: false
        in: path
        name: worldId
        required: true
        schema:
          type: string
        style: simple
      - description: Must be a valid instance ID.
        explode: false
        in: path
        name: instanceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instance'
          description: Returns a single Instance object.
        "401":
          content:
            application/json:
              examples:
                Missing Credentials Example:
                  value:
                    error:
                      message: '"Missing Credentials"'
                      status_code: 401
              schema:
                $ref: '#/components/schemas/Error'
          description: Error response due to missing auth cookie.
      security:
      - authCookie: []
      summary: Get World Instance
      tags:
      - worlds
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET "https://api.vrchat.cloud/api/1/worlds/{worldId}/{instanceId}" \
               -b "auth={authCookie}"
components:
  parameters:
    email:
      description: Filter by email.
      explode: true
      in: query
      name: email
      required: false
      schema:
        type: string
      style: form
    displayName:
      description: Filter by displayName.
      explode: true
      in: query
      name: displayName
      required: false
      schema:
        type: string
      style: form
    userIdQuery:
      description: Filter by UserID.
      explode: true
      in: query
      name: userId
      required: false
      schema:
        type: string
      style: form
    excludeUserId:
      description: Exclude by UserID.
      explode: true
      in: query
      name: excludeUserId
      required: false
      schema:
        type: string
      style: form
    userId:
      description: Must be a valid user ID.
      explode: false
      in: path
      name: userId
      required: true
      schema:
        type: string
      style: simple
    featured:
      description: Filters on featured results.
      explode: true
      in: query
      name: featured
      required: false
      schema:
        type: boolean
      style: form
    sort:
      description: The sort order of the results.
      explode: true
      in: query
      name: sort
      required: false
      schema:
        $ref: '#/components/schemas/SortOption'
      style: form
    number:
      description: The number of objects to return.
      explode: true
      in: query
      name: "n"
      required: false
      schema:
        default: 60
        maximum: 100
        minimum: 1
        type: integer
      style: form
    order:
      description: Result ordering
      explode: true
      in: query
      name: order
      required: false
      schema:
        $ref: '#/components/schemas/OrderOption'
      style: form
    offset:
      description: A zero-based offset from the default object sorting from where
        search results start.
      explode: true
      in: query
      name: offset
      required: false
      schema:
        minimum: 0
        type: integer
      style: form
    tag:
      description: Tags to include (comma-separated). Any of the tags needs to be
        present.
      explode: true
      in: query
      name: tag
      required: false
      schema:
        type: string
      style: form
    notag:
      description: Tags to exclude (comma-separated).
      explode: true
      in: query
      name: notag
      required: false
      schema:
        type: string
      style: form
    releaseStatus:
      description: Filter by ReleaseStatus.
      explode: true
      in: query
      name: releaseStatus
      required: false
      schema:
        $ref: '#/components/schemas/ReleaseStatus'
      style: form
    maxUnityVersion:
      description: The maximum Unity version supported by the asset.
      explode: true
      in: query
      name: maxUnityVersion
      required: false
      schema:
        type: string
      style: form
    minUnityVersion:
      description: The minimum Unity version supported by the asset.
      explode: true
      in: query
      name: minUnityVersion
      required: false
      schema:
        type: string
      style: form
    platform:
      description: The platform the asset supports.
      explode: true
      in: query
      name: platform
      required: false
      schema:
        type: string
      style: form
    avatarId:
      description: Must be a valid avatar ID.
      explode: false
      in: path
      name: avatarId
      required: true
      schema:
        type: string
      style: simple
    search:
      description: Filters by world name.
      explode: true
      in: query
      name: search
      required: false
      schema:
        type: string
      style: form
    userIdAdmin:
      description: "Target user to see information on, admin-only."
      explode: true
      in: query
      name: userId
      required: false
      schema:
        type: string
      style: form
    transactionId:
      description: Must be a valid transaction ID.
      explode: false
      in: path
      name: transactionId
      required: true
      schema:
        type: string
      style: simple
    licenseGroupId:
      description: Must be a valid license group ID.
      explode: false
      in: path
      name: licenseGroupId
      required: true
      schema:
        type: string
      style: simple
    favoriteId:
      description: Must be a valid favorite ID.
      explode: false
      in: path
      name: favoriteId
      required: true
      schema:
        type: string
      style: simple
    favoriteGroupType:
      description: "The type of group to fetch, must be a valid FavoriteType."
      explode: false
      in: path
      name: favoriteGroupType
      required: true
      schema:
        enum:
        - world
        - friend
        - avatar
        type: string
      style: simple
    favoriteGroupName:
      description: "The name of the group to fetch, must be a name of a FavoriteGroup."
      explode: false
      in: path
      name: favoriteGroupName
      required: true
      schema:
        type: string
      style: simple
    fileId:
      description: Must be a valid file ID.
      explode: false
      in: path
      name: fileId
      required: true
      schema:
        example: file_00000000-0000-0000-0000-000000000000
        pattern: "file_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
        type: string
      style: simple
    versionId:
      description: Version ID of the asset.
      explode: false
      in: path
      name: versionId
      required: true
      schema:
        example: 1
        minimum: 1
        type: integer
      style: simple
    fileType:
      description: Type of file.
      explode: false
      in: path
      name: fileType
      required: true
      schema:
        enum:
        - file
        - signature
        - delta
        example: file
        type: string
      style: simple
    offline:
      description: "Returns *only* offline users if true, returns only online and\
        \ active users if false"
      explode: true
      in: query
      name: offline
      required: false
      schema:
        type: boolean
      style: form
    groupId:
      description: Must be a valid group ID.
      explode: false
      in: path
      name: groupId
      required: true
      schema:
        example: grp_00000000-0000-0000-0000-000000000000
        pattern: "grp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
        type: string
      style: simple
    startDate:
      description: The start date of the search range.
      explode: true
      in: query
      name: startDate
      required: false
      schema:
        format: date-time
        type: string
      style: form
    endDate:
      description: The end date of the search range.
      explode: true
      in: query
      name: endDate
      required: false
      schema:
        format: date-time
        type: string
      style: form
    groupGalleryId:
      description: Must be a valid group gallery ID.
      explode: false
      in: path
      name: groupGalleryId
      required: true
      schema:
        example: ggal_00000000-0000-0000-0000-000000000000
        pattern: "ggal_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
        type: string
      style: simple
    groupGalleryImageId:
      description: Must be a valid group gallery image ID.
      explode: false
      in: path
      name: groupGalleryImageId
      required: true
      schema:
        example: ggim_00000000-0000-0000-0000-000000000000
        pattern: "ggim_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
        type: string
      style: simple
    groupRoleId:
      description: Must be a valid group role ID.
      explode: false
      in: path
      name: groupRoleId
      required: true
      schema:
        example: grol_00000000-0000-0000-0000-000000000000
        pattern: "grol_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
        type: string
      style: simple
    worldId:
      description: Must be a valid world ID.
      explode: false
      in: path
      name: worldId
      required: true
      schema:
        type: string
      style: simple
    instanceId:
      description: Must be a valid instance ID.
      explode: false
      in: path
      name: instanceId
      required: true
      schema:
        type: string
      style: simple
    notificationId:
      description: Must be a valid notification ID.
      explode: false
      in: path
      name: notificationId
      required: true
      schema:
        type: string
      style: simple
    messageType:
      description: "The type of message to fetch, must be a valid InviteMessageType."
      explode: false
      in: path
      name: messageType
      required: true
      schema:
        $ref: '#/components/schemas/InviteMessageType'
      style: simple
    slot:
      description: The message slot to fetch of a given message type.
      explode: false
      in: path
      name: slot
      required: true
      schema:
        maximum: 11
        minimum: 0
        type: integer
      style: simple
    permissionId:
      description: Must be a valid permission ID.
      explode: false
      in: path
      name: permissionId
      required: true
      schema:
        type: string
      style: simple
    require:
      description: Tags to include (comma-separated). All of the tags needs to be
        present.
      explode: true
      in: query
      name: require
      required: false
      schema:
        type: string
      style: form
    include:
      description: Tags to include (comma-separated). Any of the tags needs to be
        present.
      explode: true
      in: query
      name: include
      required: false
      schema:
        type: string
      style: form
    variant:
      allowEmptyValue: true
      description: "Specifies which `variant` of the site. Public is the end-user\
        \ site, while `internal` is the staff-only site with special pages for moderation\
        \ and management."
      explode: true
      in: query
      name: variant
      required: false
      schema:
        default: public
        enum:
        - public
        - internal
        type: string
      style: form
    branch:
      allowEmptyValue: true
      description: Specifies which git branch the site should load frontend source
        code from.
      explode: true
      in: query
      name: branch
      required: false
      schema:
        default: main
        type: string
      style: form
  responses:
    UserExistsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserExists'
      description: Returns a response if a user exists or not.
    MissingParameterError:
      content:
        application/json:
          examples:
            "400 At Least One Parameter Required":
              value:
                error:
                  message: "\"username, email, or displayName required\""
                  status_code: 400
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when missing at least 1 of the required parameters.
    CurrentUserLoginResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CurrentUser'
      description: OK
      headers:
        Set-Cookie:
          description: Successful authentication returns an `auth` cookie.
          explode: false
          schema:
            example: "auth=authcookie_00000000-0000-0000-0000-000000000000; Expires=Tue,\
              \ 01 Jan 2030 00:00:00 GMT; Path=/; HttpOnly"
            type: string
          style: simple
    MissingCredentialsError:
      content:
        application/json:
          examples:
            Missing Credentials Example:
              value:
                error:
                  message: '"Missing Credentials"'
                  status_code: 401
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response due to missing auth cookie.
    Verify2FAResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Verify2FAResult'
      description: OK
      headers:
        Set-Cookie:
          description: "Provides a `twoFactorAuth` cookie, which can be used to bypasses\
            \ the 2FA requirement for future logins on the same device."
          explode: false
          schema:
            example: "twoFactorAuth=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;\
              \ Expires=Tue, 01 Jan 2030 00:00:00 GMT; Path=/; HttpOnly"
            type: string
          style: simple
    Verify2FAEmailCodeResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Verify2FAEmailCodeResult'
      description: OK
      headers:
        Set-Cookie:
          description: "Provides a `twoFactorAuth` cookie, which can be used to bypasses\
            \ the 2FA requirement for future logins on the same device."
          explode: false
          schema:
            example: "twoFactorAuth=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;\
              \ Expires=Tue, 01 Jan 2030 00:00:00 GMT; Path=/; HttpOnly"
            type: string
          style: simple
    VerifyAuthTokenResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VerifyAuthTokenResult'
      description: Returns wether a provided auth token is valid or not.
    LogoutSuccess:
      content:
        application/json:
          examples:
            Logout Success:
              value:
                success:
                  message: Ok!
                  status_code: 200
          schema:
            $ref: '#/components/schemas/Success'
      description: OK
      headers:
        Set-Cookie:
          description: Clears the `auth` cookie.
          explode: false
          schema:
            default: "auth=; Expires=Tue, 01 Jan 2030 00:00:00 GMT; Path=/"
            type: string
          style: simple
        \0Set-Cookie:
          description: Clears the `age` cookie.
          explode: false
          schema:
            default: "age=; Expires=Tue, 01 Jan 2030 00:00:00 GMT; Path=/"
            type: string
          style: simple
        \0\0Set-Cookie:
          description: Clears the `tos` cookie.
          explode: false
          schema:
            default: "tos=; Expires=Tue, 01 Jan 2030 00:00:00 GMT; Path=/"
            type: string
          style: simple
    DeleteUserResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CurrentUser'
      description: OK
    AvatarResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Avatar'
      description: Returns a single Avatar object.
    AvatarSeeOtherUserCurrentAvatarError:
      content:
        application/json:
          examples:
            "403 Cant See Other Users Current Avatar":
              value:
                error:
                  message: \"You do not have permission to fetch details about the
                    avatar on this user.\"
                  status_code: 403
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to see another users current avatar
        without sufficient admin permissions.
    AvatarListResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/Avatar'
            type: array
      description: Returns a list of Avatar objects.
    FeaturedSetNotAdminError:
      content:
        application/json:
          examples:
            "401 Cannot Set Featured":
              value:
                error:
                  message: cannot set featured tag if you are not an admin
                  status_code: 401
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when set featured to true without being an admin.
    AvatarNotFoundError:
      content:
        application/json:
          examples:
            "404 Can't find avatar":
              value:
                error:
                  message: Can't find avatar!
                  status_code: 404
            "404 Couldn't find that avatar":
              value:
                error:
                  message: We couldn't find that avatar!
                  status_code: 404
            "404 Avatar Not Found":
              value:
                error:
                  message: Avatar Not Found
                  status_code: 404
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to show information about a non-existent
        avatar.
    CurrentUserResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CurrentUser'
      description: Returns a single CurrentUser object.
    AvatarNotTaggedAsFallbackError:
      content:
        application/json:
          examples:
            "403 Cant Select Non-Fallback as Fallback":
              value:
                error:
                  message: This avatar isn't tagged as a quest fallback avatar.
                  status_code: 403
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to select a fallback avatar that is
        missing the fallback tag.
    AvatarSeeOtherUserFavoritesError:
      content:
        application/json:
          examples:
            "403 Cant See Other User Favorite Avatars":
              value:
                error:
                  message: \"You can only see your own favorite avatars!\"
                  status_code: 403
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to see favourited avatars of another
        user without sufficient admin permissions.
    TransactionListResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/Transaction'
            type: array
      description: Returns a list of Transaction objects.
    TransactionResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Transaction'
      description: Returns a single Transaction object.
    UserSubscriptionListResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/UserSubscription'
            type: array
      description: Returns a list of UserSubscription objects.
    SubscriptionListResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/Subscription'
            type: array
      description: Returns a list of Subscription objects.
    LicenseGroupListResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/LicenseGroup'
            type: array
      description: Returns a list of LicenseGroup objects.
    LicenseGroupResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LicenseGroup'
      description: Returns a single LicenseGroup object.
    FavoriteListResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/Favorite'
            type: array
      description: Returns a list of Favorite objects.
    FavoriteResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Favorite'
      description: Returns a single Favorite object.
    FavoriteAddAlreadyFavoritedError:
      content:
        application/json:
          examples:
            "400 Already Favorited That Friend":
              value:
                error:
                  message: You already have that friend favorited
                  status_code: 400
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying favorite someone or something when already
        having it/them favorited.
    FavoriteAddNotFriendsError:
      content:
        application/json:
          examples:
            "403 Favorite Add Not Friends Error":
              value:
                error:
                  message: you are not friends with that user«É
                  status_code: 403
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying favorite someone whom you are not friends
        with.
    FavoriteNotFoundError:
      content:
        application/json:
          examples:
            "404 Favorite not found":
              value:
                error:
                  message: 404 couldn't find that favorite
                  status_code: 404
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to show information about a non-existent
        favorite.
    FavoriteRemovedSuccess:
      content:
        application/json:
          examples:
            "200 Favorite Removed":
              value:
                success:
                  message: favorite deleted!
                  status_code: 200
          schema:
            $ref: '#/components/schemas/Success'
      description: Success response after removing a favorite.
    FavoriteGroupListResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/FavoriteGroup'
            type: array
      description: Returns a list of FavoriteGroup objects.
    FavoriteGroupResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FavoriteGroup'
      description: Returns a single FavoriteGroup object.
    FavoriteGroupClearedSuccess:
      content:
        application/json:
          examples:
            "200 Favorite Group Cleared":
              value:
                success:
                  message: favorite deleted!
                  status_code: 200
          schema:
            $ref: '#/components/schemas/Success'
      description: Success response after clearing a favorite group.
    FileListResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/File'
            type: array
      description: Returns a list of File objects.
    FileResponse:
      content:
        application/json:
          examples:
            Example Avatar File:
              value:
                id: file_00000000-0000-0000-0000-000000000000
                name: Avatar - Test Avatar - Unity package - 2017‚Ä§4‚Ä§28f1_3_standalonewindows_Release
                ownerId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
                mimeType: application/gzip
                extension: .unitypackage
                tags: []
                versions:
                - version: 0
                  status: complete
                  created_at: 2019-08-15T11:04:37.910Z
                - version: 1
                  status: complete
                  created_at: 2019-08-15T11:04:49.702Z
                  file:
                    fileName: Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage
                    url: https://s3.us-east-1.amazonaws.com/files.vrchat.cloud/Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage
                    md5: xxxxxxxxxxxxxxxxxxx==
                    sizeInBytes: 303055180
                    status: complete
                    category: multipart
                    uploadId: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
                  delta:
                    fileName: Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.delta
                    url: https://s3.us-east-1.amazonaws.com/files.vrchat.cloud/Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.delta
                    md5: ""
                    sizeInBytes: 0
                    status: none
                    category: queued
                    uploadId: ""
                  signature:
                    fileName: Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.signature
                    url: https://s3.us-east-1.amazonaws.com/files.vrchat.cloud/Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.signature
                    md5: xxxxxxxxxxxxxxxx==
                    sizeInBytes: 532748
                    status: complete
                    category: simple
                    uploadId: ""
          schema:
            $ref: '#/components/schemas/File'
      description: Returns a single File object.
    FileNotFoundError:
      content:
        application/json:
          examples:
            "404 File Not Found":
              value:
                error:
                  message: File 'file_ce35d830-e20a-4df0-a6d4-5aaef4508044' not found
                  status_code: 404
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to show information about a non-existent
        file.
    FileDeletedSuccess:
      content:
        application/json:
          examples:
            File Deleted Success:
              value:
                success:
                  message: File deleted
                  status_code: 200
          schema:
            $ref: '#/components/schemas/Success'
      description: Successful response after deleting a File.
    FileDeletedError:
      content:
        application/json:
          examples:
            File Deleted Error:
              value:
                error:
                  message: File 'file_ce35d830-e20a-4df0-a6d4-5aaef4508044' not found
                  status_code: 404
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to delete a non-existent file.
    RawFileResponse:
      description: Raw file
    FileVersionDeleteInitialError:
      content:
        application/json:
          examples:
            "400 Delete Initial File Version":
              value:
                error:
                  message: Cannot delete the initial version of the file‚Äö just delete
                    the entire file record‚Ä§
                  status_code: 400
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to delete the initial version of a file.
        Delete the main File object instead.
    FileVersionDeleteMiddleError:
      content:
        application/json:
          examples:
            "409/500 Delete Non-Last File Version":
              value:
                error:
                  message: 409 Cannot delete against anything but the latest version
                    of this fileÀ∏ 1‚Äö 11
                  status_code: 500
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to delete any version of a file that
        is not hte last one.
    FileUploadURLResponse:
      content:
        application/json:
          examples:
            Example Response:
              value:
                url: https://s3.amazonaws.com/files.vrchat.cloud/Avatar-MyAvatar-Un.file_00000000-0000-0000-0000-000000000000.1.unitypackage?AWSAccessKeyId=XXXXXXXXXXXXXXXXXXXX&Expires=1626028518&Signature=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&partNumber=1&uploadId=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx_xxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxx_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx..xxxxxxxxxxxxxxxxxxxxxxx
          schema:
            $ref: '#/components/schemas/FileUploadURL'
      description: "See [https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html](AWS\
        \ REST docs - PUT Object)"
    FileUploadAlreadyFinishedError:
      content:
        application/json:
          examples:
            Tried To Upload Against Already Finished Version:
              value:
                error:
                  message: Cannot upload against a complete version entry‚Ä§ Create
                    a new version of this file before uploading‚Ä§
                  status_code: 400
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to start an upload against a FileVersion
        that is already marked as  `complete`.
    FileVersionUploadStatusResponse:
      content:
        application/json:
          examples:
            Example Access Key:
              value:
                uploadId: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx_xxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxx_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx..xxxxxxxxxxxxxxxxxxxxxxx
                fileName: Avatar-MyAvatar-Un.file_00000000-0000-0000-0000-000000000000.1.unitypackage
                nextPartNumber: 0
                maxParts: 1000
                parts: []
                etags: []
          schema:
            $ref: '#/components/schemas/FileVersionUploadStatus'
      description: "Current FileVersion upload status. Contains the uploadId needed\
        \ for uploading, as well as the already uploaded parts."
    LimitedUserListResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/LimitedUser'
            type: array
      description: Returns a list of LimitedUser objects.
    NotificationResponse:
      content:
        application/json:
          examples:
            Example Friend Request Response:
              value:
                id: frq_00000000-0000-0000-0000-000000000000
                senderUserId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
                type: friendRequest
                message: ""
                details: "{}"
                seen: false
                created_at: 2021-01-01T00:00:00.000Z
          schema:
            $ref: '#/components/schemas/Notification'
      description: Returns a single Notifcation object.
    UserDoesntExistError:
      content:
        application/json:
          examples:
            "404 User Doesn't Exist Response":
              value:
                error:
                  message: user doesn't exist«É
                  status_code: 404
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to send a friend request to a user which
        doesn't exist.
    DeleteFriendSuccess:
      content:
        application/json:
          examples:
            Deleted Friend Request:
              value:
                success:
                  message: Friendship request deleted
                  status_code: 200
          schema:
            $ref: '#/components/schemas/Success'
      description: Successful response after cancelling a friend request.
    DeleteFriendRequestError:
      content:
        application/json:
          examples:
            "404 Delete Friend Request":
              value:
                error:
                  message: that friend request could not be found
                  status_code: 404
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to delete a non-existent friend-request.
    FriendStatusResponse:
      content:
        application/json:
          examples:
            Not Friends:
              value:
                isFriend: true
                outgoingRequest: false
                incomingRequest: false
            Is Friend:
              value:
                isFriend: true
                outgoingRequest: false
                incomingRequest: false
          schema:
            $ref: '#/components/schemas/FriendStatus'
      description: Returns a users Friend Status.
    UnfriendSuccess:
      content:
        application/json:
          examples:
            Unfriend Success:
              value:
                success:
                  message: Friendship destroyed
                  status_code: 200
          schema:
            $ref: '#/components/schemas/Success'
      description: Successful response after unfriending a user.
    NotFriendsError:
      content:
        application/json:
          examples:
            "400 Not Friends Response":
              value:
                error:
                  message: These users are not friends
                  status_code: 400
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to unfriend someone who is not a friend.
    GroupResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Group'
      description: Returns a single Group object.
    GroupNotFoundError:
      content:
        application/json:
          examples:
            "404 World Not Found":
              value:
                error:
                  message: Can't find group«É
                  status_code: 404
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to perform operations on a non-existing
        group.
    DeleteGroupSuccess:
      content:
        application/json:
          examples:
            Deleted Group:
              value:
                success:
                  message: Group deleted!
                  status_code: 200
          schema:
            $ref: '#/components/schemas/Success'
      description: Successful response after deleting a Group.
    GroupAnnouncementResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GroupAnnouncement'
      description: Returns a single GroupAnnouncement object.
    DeleteGroupAnnouncementSuccess:
      content:
        application/json:
          examples:
            Deleted Group Announcement:
              value:
                success:
                  message: Group announcement was cleared!
                  status_code: 200
          schema:
            $ref: '#/components/schemas/Success'
      description: Successful response after deleting/clearing the group announcement.
    GroupAuditLogListResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaginatedGroupAuditLogEntryList'
      description: "Returns a list of GroupAudit objects, wrapped in new pagination\
        \ format."
    GroupMemberListResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/GroupMember'
            type: array
      description: Returns a list of GroupMember objects.
    GroupMemberResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GroupMember'
      description: Returns a list of GroupMember objects.
    GroupGalleryResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GroupGallery'
      description: Returns a single GroupGallery object.
    GroupGalleryImageListResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/GroupGalleryImage'
            type: array
      description: Returns a list of GroupGalleryImage objects.
    DeleteGroupGallerySuccess:
      content:
        application/json:
          examples:
            Deleted Group Gallery:
              value:
                success:
                  message: Gallery deleted!
                  status_code: 200
          schema:
            $ref: '#/components/schemas/Success'
      description: Successful response after deleting a group gallery.
    GroupGalleryImageResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GroupGalleryImage'
      description: Returns a single GroupGalleryImage object.
    DeleteGroupGalleryImageSuccess:
      content:
        application/json:
          examples:
            Deleted Group Gallery Image:
              value:
                success:
                  message: Gallery image removed!
                  status_code: 200
          schema:
            $ref: '#/components/schemas/Success'
      description: Successful response after deleting a group gallery image.
    GroupGalleryImageDeleteForbiddenError:
      content:
        application/json:
          examples:
            "403 Cannot Delete Submission":
              value:
                error:
                  message: You can't remove this gallery submission!
                  status_code: 403
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to delete a submission to a group's
        gallery when the user does not have permission to do so.
    GroupNotMemberError:
      content:
        application/json:
          examples:
            "403 Not Group Member":
              value:
                error:
                  message: You're not a member.
                  status_code: 403
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to perform operations on a group you
        are not member of.
    GroupAlreadyMemberError:
      content:
        application/json:
          examples:
            "400 User Already Member":
              value:
                error:
                  message: You're already a member!
                  status_code: 400
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to join a group that the user is already
        a member of.
    UsersInvalidSearchError:
      content:
        application/json:
          examples:
            "400 N is too low":
              value:
                error:
                  message: n must be a positive integerÀ∏ '-1'
                  status_code: 400
            "400 N is too high":
              value:
                error:
                  message: nÔºù1000 is much too high‚Ä§ implement paging you savages‚Ä§
                  status_code: 400
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to search list of users with an invalid
        request.
    GroupLimitedMemberResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GroupLimitedMember'
      description: Returns a list of GroupMember objects.
    GroupRoleIDListResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GroupRoleIDList'
      description: Returns a list of GroupRoleID objects.
    GroupPermissionListResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/GroupPermission'
            type: array
      description: Returns a list of GroupPermission objects.
    GroupRoleListResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/GroupRole'
            type: array
      description: Returns a list of GroupRole objects.
    GroupRoleResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GroupRole'
      description: Returns a single GroupRole object.
    SendNotificationResponse:
      content:
        application/json:
          examples:
            Example Friend Request Response:
              value:
                id: frq_00000000-0000-0000-0000-000000000000
                recieverUserId: usr_00000000-0000-0000-0000-000000000000
                senderUserId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
                type: friendRequest
                message: ""
                details: "{}"
                created_at: 2021-01-01T00:00:00.000Z
          schema:
            $ref: '#/components/schemas/SentNotification'
      description: Returns a single SentNotifcation object.
    InviteMustBeFriendsError:
      content:
        application/json:
          examples:
            Must Be Friends Error:
              value:
                error:
                  message: '"You need to be friends with that user first."'
                  status_code: 403
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to invite someome whom you are not friends
        with.
    InstanceNotFoundError:
      content:
        application/json:
          examples:
            Instance Not Found Example:
              value:
                error:
                  message: '"Instance not found"'
                  status_code: 404
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response due to non existant instance
    InviteResponse400Error:
      content:
        application/json:
          examples:
            Response Slot Out Of Bounds Error:
              value:
                error:
                  message: '"Response slot is out of bounds."'
                  status_code: 400
            Already Responded Error:
              value:
                error:
                  message: '"You''ve already responded to that request."'
                  status_code: 400
            Cannot Respond Self Invite Error:
              value:
                error:
                  message: '"You cannot respond to your own invites."'
                  status_code: 400
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to respond to an invite and something
        went wrong.
    InviteMessageListResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/InviteMessage'
            type: array
      description: Returns a list of InviteMessage objects.
    InviteMessageInvalidSlotNumberError:
      content:
        application/json:
          examples:
            "400 Negative Slot Number Error":
              value:
                error:
                  message: Really? A negative slot? Tsk-tsk‚Ä§‚Ä§‚Ä§
                  status_code: 400
            "400 Too High Slot Number Error":
              value:
                error:
                  message: That is too high of a slot number‚Ä§
                  status_code: 400
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to update an Invite Message with an
        invalid slot number.
    NotAuthorizedActionError:
      content:
        application/json:
          examples:
            Not Authorized Example:
              value:
                error:
                  message: You are not authorized to perform that action.
                  status_code: 401
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response due to missing authorization to perform that action.
    InviteMessageResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InviteMessage'
      description: Returns a single InviteMessage object.
    InviteMessageGetNegativeSlotError:
      content:
        application/json:
          examples:
            "200 Negative Slot Number Error":
              value: {}
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to get an Invite Message with a negative
        slot number.
    InviteMessageGetTooHighSlotError:
      content:
        application/json:
          examples:
            "404 Slot Number Too High Error":
              value:
                error:
                  status_code: 404
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to get an Invite Message with a too
        high slot number.
    InviteMessageUpdateRateLimitError:
      content:
        application/json:
          examples:
            Update Invite Message Please Wait Error:
              value:
                error:
                  message: Please wait 60 more minutes until you try again‚Ä§
                  status_code: 429
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to update an Invite Message before the
        cooldown has expired.
    InviteMessageNoEntryForSlotError:
      content:
        application/json:
          examples:
            "404 No Custom Invite Message In Slot":
              value:
                error:
                  message: There's no entry for that slot.
                  status_code: 404
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to reset an Invite Message whos slot
        doesn't exist.
    InstanceResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Instance'
      description: Returns a single Instance object.
    InstanceShortNameResponse:
      content:
        text/plain:
          schema:
            $ref: '#/components/schemas/InstanceShortNameResponse'
      description: Returns an instance secureName and/or shortName.
    InstanceSelfInviteSuccess:
      content:
        application/json:
          examples:
            "200 Ok":
              value:
                success:
                  message: Ok
                  status_code: 200
          schema:
            $ref: '#/components/schemas/Success'
      description: Success response after sending an invite to yourself to the instance.
    NotificationListResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/Notification'
            type: array
      description: Returns a list of Notifcation objects.
    FriendSuccess:
      content:
        application/json:
          examples:
            Unfriend Success:
              value:
                success:
                  message: Ok
                  status_code: 200
          schema:
            $ref: '#/components/schemas/Success'
      description: Successful response after friending a user.
    AcceptFriendRequestError:
      content:
        application/json:
          examples:
            "404 Accept Friend Request":
              value:
                error:
                  message: that friend request could not be found
                  status_code: 404
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to accept a non-existent friend request.
    ClearNotificationsSuccess:
      content:
        application/json:
          examples:
            Unfriend Success:
              value:
                success:
                  message: Ok
                  status_code: 200
          schema:
            $ref: '#/components/schemas/Success'
      description: Successful response after clearing all notifications.
    PermissionListResponse:
      content:
        application/json:
          examples:
            Standard Permissions Inherited By VRC+:
              value:
              - id: prms_fe07c8a7-a4ca-4eda-97e5-e241040ef6f8
                ownerId: usr_17f19d1e-fd48-493b-a8ad-807a3d8bdd1b
                name: permission-trust-boost
              - id: prms_804ba021-9f47-4e25-9847-1f42fdb2e6ff
                ownerId: usr_17f19d1e-fd48-493b-a8ad-807a3d8bdd1b
                name: permission-extra-favorites-avatar-groups
                data:
                  maxFavoritesPerGroup:
                    avatar: 25
                  maxFavoriteGroups:
                    avatar: 4
              - id: prms_ac88a3e0-c236-47c7-9b47-d795551b7520
                ownerId: usr_17f19d1e-fd48-493b-a8ad-807a3d8bdd1b
                name: permission-early-adopter-tags
                data:
                  tags:
                  - system_early_adopter
              - id: prms_76f33deb-dd5d-46b7-b79d-e1f8f0a9a1e0
                ownerId: usr_17f19d1e-fd48-493b-a8ad-807a3d8bdd1b
                name: permission-supporter-tags
                data:
                  tags:
                  - system_supporter
              - id: prms_0d9549db-d30a-48f3-a6b8-6741ce5a4283
                ownerId: usr_bc012e97-a292-4abc-b4e6-f9edcc8c0d2b
                name: permission-invite-photos
                data: {}
              - id: prms_153ac0b7-c2dd-43f9-96e3-c61fd2e85509
                ownerId: usr_bc012e97-a292-4abc-b4e6-f9edcc8c0d2b
                name: permission-profile-pic-override
                data: {}
              - id: prms_1d9549db-d30a-48f3-a6b8-6741ce5a4283
                ownerId: usr_bc012e97-a292-4abc-b4e6-f9edcc8c0d2b
                name: permission-user-icons
                data: {}
              - id: prms_dc02c512-4c03-479c-8c6a-d9329c023baf
                ownerId: usr_bc012e97-a292-4abc-b4e6-f9edcc8c0d2b
                name: permission-user-gallery
                data: {}
          schema:
            items:
              $ref: '#/components/schemas/Permission'
            type: array
      description: Returns a list of Permission objects.
    InvalidAdminCredentialsError:
      content:
        application/json:
          examples:
            Invalid Admin Credentials Example:
              value:
                error:
                  message: '"Invalid Admin Credentials"'
                  status_code: 403
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response due to missing Administrator credentials.
    PermissionResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Permission'
      description: Returns a single Permission object.
    PlayerModerationListResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/PlayerModeration'
            type: array
      description: Returns a list of PlayerModeration objects.
    PlayerModerationResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PlayerModeration'
      description: Returns a single PlayerModeration object.
    PlayerModerationClearAllSuccess:
      content:
        application/json:
          examples:
            "200 OK":
              value:
                success:
                  message: OK
                  status_code: 200
          schema:
            $ref: '#/components/schemas/Success'
      description: Success response after e.g. clearing all player moderations.
    PlayerModerationNotFoundError:
      content:
        application/json:
          examples:
            "404 Player Moderation Not Found":
              value:
                error:
                  message: Can't find playerModeration«É
                  status_code: 404
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to show information about a non-existent
        player moderation.
    PlayerModerationRemovedSuccess:
      content:
        application/json:
          examples:
            "200 Player Moderation Removed":
              value:
                success:
                  message: PlayerModeration pmod_25551a8d-6f5d-430a-88d3-9c0ce08b5244
                    removed
                  status_code: 200
          schema:
            $ref: '#/components/schemas/Success'
      description: Success response after removing a PlayerModeration by ID.
    PlayerModerationDeleteOthersError:
      content:
        application/json:
          examples:
            "403 Can't delete Player Moderation You Didn't Create":
              value:
                error:
                  message: You definitely can't delete a playerModeration you didn't
                    create
                  status_code: 403
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to delete someone else's player moderation.
    PlayerModerationUnmoderatedSuccess:
      content:
        application/json:
          examples:
            "200 Specific User Unmoderated":
              value:
                success:
                  message: User usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469 unmoderated
                  status_code: 200
            "200 All Of PlayerModerationType Unmoderated":
              value:
                success:
                  message: PlayerModerations of type undefined removed
                  status_code: 200
          schema:
            $ref: '#/components/schemas/Success'
      description: Success response after unmoderating a player moderation.
    APIConfigResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIConfig'
      description: Returns the API's config.
    InfoPushListResponse:
      content:
        application/json:
          examples:
            New Quick Menu:
              value:
              - id: launch-beta
                isEnabled: true
                releaseStatus: public
                priority: 970
                tags:
                - quick-menu-banner
                - user-all
                data:
                  imageUrl: https://assets.vrchat.com/ips/assets/b5af844263458d3a5b3e01b52ef7fe47f7b3b563eace4ee972205f250474c879.png
                  onPressed:
                    command: OpenURL
                    parameters:
                    - https://docs.vrchat.com/v2021.4.1/docs/latest-release
                hash: 69abf85064503e870124acde330bb0ae
                createdAt: 2021-09-13T20:50:40+00:00
                updatedAt: 2021-11-08T22:45:25+00:00
            World Hot Row:
              value:
              - id: world-hot
                isEnabled: true
                releaseStatus: public
                priority: 1000
                tags:
                - world-category
                data:
                  imageUrl: https://assets.vrchat.com/ips/assets/40f8ad117f8d6734ac84039d8ced290b6676486099b7cc56759efe7b259ca05d.png
                  contentList:
                    name: Hot
                    sortHeading: heat
                    sortOwnership: any
                    sortOrder: descending
                    platform: ThisPlatformSupported
                hash: f0e97e72c437aa437e92c1184630bec6
                createdAt: 2020-06-05T08:23:31+00:00
                updatedAt: 2020-08-16T07:04:07+00:00
            Game Version:
              value:
              - id: build-config
                isEnabled: true
                releaseStatus: public
                priority: 1000
                tags:
                - high-priority
                - user-all
                data:
                  version: 2021.3.4
                hash: a76e7da333c6a5a8f7ec2adee064cac9
                createdAt: 2021-08-21T04:27:05+00:00
                updatedAt: 2021-09-18T04:37:29+00:00
          schema:
            items:
              $ref: '#/components/schemas/InfoPush'
            type: array
      description: Returns a list of InfoPush objects.
    DownloadSourceCodeAccessError:
      content:
        application/json:
          examples:
            Only Admins Can Get Non-Public Variants:
              value:
                error:
                  message: only admins can get non-public variants
                  status_code: 400
            Only Admins Can Get Non-Main Branches:
              value:
                error:
                  message: only admins can get non-main branches
                  status_code: 400
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to download non-public and non-main
        JavaScript or CSS without Admin Credentials.
    APIHealthResponse:
      content:
        application/json:
          examples:
            Example Response:
              value:
                ok: true
                serverName: prod-api-green-marsh-dgt
                buildVersionTag: master-build-2021-06-24-fred-drakeshoot
          schema:
            $ref: '#/components/schemas/APIHealth'
      description: Returns the API's health.
    CurrentOnlineUsersResponse:
      content:
        application/json:
          schema:
            description: Number of online users
            example: 12345
            minimum: 0
            type: integer
      description: OK
    SystemTimeResponse:
      content:
        application/json:
          schema:
            description: Does not return millisecond precision. Always returns time
              in UTC.
            example: 2021-08-20T12:38:42Z
            format: date-time
            type: string
      description: OK
    UserResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
      description: Returns a single User object.
    GroupListResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/Group'
            type: array
      description: Returns a list of Group objects.
    LimitedWorldListResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/LimitedWorld'
            type: array
      description: Returns a list of LimitedWorld objects.
    WorldResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/World'
      description: Returns a single World object.
    WorldCreateNotAllowedYetError:
      content:
        application/json:
          examples:
            "400 Can't Create World Yet":
              value:
                error:
                  message: \"You can't create a world right now\"
                  status_code: 400
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying create a world without having the neccesary
        Trust rank yet.
    WorldSeeOtherUserFavoritesError:
      content:
        application/json:
          examples:
            "404 Cant See Other User Favorite Worlds":
              value:
                error:
                  message: 403 You can't see another user's favorites
                  status_code: 403
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to see favourited worlds of another
        user without sufficient admin permissions.
    WorldSeeOtherUserRecentsError:
      content:
        application/json:
          examples:
            "403 Only See Own Recents":
              value:
                error:
                  message: \"You can only see your own recent worlds!\"
                  status_code: 403
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to see recently visited worlds of another
        user without sufficient admin permissions.
    WorldNotFoundError:
      content:
        application/json:
          examples:
            "404 World Not Found":
              value:
                error:
                  message: World wrld_ba913a96-fac4-4048-a062-9aa5db092812 not found
                  status_code: 404
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response when trying to show information about a non-existent
        world. Sometimes returns with `model <worldId> not found` instead of `World
        <worldId not found`.
    WorldMetadataResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WorldMetadata'
      description: OK
    WorldPublishStatusResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WorldPublishStatus'
      description: Returns a single WorldPublishStatus object.
  schemas:
    UserExists:
      description: "Status object representing if a queried user by username or userId\
        \ exists or not. This model is primarily used by the `/auth/exists` endpoint,\
        \ which in turn is used during registration. Please see the documentation\
        \ on that endpoint for more information on usage."
      example:
        userExists: false
      properties:
        userExists:
          default: false
          description: Status if a user exist with that username or userId.
          type: boolean
      required:
      - userExists
      title: UserExists
      type: object
    Response:
      example:
        status_code: 100
        message: message
      properties:
        message:
          minLength: 1
          type: string
        status_code:
          minimum: 100
          type: integer
      required:
      - status_code
      title: Response
      type: object
    Error:
      properties:
        error:
          $ref: '#/components/schemas/Response'
      title: Error
      type: object
    AccountDeletionLog:
      example:
        dateTime: 2000-01-23T04:56:07.000+00:00
        deletionScheduled: 2000-01-23T04:56:07.000+00:00
        message: Deletion requested
      properties:
        message:
          default: Deletion requested
          description: "Typically \"Deletion requested\" or \"Deletion canceled\"\
            . Other messages like \"Deletion completed\" may exist, but are these\
            \ are not possible to see as a regular user."
          example: Deletion requested
          type: string
        deletionScheduled:
          description: "When the deletion is scheduled to happen, standard is 14 days\
            \ after the request."
          format: date-time
          nullable: true
          type: string
        dateTime:
          description: Date and time of the deletion request.
          format: date-time
          type: string
      title: AccountDeletionLog
      type: object
    UserID:
      description: "A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`.\
        \ Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can\
        \ never be changed."
      example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
      title: UserID
      type: string
    AvatarID:
      example: avtr_912d66a4-4714-43b8-8407-7de2cafbf55b
      pattern: "avtr_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
      title: AvatarID
      type: string
    CurrentAvatarImageUrl:
      description: "When profilePicOverride is not empty, use it instead."
      example: https://api.vrchat.cloud/api/1/file/file_ae46d521-7281-4b38-b365-804b32a1d6a7/1/file
      title: CurrentAvatarImageUrl
      type: string
    CurrentAvatarThumbnailImageUrl:
      description: "When profilePicOverride is not empty, use it instead."
      example: https://api.vrchat.cloud/api/1/image/file_aae83ed9-d42d-4d72-9f4b-9f1e41ed17e1/1/256
      title: CurrentAvatarThumbnailImageUrl
      type: string
    DeveloperType:
      default: none
      description: |-
        "none" User is a normal user
        "trusted" Unknown
        "internal" Is a VRChat Developer
        "moderator" Is a VRChat Moderator

        Staff can hide their developerType at will.
      enum:
      - none
      - trusted
      - internal
      - moderator
      title: DeveloperType
      type: string
    WorldID:
      description: WorldID be "offline" on User profiles if you are not friends with
        that user.
      example: wrld_ba913a96-fac4-4048-a062-9aa5db092812
      pattern: "(^$|offline|(wrld|wld)_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})"
      title: WorldID
      type: string
    Platform:
      description: "This can be `standalonewindows` or `android`, but can also pretty\
        \ much be any random Unity verison such as `2019.2.4-801-Release` or `2019.2.2-772-Release`\
        \ or even `unknownplatform`."
      example: standalonewindows
      title: Platform
      type: string
    PastDisplayName:
      example:
        updated_at: 2000-01-23T04:56:07.000+00:00
        displayName: displayName
      properties:
        displayName:
          minLength: 1
          type: string
        updated_at:
          format: date-time
          type: string
      required:
      - displayName
      - updated_at
      title: PastDisplayName
      type: object
    GroupID:
      example: grp_71a7ff59-112c-4e78-a990-c7cc650776e5
      pattern: "grp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
      title: GroupID
      type: string
    CurrentUserPresence:
      example:
        instance: instance
        displayName: displayName
        instanceType: instanceType
        groups:
        - grp_71a7ff59-112c-4e78-a990-c7cc650776e5
        - grp_71a7ff59-112c-4e78-a990-c7cc650776e5
        travelingToInstance: travelingToInstance
        avatarThumbnail: avatarThumbnail
        platform: platform
        travelingToWorld: wrld_ba913a96-fac4-4048-a062-9aa5db092812
        world: wrld_ba913a96-fac4-4048-a062-9aa5db092812
        profilePicOverride: profilePicOverride
        id: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        isRejoining: isRejoining
        status: status
      properties:
        avatarThumbnail:
          nullable: true
          type: string
        displayName:
          type: string
        groups:
          items:
            $ref: '#/components/schemas/GroupID'
          nullable: true
          type: array
        id:
          description: "A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`.\
            \ Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID\
            \ can never be changed."
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          title: UserID
          type: string
        instance:
          nullable: true
          type: string
        instanceType:
          description: either an InstanceType or an empty string
          nullable: true
          type: string
        isRejoining:
          nullable: true
          type: string
        platform:
          description: either a Platform or an empty string
          nullable: true
          type: string
        profilePicOverride:
          nullable: true
          type: string
        status:
          description: either a UserStatus or empty string
          nullable: true
          type: string
        travelingToInstance:
          nullable: true
          type: string
        travelingToWorld:
          description: WorldID be "offline" on User profiles if you are not friends
            with that user.
          example: wrld_ba913a96-fac4-4048-a062-9aa5db092812
          pattern: "(^$|offline|(wrld|wld)_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})"
          title: WorldID
          type: string
        world:
          description: WorldID be "offline" on User profiles if you are not friends
            with that user.
          example: wrld_ba913a96-fac4-4048-a062-9aa5db092812
          pattern: "(^$|offline|(wrld|wld)_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})"
          title: WorldID
          type: string
      title: CurrentUserPresence
      type: object
    UserState:
      default: offline
      description: |-
        * "online" User is online in VRChat
        * "active" User is online, but not in VRChat
        * "offline" User is offline

        Always offline when returned through `getCurrentUser` (/auth/user).
      enum:
      - offline
      - active
      - online
      title: UserState
      type: string
    UserStatus:
      default: offline
      description: "Defines the User's current status, for example \"ask me\", \"\
        join me\" or \"offline. This status is a combined indicator of their online\
        \ activity and privacy preference."
      enum:
      - active
      - join me
      - ask me
      - busy
      - offline
      title: UserStatus
      type: string
    Tag:
      description: |-
        Tags are a way to grant various access, assign restrictions or other kinds of metadata to various to objects such as worlds, users and avatars.

        System tags starting with `system_` are granted automatically by the system, while admin tags with `admin_` are granted manually. More prefixes such as `language_ ` (to indicate that a player can speak the tagged language), and `author_tag_` (provided by a world author for search and sorting) exist as well.
      minLength: 1
      title: Tag
      type: string
    CurrentUser:
      example:
        twoFactorAuthEnabledDate: 2000-01-23T04:56:07.000+00:00
        bio: bio
        developerType: null
        steamId: steamId
        currentAvatarAssetUrl: currentAvatarAssetUrl
        twoFactorAuthEnabled: true
        steamDetails: "{}"
        unsubscribe: true
        id: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        state: null
        presence:
          instance: instance
          displayName: displayName
          instanceType: instanceType
          groups:
          - grp_71a7ff59-112c-4e78-a990-c7cc650776e5
          - grp_71a7ff59-112c-4e78-a990-c7cc650776e5
          travelingToInstance: travelingToInstance
          avatarThumbnail: avatarThumbnail
          platform: platform
          travelingToWorld: wrld_ba913a96-fac4-4048-a062-9aa5db092812
          world: wrld_ba913a96-fac4-4048-a062-9aa5db092812
          profilePicOverride: profilePicOverride
          id: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          isRejoining: isRejoining
          status: status
        currentAvatarThumbnailImageUrl: https://api.vrchat.cloud/api/1/image/file_aae83ed9-d42d-4d72-9f4b-9f1e41ed17e1/1/256
        currentAvatar: avtr_912d66a4-4714-43b8-8407-7de2cafbf55b
        hasBirthday: true
        last_login: 2000-01-23T04:56:07.000+00:00
        friends:
        - usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        - usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        tags:
        - null
        - null
        acceptedPrivacyVersion: 0
        onlineFriends:
        - usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        - usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        friendGroupNames:
        - friendGroupNames
        - friendGroupNames
        accountDeletionDate: 2000-01-23
        fallbackAvatar: avtr_912d66a4-4714-43b8-8407-7de2cafbf55b
        obfuscatedPendingEmail: obfuscatedPendingEmail
        obfuscatedEmail: obfuscatedEmail
        oculusId: oculusId
        status: null
        accountDeletionLog:
        - dateTime: 2000-01-23T04:56:07.000+00:00
          deletionScheduled: 2000-01-23T04:56:07.000+00:00
          message: Deletion requested
        - dateTime: 2000-01-23T04:56:07.000+00:00
          deletionScheduled: 2000-01-23T04:56:07.000+00:00
          message: Deletion requested
        last_platform: standalonewindows
        activeFriends:
        - usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        - usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        offlineFriends:
        - usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        - usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        currentAvatarImageUrl: https://api.vrchat.cloud/api/1/file/file_ae46d521-7281-4b38-b365-804b32a1d6a7/1/file
        displayName: displayName
        acceptedTOSVersion: 7
        hasLoggedInFromClient: true
        hasEmail: true
        last_activity: 2000-01-23T04:56:07.000+00:00
        updated_at: 2000-01-23T04:56:07.000+00:00
        pastDisplayNames:
        - updated_at: 2000-01-23T04:56:07.000+00:00
          displayName: displayName
        - updated_at: 2000-01-23T04:56:07.000+00:00
          displayName: displayName
        isFriend: false
        date_joined: 2000-01-23
        statusFirstTime: true
        hasPendingEmail: true
        allowAvatarCopying: true
        friendKey: friendKey
        emailVerified: true
        statusDescription: statusDescription
        statusHistory:
        - statusHistory
        - statusHistory
        homeLocation: wrld_ba913a96-fac4-4048-a062-9aa5db092812
        bioLinks:
        - bioLinks
        - bioLinks
        profilePicOverride: profilePicOverride
        userIcon: userIcon
        username: username
      properties:
        acceptedTOSVersion:
          example: 7
          minimum: 0
          type: integer
        acceptedPrivacyVersion:
          example: 0
          minimum: 0
          type: integer
        accountDeletionDate:
          format: date
          nullable: true
          type: string
        accountDeletionLog:
          description: ' '
          items:
            $ref: '#/components/schemas/AccountDeletionLog'
          nullable: true
          type: array
        activeFriends:
          description: ' '
          items:
            $ref: '#/components/schemas/UserID'
          type: array
        allowAvatarCopying:
          type: boolean
        bio:
          type: string
        bioLinks:
          description: ' '
          items:
            type: string
          type: array
        currentAvatar:
          example: avtr_912d66a4-4714-43b8-8407-7de2cafbf55b
          pattern: "avtr_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          title: AvatarID
          type: string
        currentAvatarAssetUrl:
          type: string
        currentAvatarImageUrl:
          description: "When profilePicOverride is not empty, use it instead."
          example: https://api.vrchat.cloud/api/1/file/file_ae46d521-7281-4b38-b365-804b32a1d6a7/1/file
          title: CurrentAvatarImageUrl
          type: string
        currentAvatarThumbnailImageUrl:
          description: "When profilePicOverride is not empty, use it instead."
          example: https://api.vrchat.cloud/api/1/image/file_aae83ed9-d42d-4d72-9f4b-9f1e41ed17e1/1/256
          title: CurrentAvatarThumbnailImageUrl
          type: string
        date_joined:
          format: date
          type: string
        developerType:
          $ref: '#/components/schemas/DeveloperType'
        displayName:
          type: string
        emailVerified:
          type: boolean
        fallbackAvatar:
          example: avtr_912d66a4-4714-43b8-8407-7de2cafbf55b
          pattern: "avtr_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          title: AvatarID
          type: string
        friendGroupNames:
          deprecated: true
          description: Always empty array.
          items:
            type: string
          type: array
        friendKey:
          type: string
        friends:
          items:
            $ref: '#/components/schemas/UserID'
          type: array
        hasBirthday:
          type: boolean
        hasEmail:
          type: boolean
        hasLoggedInFromClient:
          type: boolean
        hasPendingEmail:
          type: boolean
        homeLocation:
          description: WorldID be "offline" on User profiles if you are not friends
            with that user.
          example: wrld_ba913a96-fac4-4048-a062-9aa5db092812
          pattern: "(^$|offline|(wrld|wld)_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})"
          title: WorldID
          type: string
        id:
          description: "A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`.\
            \ Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID\
            \ can never be changed."
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          title: UserID
          type: string
        isFriend:
          default: false
          type: boolean
        last_activity:
          format: date-time
          type: string
        last_login:
          format: date-time
          type: string
        last_platform:
          description: "This can be `standalonewindows` or `android`, but can also\
            \ pretty much be any random Unity verison such as `2019.2.4-801-Release`\
            \ or `2019.2.2-772-Release` or even `unknownplatform`."
          example: standalonewindows
          title: Platform
          type: string
        obfuscatedEmail:
          type: string
        obfuscatedPendingEmail:
          type: string
        oculusId:
          type: string
        offlineFriends:
          items:
            $ref: '#/components/schemas/UserID'
          type: array
        onlineFriends:
          items:
            $ref: '#/components/schemas/UserID'
          type: array
        pastDisplayNames:
          description: ' '
          items:
            $ref: '#/components/schemas/PastDisplayName'
          type: array
        presence:
          $ref: '#/components/schemas/CurrentUserPresence'
        profilePicOverride:
          type: string
        state:
          $ref: '#/components/schemas/UserState'
        status:
          $ref: '#/components/schemas/UserStatus'
        statusDescription:
          type: string
        statusFirstTime:
          type: boolean
        statusHistory:
          items:
            type: string
          type: array
        steamDetails:
          type: object
        steamId:
          type: string
        tags:
          items:
            $ref: '#/components/schemas/Tag'
          type: array
        twoFactorAuthEnabled:
          type: boolean
        twoFactorAuthEnabledDate:
          format: date-time
          nullable: true
          type: string
        unsubscribe:
          type: boolean
        updated_at:
          format: date-time
          type: string
        userIcon:
          type: string
        username:
          deprecated: true
          description: "-| **DEPRECATED:** VRChat API no longer return usernames of\
            \ other users. [See issue by Tupper for more information](https://github.com/pypy-vrc/VRCX/issues/429)."
          type: string
      required:
      - acceptedTOSVersion
      - allowAvatarCopying
      - bio
      - bioLinks
      - currentAvatar
      - currentAvatarAssetUrl
      - currentAvatarImageUrl
      - currentAvatarThumbnailImageUrl
      - date_joined
      - developerType
      - displayName
      - emailVerified
      - friendGroupNames
      - friendKey
      - friends
      - hasBirthday
      - hasEmail
      - hasLoggedInFromClient
      - hasPendingEmail
      - homeLocation
      - id
      - isFriend
      - last_login
      - last_platform
      - obfuscatedEmail
      - obfuscatedPendingEmail
      - oculusId
      - pastDisplayNames
      - profilePicOverride
      - state
      - status
      - statusDescription
      - statusFirstTime
      - statusHistory
      - steamDetails
      - steamId
      - tags
      - twoFactorAuthEnabled
      - unsubscribe
      - userIcon
      title: CurrentUser
      type: object
    TwoFactorAuthCode:
      example:
        code: code
      properties:
        code:
          type: string
      required:
      - code
      title: TwoFactorAuthCode
      type: object
    Verify2FAResult:
      example:
        verified: true
      properties:
        verified:
          type: boolean
      required:
      - verified
      title: Verify2FAResult
      type: object
    TwoFactorEmailCode:
      example:
        code: code
      properties:
        code:
          type: string
      required:
      - code
      title: TwoFactorEmailCode
      type: object
    Verify2FAEmailCodeResult:
      example:
        verified: true
      properties:
        verified:
          type: boolean
      required:
      - verified
      title: Verify2FAEmailCodeResult
      type: object
    VerifyAuthTokenResult:
      example:
        ok: true
        token: token
      properties:
        ok:
          type: boolean
        token:
          minLength: 1
          type: string
      required:
      - ok
      - token
      title: VerifyAuthTokenResult
      type: object
    Success:
      example:
        success:
          status_code: 100
          message: message
      properties:
        success:
          $ref: '#/components/schemas/Response'
      title: Success
      type: object
    ReleaseStatus:
      default: public
      enum:
      - public
      - private
      - hidden
      - all
      example: public
      title: ReleaseStatus
      type: string
    UnityPackageID:
      example: unp_52b12c39-4163-457d-a4a9-630e7aff1bff
      pattern: "(unp)_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
      title: UnityPackageID
      type: string
    UnityPackage:
      description: ""
      example:
        assetUrl: https://api.vrchat.cloud/api/1/file/file_cd0caa7b-69ba-4715-8dfe-7d667a9d2537/65/file
        assetUrlObject: {}
        assetVersion: 4
        created_at: 2020-09-10T06:13:27.777Z
        id: unp_52b12c39-4163-457d-a4a9-630e7aff1bff
        platform: standalonewindows
        pluginUrl: ""
        pluginUrlObject: {}
        unitySortNumber: 20180414000
        unityVersion: 2018.4.14f1
      properties:
        assetUrl:
          minLength: 1
          type: string
        assetUrlObject:
          type: object
        assetVersion:
          minimum: 0
          type: integer
        created_at:
          format: date-time
          type: string
        id:
          example: unp_52b12c39-4163-457d-a4a9-630e7aff1bff
          pattern: "(unp)_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          title: UnityPackageID
          type: string
        platform:
          description: "This can be `standalonewindows` or `android`, but can also\
            \ pretty much be any random Unity verison such as `2019.2.4-801-Release`\
            \ or `2019.2.2-772-Release` or even `unknownplatform`."
          example: standalonewindows
          title: Platform
          type: string
        pluginUrl:
          type: string
        pluginUrlObject:
          type: object
        unitySortNumber:
          format: int64
          minimum: 0
          type: integer
        unityVersion:
          default: 5.3.4p1
          example: 2018.4.12f1
          minLength: 1
          type: string
      required:
      - assetVersion
      - id
      - platform
      - unityVersion
      title: UnityPackage
      type: object
    Avatar:
      description: ""
      example:
        featured: false
        unityPackageUrl: unityPackageUrl
        assetUrlObject: "{}"
        created_at: 2000-01-23T04:56:07.000+00:00
        description: description
        authorId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        version: 68
        tags:
        - null
        - null
        unityPackageUrlObject:
          unityPackageUrl: unityPackageUrl
        thumbnailImageUrl: thumbnailImageUrl
        updated_at: 2000-01-23T04:56:07.000+00:00
        authorName: authorName
        imageUrl: imageUrl
        name: name
        releaseStatus: public
        id: avtr_912d66a4-4714-43b8-8407-7de2cafbf55b
        unityPackages:
        - assetUrl: https://api.vrchat.cloud/api/1/file/file_cd0caa7b-69ba-4715-8dfe-7d667a9d2537/65/file
          assetUrlObject: {}
          assetVersion: 4
          created_at: 2020-09-10T06:13:27.777Z
          id: unp_52b12c39-4163-457d-a4a9-630e7aff1bff
          platform: standalonewindows
          pluginUrl: ""
          pluginUrlObject: {}
          unitySortNumber: 20180414000
          unityVersion: 2018.4.14f1
        - assetUrl: https://api.vrchat.cloud/api/1/file/file_cd0caa7b-69ba-4715-8dfe-7d667a9d2537/65/file
          assetUrlObject: {}
          assetVersion: 4
          created_at: 2020-09-10T06:13:27.777Z
          id: unp_52b12c39-4163-457d-a4a9-630e7aff1bff
          platform: standalonewindows
          pluginUrl: ""
          pluginUrlObject: {}
          unitySortNumber: 20180414000
          unityVersion: 2018.4.14f1
        assetUrl: assetUrl
      properties:
        assetUrl:
          description: "Not present from general serach `/avatars`, only on specific\
            \ requests `/avatars/{avatarId}`."
          minLength: 1
          type: string
        assetUrlObject:
          description: |-
            Not present from general serach `/avatars`, only on specific requests `/avatars/{avatarId}`.
            **Deprecation:** `Object` has unknown usage/fields, and is always empty. Use normal `Url` field instead.
          type: object
        authorId:
          description: "A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`.\
            \ Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID\
            \ can never be changed."
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          title: UserID
          type: string
        authorName:
          minLength: 1
          type: string
        created_at:
          format: date-time
          type: string
        description:
          minLength: 0
          type: string
        featured:
          default: false
          type: boolean
        id:
          example: avtr_912d66a4-4714-43b8-8407-7de2cafbf55b
          pattern: "avtr_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          title: AvatarID
          type: string
        imageUrl:
          minLength: 1
          type: string
        name:
          minLength: 1
          type: string
        releaseStatus:
          $ref: '#/components/schemas/ReleaseStatus'
        tags:
          description: ' '
          items:
            $ref: '#/components/schemas/Tag'
          type: array
        thumbnailImageUrl:
          minLength: 1
          type: string
        unityPackageUrl:
          type: string
        unityPackageUrlObject:
          $ref: '#/components/schemas/Avatar_unityPackageUrlObject'
        unityPackages:
          items:
            $ref: '#/components/schemas/UnityPackage'
          minItems: 1
          type: array
          uniqueItems: true
        updated_at:
          format: date-time
          type: string
        version:
          default: 0
          example: 68
          minimum: 0
          type: integer
      required:
      - authorId
      - authorName
      - created_at
      - description
      - featured
      - id
      - imageUrl
      - name
      - releaseStatus
      - tags
      - thumbnailImageUrl
      - unityPackageUrl
      - unityPackageUrlObject
      - unityPackages
      - updated_at
      - version
      title: Avatar
      type: object
    SortOption:
      default: popularity
      enum:
      - popularity
      - heat
      - trust
      - shuffle
      - random
      - favorites
      - reportScore
      - reportCount
      - publicationDate
      - labsPublicationDate
      - created
      - _created_at
      - updated
      - _updated_at
      - order
      - relevance
      - magic
      - name
      example: popularity
      title: SortOption
      type: string
    OrderOption:
      default: descending
      enum:
      - ascending
      - descending
      example: descending
      title: OrderOption
      type: string
    CreateAvatarRequest:
      example:
        unityPackageUrl: unityPackageUrl
        imageUrl: imageUrl
        name: name
        releaseStatus: public
        description: description
        id: avtr_912d66a4-4714-43b8-8407-7de2cafbf55b
        version: 0.08008281904610115
        assetUrl: assetUrl
        tags:
        - null
        - null
      properties:
        assetUrl:
          type: string
        id:
          example: avtr_912d66a4-4714-43b8-8407-7de2cafbf55b
          pattern: "avtr_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          title: AvatarID
          type: string
        name:
          minLength: 1
          type: string
        description:
          minLength: 1
          type: string
        tags:
          description: ' '
          items:
            $ref: '#/components/schemas/Tag'
          type: array
        imageUrl:
          minLength: 1
          type: string
        releaseStatus:
          $ref: '#/components/schemas/ReleaseStatus'
        version:
          default: 1
          minimum: 0
          type: number
        unityPackageUrl:
          type: string
      required:
      - imageUrl
      - name
      title: CreateAvatarRequest
      type: object
    UpdateAvatarRequest:
      example:
        unityPackageUrl: unityPackageUrl
        imageUrl: imageUrl
        name: name
        releaseStatus: public
        description: description
        id: avtr_912d66a4-4714-43b8-8407-7de2cafbf55b
        version: 0.08008281904610115
        assetUrl: assetUrl
        tags:
        - null
        - null
      properties:
        assetUrl:
          type: string
        id:
          example: avtr_912d66a4-4714-43b8-8407-7de2cafbf55b
          pattern: "avtr_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          title: AvatarID
          type: string
        name:
          minLength: 1
          type: string
        description:
          minLength: 1
          type: string
        tags:
          description: ' '
          items:
            $ref: '#/components/schemas/Tag'
          type: array
        imageUrl:
          minLength: 1
          type: string
        releaseStatus:
          $ref: '#/components/schemas/ReleaseStatus'
        version:
          default: 1
          minimum: 0
          type: number
        unityPackageUrl:
          type: string
      title: UpdateAvatarRequest
      type: object
    TransactionID:
      example: txn_e5c72948-e735-4880-8245-24b2a41198b0
      pattern: "txn_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
      title: TransactionID
      type: string
    TransactionStatus:
      default: active
      enum:
      - active
      - failed
      - expired
      - chargeback
      title: TransactionStatus
      type: string
    SubscriptionPeriod:
      default: month
      enum:
      - hour
      - day
      - week
      - month
      - year
      title: SubscriptionPeriod
      type: string
    Subscription:
      description: ""
      example:
        id: vrchatplus-yearly
        steamItemId: "5000"
        amount: 9999
        description: VRChat Plus (Yearly)
        period: year
        tier: 5
      properties:
        id:
          minLength: 1
          type: string
        steamItemId:
          minLength: 1
          type: string
        amount:
          type: number
        description:
          type: string
        period:
          $ref: '#/components/schemas/SubscriptionPeriod'
        tier:
          type: number
      required:
      - amount
      - description
      - id
      - period
      - steamItemId
      - tier
      title: Subscription
      type: object
    TransactionSteamWalletInfo:
      description: ""
      example:
        state: ""
        country: SE
        currency: EUR
        status: Trusted
      properties:
        state:
          type: string
        country:
          default: US
          example: SE
          minLength: 2
          type: string
        currency:
          default: USD
          example: EUR
          minLength: 3
          type: string
        status:
          example: Trusted
          minLength: 1
          type: string
      required:
      - country
      - currency
      - state
      - status
      title: TransactionSteamWalletInfo
      type: object
    TransactionSteamInfo:
      description: ""
      example:
        steamId: steamId
        steamUrl: steamUrl
        orderId: orderId
        transId: transId
        walletInfo:
          state: ""
          country: SE
          currency: EUR
          status: Trusted
      properties:
        walletInfo:
          $ref: '#/components/schemas/TransactionSteamWalletInfo'
        steamId:
          description: Steam User ID
          minLength: 1
          type: string
        orderId:
          description: Steam Order ID
          minLength: 1
          type: string
        steamUrl:
          description: Empty
          type: string
        transId:
          description: "Steam Transaction ID, NOT the same as VRChat TransactionID"
          minLength: 1
          type: string
      required:
      - orderId
      - steamId
      - steamUrl
      - transId
      - walletInfo
      title: TransactionSteamInfo
      type: object
    TransactionAgreement:
      description: ""
      example:
        agreementId: "1234567890123456789"
        itemId: 5000
        status: Active
        period: year
        frequency: 1
        billingType: Steam
        startDate: "20220301"
        endDate: Infinite time value
        recurringAmt: 9999
        currency: USD
        timeCreated: "20201201"
        nextPayment: "20220301"
        lastPayment: NIL
        lastAmount: 0
        lastAmountVat: 0
        outstanding: 0
        failedAttempts: 0
      properties:
        agreementId:
          minLength: 1
          type: string
        itemId:
          type: number
        status:
          description: "This is NOT TransactionStatus, but whatever Steam return."
          minLength: 1
          type: string
        period:
          minLength: 1
          type: string
        frequency:
          type: number
        billingType:
          minLength: 1
          type: string
        startDate:
          minLength: 1
          type: string
        endDate:
          minLength: 1
          type: string
        recurringAmt:
          type: number
        currency:
          minLength: 1
          type: string
        timeCreated:
          minLength: 1
          type: string
        nextPayment:
          minLength: 1
          type: string
        lastPayment:
          minLength: 1
          type: string
        lastAmount:
          type: number
        lastAmountVat:
          type: number
        outstanding:
          type: number
        failedAttempts:
          type: number
      required:
      - agreementId
      - billingType
      - currency
      - endDate
      - failedAttempts
      - frequency
      - itemId
      - lastAmount
      - lastAmountVat
      - lastPayment
      - nextPayment
      - outstanding
      - period
      - recurringAmt
      - startDate
      - status
      - timeCreated
      title: TransactionAgreement
      type: object
    Transaction:
      description: ""
      example:
        agreement:
          agreementId: "1234567890123456789"
          itemId: 5000
          status: Active
          period: year
          frequency: 1
          billingType: Steam
          startDate: "20220301"
          endDate: Infinite time value
          recurringAmt: 9999
          currency: USD
          timeCreated: "20201201"
          nextPayment: "20220301"
          lastPayment: NIL
          lastAmount: 0
          lastAmountVat: 0
          outstanding: 0
          failedAttempts: 0
        updated_at: 2000-01-23T04:56:07.000+00:00
        sandbox: false
        created_at: 2000-01-23T04:56:07.000+00:00
        steam:
          steamId: steamId
          steamUrl: steamUrl
          orderId: orderId
          transId: transId
          walletInfo:
            state: ""
            country: SE
            currency: EUR
            status: Trusted
        id: txn_e5c72948-e735-4880-8245-24b2a41198b0
        subscription:
          id: vrchatplus-yearly
          steamItemId: "5000"
          amount: 9999
          description: VRChat Plus (Yearly)
          period: year
          tier: 5
        error: error
        status: null
      properties:
        id:
          example: txn_e5c72948-e735-4880-8245-24b2a41198b0
          pattern: "txn_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          title: TransactionID
          type: string
        status:
          $ref: '#/components/schemas/TransactionStatus'
        subscription:
          $ref: '#/components/schemas/Subscription'
        sandbox:
          default: false
          type: boolean
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
        steam:
          $ref: '#/components/schemas/TransactionSteamInfo'
        agreement:
          $ref: '#/components/schemas/TransactionAgreement'
        error:
          type: string
      required:
      - created_at
      - error
      - id
      - sandbox
      - status
      - subscription
      - updated_at
      title: Transaction
      type: object
    LicenseGroupID:
      example: lgrp_608513da-b213-4e15-80af-bd88c27f0979
      pattern: "lgrp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
      title: LicenseGroupID
      type: string
    UserSubscription:
      description: ""
      example:
        id: vrchatplus-yearly
        transactionId: txn_63231aa6-8b7a-49ff-a106-d5678f8318b1
        store: Steam
        steamItemId: "5000"
        amount: 9999
        description: VRChat Plus (Yearly)
        period: year
        tier: 5
        active: true
        status: active
        expires: 2022-03-04T00:00:00.000Z
        created_at: 2020-12-04T13:09:54.344Z
        updated_at: 2020-12-10T19:53:45.362Z
        licenseGroups:
        - lgrp_608513da-b213-4e15-80af-bd88c27f0979
        isGift: false
      properties:
        id:
          minLength: 1
          type: string
        transactionId:
          example: txn_e5c72948-e735-4880-8245-24b2a41198b0
          pattern: "txn_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          title: TransactionID
          type: string
        store:
          description: Which "Store" it came from. Right now only Stores are "Steam"
            and "Admin".
          minLength: 1
          type: string
        steamItemId:
          minLength: 1
          type: string
        amount:
          type: number
        description:
          type: string
        period:
          $ref: '#/components/schemas/SubscriptionPeriod'
        tier:
          type: number
        active:
          default: true
          type: boolean
        status:
          $ref: '#/components/schemas/TransactionStatus'
        expires:
          format: date-time
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
        licenseGroups:
          items:
            $ref: '#/components/schemas/LicenseGroupID'
          type: array
        isGift:
          default: false
          type: boolean
      required:
      - active
      - amount
      - created_at
      - description
      - expires
      - id
      - isGift
      - licenseGroups
      - period
      - status
      - store
      - tier
      - transactionId
      - updated_at
      title: UserSubscription
      type: object
    LicenseType:
      default: permission
      enum:
      - avatar
      - licenseGroup
      - permission
      - product
      example: permission
      title: LicenseType
      type: string
    LicenseAction:
      default: have
      enum:
      - wear
      - have
      example: have
      title: LicenseAction
      type: string
    License:
      properties:
        forId:
          description: "Either a AvatarID, LicenseGroupID, PermissionID or ProductID.\
            \ This depends on the `forType` field."
          minLength: 1
          pattern: "(avtr|lgrp|prms|prod)_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        forType:
          $ref: '#/components/schemas/LicenseType'
        forName:
          minLength: 1
          type: string
        forAction:
          $ref: '#/components/schemas/LicenseAction'
      required:
      - forAction
      - forId
      - forName
      - forType
      title: License
      type: object
    LicenseGroup:
      description: ""
      example:
        id: lgrp_608513da-b213-4e15-80af-bd88c27f0979
        name: vrcplus
        description: VRC+ benefits
        licenses:
        - forId: prms_1d9549db-d30a-48f3-a6b8-6741ce5a4283
          forType: permission
          forName: permission-user-icons
          forAction: have
        - forId: prms_76f33deb-dd5d-46b7-b79d-e1f8f0a9a1e0
          forType: permission
          forName: permission-supporter-tags
          forAction: have
        - forId: prms_0d9549db-d30a-48f3-a6b8-6741ce5a4283
          forType: permission
          forName: permission-invite-photos
          forAction: have
        - forId: prms_dc02c512-4c03-479c-8c6a-d9329c023baf
          forType: permission
          forName: permission-user-gallery
          forAction: have
        - forId: prms_153ac0b7-c2dd-43f9-96e3-c61fd2e85509
          forType: permission
          forName: permission-profile-pic-override
          forAction: have
      properties:
        id:
          example: lgrp_608513da-b213-4e15-80af-bd88c27f0979
          pattern: "lgrp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          title: LicenseGroupID
          type: string
        name:
          minLength: 1
          type: string
        description:
          type: string
        licenses:
          items:
            $ref: '#/components/schemas/License'
          type: array
      required:
      - description
      - id
      - licenses
      - name
      title: LicenseGroup
      type: object
    FavoriteID:
      example: fvrt_9568d189-8776-44a5-a8c8-defc981e44de
      pattern: "fvrt_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
      title: FavoriteID
      type: string
    FavoriteType:
      default: friend
      enum:
      - world
      - friend
      - avatar
      title: FavoriteType
      type: string
    Favorite:
      description: ""
      example:
        favoriteId: favoriteId
        id: fvrt_9568d189-8776-44a5-a8c8-defc981e44de
        type: null
        tags:
        - null
        - null
      properties:
        favoriteId:
          description: "MUST be either AvatarID, UserID or WorldID."
          type: string
        id:
          example: fvrt_9568d189-8776-44a5-a8c8-defc981e44de
          pattern: "fvrt_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          title: FavoriteID
          type: string
        tags:
          description: ' '
          items:
            $ref: '#/components/schemas/Tag'
          type: array
        type:
          $ref: '#/components/schemas/FavoriteType'
      required:
      - favoriteId
      - id
      - tags
      - type
      title: Favorite
      type: object
    AddFavoriteRequest:
      example:
        favoriteId: favoriteId
        type: null
        tags:
        - null
        - null
      properties:
        type:
          $ref: '#/components/schemas/FavoriteType'
        favoriteId:
          description: "Must be either AvatarID, WorldID or UserID."
          type: string
        tags:
          description: Tags indicate which group this favorite belongs to. Adding
            multiple groups makes it show up in all. Removing it from one in that
            case removes it from all.
          items:
            $ref: '#/components/schemas/Tag'
          type: array
      required:
      - favoriteId
      - tags
      - type
      title: AddFavoriteRequest
      type: object
    FavoriteGroupID:
      example: fvgrp_8a02a44b-dc3a-4a9a-bc77-77fa37996fc7
      pattern: "fvgrp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
      title: FavoriteGroupID
      type: string
    FavoriteGroupVisibility:
      default: private
      enum:
      - private
      - friends
      - public
      example: private
      title: FavoriteGroupVisibility
      type: string
    FavoriteGroup:
      description: ""
      example:
        visibility: private
        displayName: displayName
        ownerDisplayName: ownerDisplayName
        name: name
        id: fvgrp_8a02a44b-dc3a-4a9a-bc77-77fa37996fc7
        ownerId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        type: null
        tags:
        - null
        - null
      properties:
        displayName:
          minLength: 1
          type: string
        id:
          example: fvgrp_8a02a44b-dc3a-4a9a-bc77-77fa37996fc7
          pattern: "fvgrp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          title: FavoriteGroupID
          type: string
        name:
          minLength: 1
          type: string
        ownerDisplayName:
          minLength: 1
          type: string
        ownerId:
          description: "A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`.\
            \ Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID\
            \ can never be changed."
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          title: UserID
          type: string
        tags:
          description: ' '
          items:
            $ref: '#/components/schemas/Tag'
          type: array
        type:
          $ref: '#/components/schemas/FavoriteType'
        visibility:
          $ref: '#/components/schemas/FavoriteGroupVisibility'
      required:
      - displayName
      - id
      - name
      - ownerDisplayName
      - ownerId
      - tags
      - type
      - visibility
      title: FavoriteGroup
      type: object
    UpdateFavoriteGroupRequest:
      example:
        visibility: private
        displayName: displayName
        tags:
        - null
        - null
      properties:
        displayName:
          type: string
        visibility:
          $ref: '#/components/schemas/FavoriteGroupVisibility'
        tags:
          description: Tags on FavoriteGroups are believed to do nothing.
          items:
            $ref: '#/components/schemas/Tag'
          type: array
      title: UpdateFavoriteGroupRequest
      type: object
    FileID:
      example: file_ce35d830-e20a-4df0-a6d4-5aaef4508044
      pattern: "file_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
      title: FileID
      type: string
    MIMEType:
      default: image/jpeg
      enum:
      - image/jpeg
      - image/jpg
      - image/png
      - image/webp
      - image/gif
      - image/bmp
      - image/svgÔºãxml
      - image/tiff
      - application/x-avatar
      - application/x-world
      - application/gzip
      - application/x-rsync-signature
      - application/x-rsync-delta
      - application/octet-stream
      example: image/jpeg
      title: MIMEType
      type: string
    FileStatus:
      default: waiting
      enum:
      - waiting
      - complete
      - none
      - queued
      example: complete
      title: FileStatus
      type: string
    FileData:
      description: ""
      example:
        fileName: fileName
        sizeInBytes: 0
        uploadId: uploadId
        category: queued
        url: url
        md5: md5
        status: complete
      properties:
        category:
          default: queued
          enum:
          - multipart
          - queued
          - simple
          minLength: 1
          type: string
        fileName:
          minLength: 1
          type: string
        md5:
          minLength: 0
          type: string
        sizeInBytes:
          minimum: 0
          type: integer
        status:
          $ref: '#/components/schemas/FileStatus'
        uploadId:
          default: ""
          minLength: 0
          type: string
        url:
          minLength: 1
          type: string
      required:
      - category
      - fileName
      - md5
      - sizeInBytes
      - status
      - uploadId
      - url
      title: FileData
      type: object
    FileVersion:
      description: ""
      example:
        deleted: true
        file:
          fileName: fileName
          sizeInBytes: 0
          uploadId: uploadId
          category: queued
          url: url
          md5: md5
          status: complete
        signature:
          fileName: fileName
          sizeInBytes: 0
          uploadId: uploadId
          category: queued
          url: url
          md5: md5
          status: complete
        delta:
          fileName: fileName
          sizeInBytes: 0
          uploadId: uploadId
          category: queued
          url: url
          md5: md5
          status: complete
        created_at: 2000-01-23T04:56:07.000+00:00
        version: 0
        status: complete
      properties:
        created_at:
          format: date-time
          type: string
        deleted:
          default: true
          description: Usually only present if `true`
          type: boolean
        delta:
          $ref: '#/components/schemas/FileData'
        file:
          $ref: '#/components/schemas/FileData'
        signature:
          $ref: '#/components/schemas/FileData'
        status:
          $ref: '#/components/schemas/FileStatus'
        version:
          default: 0
          description: "Incremental version counter, can only be increased."
          minimum: 0
          type: integer
      required:
      - created_at
      - status
      - version
      title: FileVersion
      type: object
    File:
      description: ""
      example:
        extension: .unitypackage
        versions:
        - deleted: true
          file:
            fileName: fileName
            sizeInBytes: 0
            uploadId: uploadId
            category: queued
            url: url
            md5: md5
            status: complete
          signature:
            fileName: fileName
            sizeInBytes: 0
            uploadId: uploadId
            category: queued
            url: url
            md5: md5
            status: complete
          delta:
            fileName: fileName
            sizeInBytes: 0
            uploadId: uploadId
            category: queued
            url: url
            md5: md5
            status: complete
          created_at: 2000-01-23T04:56:07.000+00:00
          version: 0
          status: complete
        - deleted: true
          file:
            fileName: fileName
            sizeInBytes: 0
            uploadId: uploadId
            category: queued
            url: url
            md5: md5
            status: complete
          signature:
            fileName: fileName
            sizeInBytes: 0
            uploadId: uploadId
            category: queued
            url: url
            md5: md5
            status: complete
          delta:
            fileName: fileName
            sizeInBytes: 0
            uploadId: uploadId
            category: queued
            url: url
            md5: md5
            status: complete
          created_at: 2000-01-23T04:56:07.000+00:00
          version: 0
          status: complete
        name: Example File
        id: file_ce35d830-e20a-4df0-a6d4-5aaef4508044
        mimeType: image/jpeg
        ownerId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        tags:
        - null
        - null
      properties:
        extension:
          example: .unitypackage
          minLength: 1
          type: string
        id:
          example: file_ce35d830-e20a-4df0-a6d4-5aaef4508044
          pattern: "file_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          title: FileID
          type: string
        mimeType:
          $ref: '#/components/schemas/MIMEType'
        name:
          description: ""
          example: Example File
          minLength: 0
          type: string
        ownerId:
          description: "A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`.\
            \ Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID\
            \ can never be changed."
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          title: UserID
          type: string
        tags:
          description: ' '
          items:
            $ref: '#/components/schemas/Tag'
          type: array
        versions:
          description: ' '
          items:
            $ref: '#/components/schemas/FileVersion'
          minItems: 1
          type: array
          uniqueItems: true
      required:
      - extension
      - id
      - mimeType
      - name
      - ownerId
      - tags
      - versions
      title: File
      type: object
    CreateFileRequest:
      example:
        extension: extension
        name: name
        mimeType: image/jpeg
        tags:
        - null
        - null
      properties:
        name:
          minLength: 0
          type: string
        mimeType:
          $ref: '#/components/schemas/MIMEType'
        extension:
          minLength: 1
          type: string
        tags:
          description: ' '
          items:
            $ref: '#/components/schemas/Tag'
          type: array
      required:
      - extension
      - mimeType
      - name
      title: CreateFileRequest
      type: object
    CreateFileVersionRequest:
      example:
        signatureMd5: signatureMd5
        fileSizeInBytes: 6.027456183070403
        fileMd5: fileMd5
        signatureSizeInBytes: 0.8008281904610115
      properties:
        signatureMd5:
          minLength: 1
          type: string
        signatureSizeInBytes:
          type: number
        fileMd5:
          minLength: 1
          type: string
        fileSizeInBytes:
          type: number
      required:
      - signatureMd5
      - signatureSizeInBytes
      title: CreateFileVersionRequest
      type: object
    FinishFileDataUploadRequest:
      description: ""
      example:
        nextPartNumber: "0"
        etags:
        - etags
        - etags
        maxParts: "0"
      properties:
        etags:
          description: Array of ETags uploaded.
          items:
            type: string
          minItems: 1
          type: array
          uniqueItems: true
        nextPartNumber:
          default: "0"
          deprecated: true
          description: "Always a zero in string form, despite how many parts uploaded."
          example: "0"
          maxLength: 1
          minLength: 1
          pattern: "0"
          type: string
        maxParts:
          default: "0"
          deprecated: true
          description: "Always a zero in string form, despite how many parts uploaded."
          example: "0"
          maxLength: 1
          minLength: 1
          pattern: "0"
          type: string
      required:
      - maxParts
      - nextPartNumber
      title: FinishFileDataUploadRequest
      type: object
    FileUploadURL:
      description: ""
      example:
        url: url
      properties:
        url:
          description: ""
          minLength: 1
          type: string
      required:
      - url
      title: FileUploadURL
      type: object
    FileVersionUploadStatus:
      description: ""
      example:
        fileName: Avatar-MyAvatar-Un.file_00000000-0000-0000-0000-000000000000.1.unitypackage
        nextPartNumber: 0
        uploadId: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx_xxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxx_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx..xxxxxxxxxxxxxxxxxxxxxxx
        parts:
        - "{}"
        - "{}"
        maxParts: 1000
        etags:
        - "{}"
        - "{}"
      properties:
        uploadId:
          example: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx_xxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxx_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx..xxxxxxxxxxxxxxxxxxxxxxx
          minLength: 1
          type: string
        fileName:
          example: Avatar-MyAvatar-Un.file_00000000-0000-0000-0000-000000000000.1.unitypackage
          minLength: 1
          type: string
        nextPartNumber:
          example: 0
          minimum: 0
          type: number
        maxParts:
          example: 1000
          minimum: 1
          type: number
        parts:
          items:
            type: object
          minItems: 0
          type: array
        etags:
          description: Unknown
          items:
            type: object
          minItems: 0
          type: array
      required:
      - etags
      - fileName
      - maxParts
      - nextPartNumber
      - parts
      - uploadId
      title: FileVersionUploadStatus
      type: object
    LimitedUser:
      description: ""
      example:
        currentAvatarThumbnailImageUrl: https://api.vrchat.cloud/api/1/image/file_aae83ed9-d42d-4d72-9f4b-9f1e41ed17e1/1/256
        last_platform: standalonewindows
        currentAvatarImageUrl: https://api.vrchat.cloud/api/1/file/file_ae46d521-7281-4b38-b365-804b32a1d6a7/1/file
        displayName: displayName
        bio: bio
        developerType: null
        tags:
        - null
        - null
        friendKey: friendKey
        statusDescription: statusDescription
        fallbackAvatar: avtr_912d66a4-4714-43b8-8407-7de2cafbf55b
        isFriend: true
        profilePicOverride: profilePicOverride
        location: location
        id: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        userIcon: userIcon
        status: null
        username: username
      properties:
        bio:
          type: string
        currentAvatarImageUrl:
          description: "When profilePicOverride is not empty, use it instead."
          example: https://api.vrchat.cloud/api/1/file/file_ae46d521-7281-4b38-b365-804b32a1d6a7/1/file
          title: CurrentAvatarImageUrl
          type: string
        currentAvatarThumbnailImageUrl:
          description: "When profilePicOverride is not empty, use it instead."
          example: https://api.vrchat.cloud/api/1/image/file_aae83ed9-d42d-4d72-9f4b-9f1e41ed17e1/1/256
          title: CurrentAvatarThumbnailImageUrl
          type: string
        developerType:
          $ref: '#/components/schemas/DeveloperType'
        displayName:
          type: string
        fallbackAvatar:
          example: avtr_912d66a4-4714-43b8-8407-7de2cafbf55b
          pattern: "avtr_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          title: AvatarID
          type: string
        id:
          description: "A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`.\
            \ Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID\
            \ can never be changed."
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          title: UserID
          type: string
        isFriend:
          type: boolean
        last_platform:
          description: "This can be `standalonewindows` or `android`, but can also\
            \ pretty much be any random Unity verison such as `2019.2.4-801-Release`\
            \ or `2019.2.2-772-Release` or even `unknownplatform`."
          example: standalonewindows
          title: Platform
          type: string
        profilePicOverride:
          type: string
        status:
          $ref: '#/components/schemas/UserStatus'
        statusDescription:
          type: string
        tags:
          description: <- Always empty.
          items:
            $ref: '#/components/schemas/Tag'
          type: array
        userIcon:
          type: string
        username:
          deprecated: true
          description: "-| **DEPRECATED:** VRChat API no longer return usernames of\
            \ other users. [See issue by Tupper for more information](https://github.com/pypy-vrc/VRCX/issues/429)."
          type: string
        location:
          type: string
        friendKey:
          type: string
      required:
      - currentAvatarImageUrl
      - currentAvatarThumbnailImageUrl
      - developerType
      - displayName
      - fallbackAvatar
      - id
      - isFriend
      - last_platform
      - profilePicOverride
      - status
      - statusDescription
      - tags
      - userIcon
      title: LimitedUser
      type: object
    NotificationType:
      default: friendRequest
      enum:
      - friendRequest
      - invite
      - inviteResponse
      - requestInvite
      - requestInviteResponse
      - votetokick
      title: NotificationType
      type: string
    Notification:
      description: ""
      example:
        senderUserId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        created_at: 2000-01-23T04:56:07.000+00:00
        details: "OneOf: {}, NotificationDetailInvite, NotificationDetailInviteResponse,\
          \ NotificationDetailRequestInvite, NotificationDetailRequestInviteResponse,\
          \ NotificationDetailVoteToKick"
        id: id
        message: This is a generated invite to VRChat Hub
        type: null
        seen: false
        senderUsername: senderUsername
        receiverUserId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
      properties:
        created_at:
          format: date-time
          type: string
        details:
          default: "{}"
          description: "**NOTICE:** This is not a JSON object when received from the\
            \ REST API, but it is when received from the Websocket API. When received\
            \ from the REST API, this is a json **encoded** object, meaning you have\
            \ to json-de-encode to get the NotificationDetail object depending on\
            \ the NotificationType."
          example: "OneOf: {}, NotificationDetailInvite, NotificationDetailInviteResponse,\
            \ NotificationDetailRequestInvite, NotificationDetailRequestInviteResponse,\
            \ NotificationDetailVoteToKick"
          type: string
        id:
          minLength: 1
          type: string
        message:
          description: ""
          example: This is a generated invite to VRChat Hub
          type: string
        seen:
          default: false
          description: Not included in notification objects received from the Websocket
            API
          type: boolean
        receiverUserId:
          description: "A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`.\
            \ Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID\
            \ can never be changed."
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          title: UserID
          type: string
        senderUserId:
          description: "A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`.\
            \ Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID\
            \ can never be changed."
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          title: UserID
          type: string
        senderUsername:
          deprecated: true
          description: "-| **DEPRECATED:** VRChat API no longer return usernames of\
            \ other users. [See issue by Tupper for more information](https://github.com/pypy-vrc/VRCX/issues/429)."
          minLength: 1
          type: string
        type:
          $ref: '#/components/schemas/NotificationType'
      required:
      - created_at
      - details
      - id
      - message
      - senderUserId
      - type
      title: Notification
      type: object
    FriendStatus:
      example:
        isFriend: false
        outgoingRequest: false
        incomingRequest: false
      properties:
        incomingRequest:
          default: false
          type: boolean
        isFriend:
          default: false
          type: boolean
        outgoingRequest:
          default: false
          type: boolean
      required:
      - incomingRequest
      - isFriend
      - outgoingRequest
      title: FriendStatus
      type: object
    GroupJoinState:
      default: open
      enum:
      - closed
      - invite
      - request
      - open
      title: GroupJoinState
      type: string
    GroupPrivacy:
      default: default
      enum:
      - default
      - private
      title: GroupPrivacy
      type: string
    GroupRoleTemplate:
      default: default
      enum:
      - default
      - managedFree
      - managedInvite
      - managedRequest
      title: GroupRoleTemplate
      type: string
    CreateGroupRequest:
      example:
        iconId: iconId
        joinState: null
        bannerId: bannerId
        roleTemplate: null
        name: name
        description: description
        privacy: null
        shortCode: shortCode
      properties:
        name:
          maxLength: 64
          minLength: 3
          type: string
        shortCode:
          maxLength: 6
          minLength: 3
          type: string
        description:
          maxLength: 250
          minLength: 0
          type: string
        joinState:
          $ref: '#/components/schemas/GroupJoinState'
        iconId:
          nullable: true
          type: string
        bannerId:
          nullable: true
          type: string
        privacy:
          $ref: '#/components/schemas/GroupPrivacy'
        roleTemplate:
          $ref: '#/components/schemas/GroupRoleTemplate'
      required:
      - name
      - roleTemplate
      - shortCode
      title: CreateGroupRequest
      type: object
    GroupShortCode:
      example: ABC123
      pattern: "^[A-Z0-9]{3,6}$"
      title: GroupShortCode
      type: string
    GroupDiscriminator:
      example: "1234"
      pattern: "^[0-9]{4}$"
      title: GroupDiscriminator
      type: string
    GroupGalleryID:
      example: ggal_a03a4b55-4ca6-4490-9519-40ba6351a233
      pattern: "ggal_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
      title: GroupGalleryID
      type: string
    GroupRoleID:
      example: grol_459d3911-f672-44bc-b84d-e54ffe7960fe
      pattern: "grol_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
      title: GroupRoleID
      type: string
    GroupGallery:
      example:
        roleIdsToAutoApprove:
        - grol_459d3911-f672-44bc-b84d-e54ffe7960fe
        - grol_459d3911-f672-44bc-b84d-e54ffe7960fe
        createdAt: 2000-01-23T04:56:07.000+00:00
        roleIdsToView:
        - grol_459d3911-f672-44bc-b84d-e54ffe7960fe
        - grol_459d3911-f672-44bc-b84d-e54ffe7960fe
        roleIdsToManage:
        - grol_459d3911-f672-44bc-b84d-e54ffe7960fe
        - grol_459d3911-f672-44bc-b84d-e54ffe7960fe
        name: Example Gallery
        description: Example Description
        id: ggal_a03a4b55-4ca6-4490-9519-40ba6351a233
        roleIdsToSubmit:
        - grol_459d3911-f672-44bc-b84d-e54ffe7960fe
        - grol_459d3911-f672-44bc-b84d-e54ffe7960fe
        membersOnly: false
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          example: ggal_a03a4b55-4ca6-4490-9519-40ba6351a233
          pattern: "ggal_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          title: GroupGalleryID
          type: string
        name:
          description: Name of the gallery.
          example: Example Gallery
          minLength: 1
          type: string
        description:
          description: Description of the gallery.
          example: Example Description
          minLength: 0
          type: string
        membersOnly:
          default: false
          description: Whether the gallery is members only.
          example: false
          type: boolean
        roleIdsToView:
          description: ' '
          items:
            $ref: '#/components/schemas/GroupRoleID'
          nullable: true
          type: array
        roleIdsToSubmit:
          description: ' '
          items:
            $ref: '#/components/schemas/GroupRoleID'
          nullable: true
          type: array
        roleIdsToAutoApprove:
          description: ' '
          items:
            $ref: '#/components/schemas/GroupRoleID'
          nullable: true
          type: array
        roleIdsToManage:
          description: ' '
          items:
            $ref: '#/components/schemas/GroupRoleID'
          nullable: true
          type: array
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      title: GroupMember
      type: object
    GroupMemberStatus:
      default: inactive
      enum:
      - inactive
      - member
      - requested
      - invited
      example: member
      type: string
    GroupMemberID:
      example: gmem_95cdb3b4-4643-4eb6-bdab-46a4e1e5ce37
      pattern: "gmem_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
      title: GroupMemberID
      type: string
    GroupMyMember:
      example:
        visibility: visible
        joinedAt: 2000-01-23T04:56:07.000+00:00
        groupId: grp_71a7ff59-112c-4e78-a990-c7cc650776e5
        managerNotes: managerNotes
        membershipStatus: member
        userId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        has2FA: false
        roleIds:
        - grol_459d3911-f672-44bc-b84d-e54ffe7960fe
        - grol_459d3911-f672-44bc-b84d-e54ffe7960fe
        bannedAt: bannedAt
        isRepresenting: false
        isSubscribedToAnnouncements: true
        permissions:
        - group-instance-join
        - group-instance-join
        id: gmem_95cdb3b4-4643-4eb6-bdab-46a4e1e5ce37
      properties:
        id:
          example: gmem_95cdb3b4-4643-4eb6-bdab-46a4e1e5ce37
          pattern: "gmem_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          title: GroupMemberID
          type: string
        groupId:
          example: grp_71a7ff59-112c-4e78-a990-c7cc650776e5
          pattern: "grp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          title: GroupID
          type: string
        userId:
          description: "A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`.\
            \ Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID\
            \ can never be changed."
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          title: UserID
          type: string
        roleIds:
          items:
            $ref: '#/components/schemas/GroupRoleID'
          type: array
        managerNotes:
          type: string
        membershipStatus:
          example: member
          type: string
        isSubscribedToAnnouncements:
          default: true
          type: boolean
        visibility:
          example: visible
          type: string
        isRepresenting:
          default: false
          type: boolean
        joinedAt:
          format: date-time
          type: string
        bannedAt:
          nullable: true
          type: string
        has2FA:
          default: false
          type: boolean
        permissions:
          items:
            example: group-instance-join
            type: string
          type: array
      title: GroupMyMember
      type: object
    GroupRole:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        requiresPurchase: false
        permissions:
        - permissions
        - permissions
        groupId: grp_71a7ff59-112c-4e78-a990-c7cc650776e5
        name: name
        isSelfAssignable: false
        description: description
        id: grol_459d3911-f672-44bc-b84d-e54ffe7960fe
        requiresTwoFactor: false
        isManagementRole: false
        order: 1
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          example: grol_459d3911-f672-44bc-b84d-e54ffe7960fe
          pattern: "grol_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          title: GroupRoleID
          type: string
        groupId:
          example: grp_71a7ff59-112c-4e78-a990-c7cc650776e5
          pattern: "grp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          title: GroupID
          type: string
        name:
          type: string
        description:
          type: string
        isSelfAssignable:
          default: false
          type: boolean
        permissions:
          items:
            type: string
          type: array
        isManagementRole:
          default: false
          type: boolean
        requiresTwoFactor:
          default: false
          type: boolean
        requiresPurchase:
          default: false
          type: boolean
        order:
          type: integer
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      title: GroupRole
      type: object
    Group:
      example:
        bannerId: bannerId
        isVerified: false
        roles:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          requiresPurchase: false
          permissions:
          - permissions
          - permissions
          groupId: grp_71a7ff59-112c-4e78-a990-c7cc650776e5
          name: name
          isSelfAssignable: false
          description: description
          id: grol_459d3911-f672-44bc-b84d-e54ffe7960fe
          requiresTwoFactor: false
          isManagementRole: false
          order: 1
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - createdAt: 2000-01-23T04:56:07.000+00:00
          requiresPurchase: false
          permissions:
          - permissions
          - permissions
          groupId: grp_71a7ff59-112c-4e78-a990-c7cc650776e5
          name: name
          isSelfAssignable: false
          description: description
          id: grol_459d3911-f672-44bc-b84d-e54ffe7960fe
          requiresTwoFactor: false
          isManagementRole: false
          order: 1
          updatedAt: 2000-01-23T04:56:07.000+00:00
        bannerUrl: bannerUrl
        description: description
        privacy: null
        rules: rules
        ownerId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        createdAt: 2000-01-23T04:56:07.000+00:00
        links:
        - links
        - links
        id: grp_71a7ff59-112c-4e78-a990-c7cc650776e5
        iconUrl: iconUrl
        shortCode: ABC123
        onlineMemberCount: 6
        iconId: iconId
        languages:
        - languages
        - languages
        joinState: null
        memberCount: 0
        membershipStatus: member
        memberCountSyncedAt: 2000-01-23T04:56:07.000+00:00
        discriminator: "1234"
        tags:
        - null
        - null
        name: name
        galleries:
        - roleIdsToAutoApprove:
          - grol_459d3911-f672-44bc-b84d-e54ffe7960fe
          - grol_459d3911-f672-44bc-b84d-e54ffe7960fe
          createdAt: 2000-01-23T04:56:07.000+00:00
          roleIdsToView:
          - grol_459d3911-f672-44bc-b84d-e54ffe7960fe
          - grol_459d3911-f672-44bc-b84d-e54ffe7960fe
          roleIdsToManage:
          - grol_459d3911-f672-44bc-b84d-e54ffe7960fe
          - grol_459d3911-f672-44bc-b84d-e54ffe7960fe
          name: Example Gallery
          description: Example Description
          id: ggal_a03a4b55-4ca6-4490-9519-40ba6351a233
          roleIdsToSubmit:
          - grol_459d3911-f672-44bc-b84d-e54ffe7960fe
          - grol_459d3911-f672-44bc-b84d-e54ffe7960fe
          membersOnly: false
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - roleIdsToAutoApprove:
          - grol_459d3911-f672-44bc-b84d-e54ffe7960fe
          - grol_459d3911-f672-44bc-b84d-e54ffe7960fe
          createdAt: 2000-01-23T04:56:07.000+00:00
          roleIdsToView:
          - grol_459d3911-f672-44bc-b84d-e54ffe7960fe
          - grol_459d3911-f672-44bc-b84d-e54ffe7960fe
          roleIdsToManage:
          - grol_459d3911-f672-44bc-b84d-e54ffe7960fe
          - grol_459d3911-f672-44bc-b84d-e54ffe7960fe
          name: Example Gallery
          description: Example Description
          id: ggal_a03a4b55-4ca6-4490-9519-40ba6351a233
          roleIdsToSubmit:
          - grol_459d3911-f672-44bc-b84d-e54ffe7960fe
          - grol_459d3911-f672-44bc-b84d-e54ffe7960fe
          membersOnly: false
          updatedAt: 2000-01-23T04:56:07.000+00:00
        myMember:
          visibility: visible
          joinedAt: 2000-01-23T04:56:07.000+00:00
          groupId: grp_71a7ff59-112c-4e78-a990-c7cc650776e5
          managerNotes: managerNotes
          membershipStatus: member
          userId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          has2FA: false
          roleIds:
          - grol_459d3911-f672-44bc-b84d-e54ffe7960fe
          - grol_459d3911-f672-44bc-b84d-e54ffe7960fe
          bannedAt: bannedAt
          isRepresenting: false
          isSubscribedToAnnouncements: true
          permissions:
          - group-instance-join
          - group-instance-join
          id: gmem_95cdb3b4-4643-4eb6-bdab-46a4e1e5ce37
      properties:
        id:
          example: grp_71a7ff59-112c-4e78-a990-c7cc650776e5
          pattern: "grp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          title: GroupID
          type: string
        name:
          type: string
        shortCode:
          example: ABC123
          pattern: "^[A-Z0-9]{3,6}$"
          title: GroupShortCode
          type: string
        discriminator:
          example: "1234"
          pattern: "^[0-9]{4}$"
          title: GroupDiscriminator
          type: string
        description:
          type: string
        iconUrl:
          nullable: true
          type: string
        bannerUrl:
          nullable: true
          type: string
        privacy:
          $ref: '#/components/schemas/GroupPrivacy'
        ownerId:
          description: "A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`.\
            \ Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID\
            \ can never be changed."
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          title: UserID
          type: string
        rules:
          nullable: true
          type: string
        links:
          items:
            type: string
          type: array
        languages:
          items:
            type: string
          type: array
        iconId:
          nullable: true
          type: string
        bannerId:
          nullable: true
          type: string
        memberCount:
          type: integer
        memberCountSyncedAt:
          format: date-time
          type: string
        isVerified:
          default: false
          type: boolean
        joinState:
          $ref: '#/components/schemas/GroupJoinState'
        tags:
          description: ' '
          items:
            $ref: '#/components/schemas/Tag'
          type: array
        galleries:
          description: ' '
          items:
            $ref: '#/components/schemas/GroupGallery'
          type: array
        createdAt:
          format: date-time
          type: string
        onlineMemberCount:
          type: integer
        membershipStatus:
          $ref: '#/components/schemas/GroupMemberStatus'
        myMember:
          $ref: '#/components/schemas/GroupMyMember'
        roles:
          description: Only returned if ?includeRoles=true is specified.
          items:
            $ref: '#/components/schemas/GroupRole'
          nullable: true
          type: array
      title: Group
      type: object
    UpdateGroupRequest:
      example:
        iconId: iconId
        joinState: null
        languages:
        - languages
        - languages
        - languages
        bannerId: bannerId
        name: name
        description: description
        links:
        - links
        - links
        - links
        rules: rules
        shortCode: shortCode
        tags:
        - null
        - null
      properties:
        name:
          maxLength: 64
          minLength: 3
          type: string
        shortCode:
          maxLength: 6
          minLength: 3
          type: string
        description:
          maxLength: 250
          minLength: 0
          type: string
        joinState:
          $ref: '#/components/schemas/GroupJoinState'
        iconId:
          nullable: true
          type: string
        bannerId:
          nullable: true
          type: string
        languages:
          description: 3 letter language code
          items:
            maxLength: 3
            type: string
          maxItems: 3
          type: array
        links:
          items:
            type: string
          maxItems: 3
          type: array
        rules:
          type: string
        tags:
          description: ' '
          items:
            $ref: '#/components/schemas/Tag'
          type: array
      title: UpdateGroupRequest
      type: object
    GroupAnnouncementID:
      example: gpos_71a7ff59-112c-4e78-a990-c7cc650776e5
      pattern: "gpos_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
      title: GroupAnnouncementID
      type: string
    GroupAnnouncement:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        imageId: file_ce35d830-e20a-4df0-a6d4-5aaef4508044
        groupId: grp_71a7ff59-112c-4e78-a990-c7cc650776e5
        imageUrl: imageUrl
        id: gpos_71a7ff59-112c-4e78-a990-c7cc650776e5
        text: text
        authorId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        title: title
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          example: gpos_71a7ff59-112c-4e78-a990-c7cc650776e5
          pattern: "gpos_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          title: GroupAnnouncementID
          type: string
        groupId:
          example: grp_71a7ff59-112c-4e78-a990-c7cc650776e5
          pattern: "grp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          title: GroupID
          type: string
        authorId:
          description: "A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`.\
            \ Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID\
            \ can never be changed."
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          title: UserID
          type: string
        title:
          nullable: true
          type: string
        text:
          nullable: true
          type: string
        imageId:
          example: file_ce35d830-e20a-4df0-a6d4-5aaef4508044
          pattern: "file_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          title: FileID
          type: string
        imageUrl:
          nullable: true
          type: string
        createdAt:
          format: date-time
          nullable: true
          type: string
        updatedAt:
          format: date-time
          nullable: true
          type: string
      title: GroupAnnouncement
      type: object
    CreateGroupAnnouncementRequest:
      example:
        imageId: file_ce35d830-e20a-4df0-a6d4-5aaef4508044
        text: Come join us for the event!
        sendNotification: false
        title: Event is starting soon!
      properties:
        title:
          description: Announcement title
          example: Event is starting soon!
          minLength: 1
          type: string
        text:
          description: Announcement text
          example: Come join us for the event!
          minLength: 1
          type: string
        imageId:
          example: file_ce35d830-e20a-4df0-a6d4-5aaef4508044
          pattern: "file_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          title: FileID
          type: string
        sendNotification:
          default: false
          description: Send notification to group members.
          example: false
          type: boolean
      required:
      - favoriteId
      - title
      title: CreateGroupAnnouncementRequest
      type: object
    GroupAuditLogID:
      example: gaud_71a7ff59-112c-4e78-a990-c7cc650776e5
      pattern: "gaud_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
      title: GroupAuditLogID
      type: string
    GroupAuditLogEntry:
      example:
        actorId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        targetId: targetId
        data:
          description:
            old: My exciting new group.  It's pretty nifty!
            new: My exciting new group. It's pretty nifty!
          joinState:
            old: closed
            new: request
        actorDisplayname: actorDisplayname
        groupId: grp_71a7ff59-112c-4e78-a990-c7cc650776e5
        created_at: 2000-01-23T04:56:07.000+00:00
        description: Group role updated
        id: gaud_71a7ff59-112c-4e78-a990-c7cc650776e5
        eventType: group.role.update
      properties:
        id:
          example: gaud_71a7ff59-112c-4e78-a990-c7cc650776e5
          pattern: "gaud_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          title: GroupAuditLogID
          type: string
        created_at:
          format: date-time
          type: string
        groupId:
          example: grp_71a7ff59-112c-4e78-a990-c7cc650776e5
          pattern: "grp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          title: GroupID
          type: string
        actorId:
          description: "A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`.\
            \ Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID\
            \ can never be changed."
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          title: UserID
          type: string
        actorDisplayname:
          type: string
        targetId:
          description: "Typically GroupID or GroupRoleID, but could be other types\
            \ of IDs."
          type: string
        eventType:
          default: group.update
          description: "The type of event that occurred. This is a string that is\
            \ prefixed with the type of object that the event occurred on. For example,\
            \ a group role update event would be prefixed with `group.role`."
          example: group.role.update
          type: string
        description:
          description: A human-readable description of the event.
          example: Group role updated
          type: string
        data:
          description: The data associated with the event. The format of this data
            is dependent on the event type.
          example:
            description:
              old: My exciting new group.  It's pretty nifty!
              new: My exciting new group. It's pretty nifty!
            joinState:
              old: closed
              new: request
          type: object
      title: GroupAuditLogEntry
      type: object
    PaginatedGroupAuditLogEntryList:
      example:
        hasNext: true
        totalCount: 0
        results:
        - actorId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          targetId: targetId
          data:
            description:
              old: My exciting new group.  It's pretty nifty!
              new: My exciting new group. It's pretty nifty!
            joinState:
              old: closed
              new: request
          actorDisplayname: actorDisplayname
          groupId: grp_71a7ff59-112c-4e78-a990-c7cc650776e5
          created_at: 2000-01-23T04:56:07.000+00:00
          description: Group role updated
          id: gaud_71a7ff59-112c-4e78-a990-c7cc650776e5
          eventType: group.role.update
        - actorId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          targetId: targetId
          data:
            description:
              old: My exciting new group.  It's pretty nifty!
              new: My exciting new group. It's pretty nifty!
            joinState:
              old: closed
              new: request
          actorDisplayname: actorDisplayname
          groupId: grp_71a7ff59-112c-4e78-a990-c7cc650776e5
          created_at: 2000-01-23T04:56:07.000+00:00
          description: Group role updated
          id: gaud_71a7ff59-112c-4e78-a990-c7cc650776e5
          eventType: group.role.update
      properties:
        results:
          description: ' '
          items:
            $ref: '#/components/schemas/GroupAuditLogEntry'
          type: array
        totalCount:
          description: The total number of results that the query would return if
            there were no pagination.
          type: integer
        hasNext:
          description: Whether there are more results after this page.
          type: boolean
      title: PaginatedGroupAuditLogEntryList
      type: object
    GroupMemberLimitedUser:
      description: "Only visible via the /groups/:groupId/members endpoint, **not**\
        \ when fetching a specific user."
      example:
        displayName: displayName
        id: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        iconUrl: iconUrl
        thumbnailUrl: thumbnailUrl
      properties:
        id:
          description: "A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`.\
            \ Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID\
            \ can never be changed."
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          title: UserID
          type: string
        displayName:
          type: string
        thumbnailUrl:
          type: string
        iconUrl:
          type: string
      title: GroupMemberLimitedUser
      type: object
    GroupMember:
      example:
        visibility: visible
        joinedAt: 2000-01-23T04:56:07.000+00:00
        groupId: grp_71a7ff59-112c-4e78-a990-c7cc650776e5
        managerNotes: managerNotes
        membershipStatus: member
        userId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        createdAt: 2000-01-23T04:56:07.000+00:00
        roleIds:
        - grol_459d3911-f672-44bc-b84d-e54ffe7960fe
        - grol_459d3911-f672-44bc-b84d-e54ffe7960fe
        bannedAt: 2000-01-23T04:56:07.000+00:00
        isRepresenting: true
        isSubscribedToAnnouncements: false
        id: gmem_95cdb3b4-4643-4eb6-bdab-46a4e1e5ce37
        user:
          displayName: displayName
          id: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          iconUrl: iconUrl
          thumbnailUrl: thumbnailUrl
      properties:
        id:
          example: gmem_95cdb3b4-4643-4eb6-bdab-46a4e1e5ce37
          pattern: "gmem_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          title: GroupMemberID
          type: string
        groupId:
          example: grp_71a7ff59-112c-4e78-a990-c7cc650776e5
          pattern: "grp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          title: GroupID
          type: string
        userId:
          description: "A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`.\
            \ Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID\
            \ can never be changed."
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          title: UserID
          type: string
        isRepresenting:
          default: false
          description: Whether the user is representing the group. This makes the
            group show up above the name tag in-game.
          example: true
          type: boolean
        user:
          $ref: '#/components/schemas/GroupMemberLimitedUser'
        roleIds:
          items:
            $ref: '#/components/schemas/GroupRoleID'
          type: array
        joinedAt:
          format: date-time
          type: string
        membershipStatus:
          example: member
          type: string
        visibility:
          example: visible
          type: string
        isSubscribedToAnnouncements:
          default: false
          type: boolean
        createdAt:
          description: "Only visible via the /groups/:groupId/members endpoint, **not**\
            \ when fetching a specific user."
          format: date-time
          nullable: true
          type: string
        bannedAt:
          description: "Only visible via the /groups/:groupId/members endpoint, **not**\
            \ when fetching a specific user."
          format: date-time
          nullable: true
          type: string
        managerNotes:
          description: "Only visible via the /groups/:groupId/members endpoint, **not**\
            \ when fetching a specific user."
          nullable: true
          type: string
      title: GroupMember
      type: object
    BanGroupMemberRequest:
      example:
        userId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
      properties:
        userId:
          description: "A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`.\
            \ Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID\
            \ can never be changed."
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          title: UserID
          type: string
      required:
      - userId
      title: BanGroupMemberRequest
      type: object
    CreateGroupGalleryRequest:
      example:
        roleIdsToAutoApprove:
        - grol_459d3911-f672-44bc-b84d-e54ffe7960fe
        - grol_459d3911-f672-44bc-b84d-e54ffe7960fe
        roleIdsToView:
        - grol_459d3911-f672-44bc-b84d-e54ffe7960fe
        - grol_459d3911-f672-44bc-b84d-e54ffe7960fe
        roleIdsToManage:
        - grol_459d3911-f672-44bc-b84d-e54ffe7960fe
        - grol_459d3911-f672-44bc-b84d-e54ffe7960fe
        name: Example Gallery
        description: Example Description
        roleIdsToSubmit:
        - grol_459d3911-f672-44bc-b84d-e54ffe7960fe
        - grol_459d3911-f672-44bc-b84d-e54ffe7960fe
        membersOnly: false
      properties:
        name:
          description: Name of the gallery.
          example: Example Gallery
          minLength: 1
          type: string
        description:
          description: Description of the gallery.
          example: Example Description
          minLength: 0
          type: string
        membersOnly:
          default: false
          description: Whether the gallery is members only.
          example: false
          type: boolean
        roleIdsToView:
          description: ' '
          items:
            $ref: '#/components/schemas/GroupRoleID'
          nullable: true
          type: array
        roleIdsToSubmit:
          description: ' '
          items:
            $ref: '#/components/schemas/GroupRoleID'
          nullable: true
          type: array
        roleIdsToAutoApprove:
          description: ' '
          items:
            $ref: '#/components/schemas/GroupRoleID'
          nullable: true
          type: array
        roleIdsToManage:
          description: ' '
          items:
            $ref: '#/components/schemas/GroupRoleID'
          nullable: true
          type: array
      required:
      - name
      title: CreateGroupGalleryRequest
      type: object
    GroupGalleryImageID:
      example: ggim_71a7ff59-112c-4e78-a990-c7cc650776e5
      pattern: "ggim_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
      title: GroupGalleryImageID
      type: string
    GroupGalleryImage:
      example:
        submittedByUserId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        createdAt: 2000-01-23T04:56:07.000+00:00
        approved: true
        galleryId: ggal_a03a4b55-4ca6-4490-9519-40ba6351a233
        groupId: grp_71a7ff59-112c-4e78-a990-c7cc650776e5
        imageUrl: https://api.vrchat.cloud/api/1/file/file_ce35d830-e20a-4df0-a6d4-5aaef4508044/1/file
        id: ggim_71a7ff59-112c-4e78-a990-c7cc650776e5
        approvedAt: 2000-01-23T04:56:07.000+00:00
        approvedByUserId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        fileId: file_ce35d830-e20a-4df0-a6d4-5aaef4508044
      properties:
        id:
          example: ggim_71a7ff59-112c-4e78-a990-c7cc650776e5
          pattern: "ggim_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          title: GroupGalleryImageID
          type: string
        groupId:
          example: grp_71a7ff59-112c-4e78-a990-c7cc650776e5
          pattern: "grp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          title: GroupID
          type: string
        galleryId:
          example: ggal_a03a4b55-4ca6-4490-9519-40ba6351a233
          pattern: "ggal_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          title: GroupGalleryID
          type: string
        fileId:
          example: file_ce35d830-e20a-4df0-a6d4-5aaef4508044
          pattern: "file_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          title: FileID
          type: string
        imageUrl:
          example: https://api.vrchat.cloud/api/1/file/file_ce35d830-e20a-4df0-a6d4-5aaef4508044/1/file
          format: uri
          type: string
        createdAt:
          format: date-time
          type: string
        submittedByUserId:
          description: "A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`.\
            \ Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID\
            \ can never be changed."
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          title: UserID
          type: string
        approved:
          default: false
          example: true
          type: boolean
        approvedByUserId:
          description: "A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`.\
            \ Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID\
            \ can never be changed."
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          title: UserID
          type: string
        approvedAt:
          format: date-time
          type: string
      title: GroupGalleryImage
      type: object
    UpdateGroupGalleryRequest:
      example:
        roleIdsToAutoApprove:
        - grol_459d3911-f672-44bc-b84d-e54ffe7960fe
        - grol_459d3911-f672-44bc-b84d-e54ffe7960fe
        roleIdsToView:
        - grol_459d3911-f672-44bc-b84d-e54ffe7960fe
        - grol_459d3911-f672-44bc-b84d-e54ffe7960fe
        roleIdsToManage:
        - grol_459d3911-f672-44bc-b84d-e54ffe7960fe
        - grol_459d3911-f672-44bc-b84d-e54ffe7960fe
        name: Example Gallery
        description: Example Description
        roleIdsToSubmit:
        - grol_459d3911-f672-44bc-b84d-e54ffe7960fe
        - grol_459d3911-f672-44bc-b84d-e54ffe7960fe
        membersOnly: false
      properties:
        name:
          description: Name of the gallery.
          example: Example Gallery
          minLength: 1
          type: string
        description:
          description: Description of the gallery.
          example: Example Description
          minLength: 0
          type: string
        membersOnly:
          default: false
          description: Whether the gallery is members only.
          example: false
          type: boolean
        roleIdsToView:
          description: ' '
          items:
            $ref: '#/components/schemas/GroupRoleID'
          nullable: true
          type: array
        roleIdsToSubmit:
          description: ' '
          items:
            $ref: '#/components/schemas/GroupRoleID'
          nullable: true
          type: array
        roleIdsToAutoApprove:
          description: ' '
          items:
            $ref: '#/components/schemas/GroupRoleID'
          nullable: true
          type: array
        roleIdsToManage:
          description: ' '
          items:
            $ref: '#/components/schemas/GroupRoleID'
          nullable: true
          type: array
      title: UpdateGroupGalleryRequest
      type: object
    AddGroupGalleryImageRequest:
      example:
        fileId: file_ce35d830-e20a-4df0-a6d4-5aaef4508044
      properties:
        fileId:
          example: file_ce35d830-e20a-4df0-a6d4-5aaef4508044
          pattern: "file_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          title: FileID
          type: string
      required:
      - fileId
      title: AddGroupGalleryImageRequest
      type: object
    CreateGroupInviteRequest:
      example:
        userId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        confirmOverrideBlock: true
      properties:
        userId:
          description: "A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`.\
            \ Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID\
            \ can never be changed."
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          title: UserID
          type: string
        confirmOverrideBlock:
          default: true
          type: boolean
      required:
      - userId
      title: CreateGroupInviteRequest
      type: object
    GroupLimitedMember:
      example:
        isRepresenting: false
        groupId: grp_71a7ff59-112c-4e78-a990-c7cc650776e5
        id: gmem_95cdb3b4-4643-4eb6-bdab-46a4e1e5ce37
        userId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
      properties:
        id:
          example: gmem_95cdb3b4-4643-4eb6-bdab-46a4e1e5ce37
          pattern: "gmem_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          title: GroupMemberID
          type: string
        groupId:
          example: grp_71a7ff59-112c-4e78-a990-c7cc650776e5
          pattern: "grp_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          title: GroupID
          type: string
        userId:
          description: "A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`.\
            \ Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID\
            \ can never be changed."
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          title: UserID
          type: string
        isRepresenting:
          default: false
          type: boolean
      title: GroupLimitedMember
      type: object
    GroupUserVisibility:
      enum:
      - visible
      - hidden
      - friends
      example: visible
      title: GroupUserVisibility
      type: string
    UpdateGroupMemberRequest:
      example:
        visibility: visible
        isSubscribedToAnnouncements: true
        managerNotes: managerNotes
      properties:
        visibility:
          $ref: '#/components/schemas/GroupUserVisibility'
        isSubscribedToAnnouncements:
          type: boolean
        managerNotes:
          type: string
      title: UpdateGroupMemberRequest
      type: object
    GroupRoleIDList:
      description: ' '
      items:
        $ref: '#/components/schemas/GroupRoleID'
      title: GroupRoleIDList
      type: array
    GroupPermission:
      description: A permission that can be granted to a role in a group.
      example:
        help: "Allows role to edit group details (name, description, joinState, initialRoles,\
          \ etc)."
        allowedToAdd: true
        displayName: Manage Group Data
        name: group-data-manage
        isManagementPermission: true
      properties:
        name:
          description: The name of the permission.
          example: group-data-manage
          type: string
        displayName:
          description: The display name of the permission.
          example: Manage Group Data
          type: string
        help:
          description: Human-readable description of the permission.
          example: "Allows role to edit group details (name, description, joinState,\
            \ initialRoles, etc)."
          type: string
        isManagementPermission:
          default: false
          description: Whether this permission is a "management" permission.
          example: true
          type: boolean
        allowedToAdd:
          default: false
          description: Whether the user is allowed to add this permission to a role.
          example: true
          type: boolean
      title: GroupPermission
      type: object
    RespondGroupJoinRequest:
      example:
        action: action
      properties:
        action:
          type: string
      title: RespondGroupJoinRequest
      type: object
    CreateGroupRoleRequest:
      example:
        permissions:
        - permissions
        - permissions
        name: name
        isSelfAssignable: false
        description: description
        id: id
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        isSelfAssignable:
          default: false
          type: boolean
        permissions:
          items:
            type: string
          type: array
      title: CreateGroupRequest
      type: object
    UpdateGroupRoleRequest:
      example:
        permissions:
        - permissions
        - permissions
        name: name
        isSelfAssignable: false
        description: description
        order: 0
      properties:
        name:
          type: string
        description:
          type: string
        isSelfAssignable:
          default: false
          type: boolean
        permissions:
          items:
            type: string
          type: array
        order:
          type: integer
      title: UpdateGroupRoleRequest
      type: object
    InstanceID:
      description: InstanceID can be "offline" on User profiles if you are not friends
        with that user and "private" if you are friends and user is in private instance.
      example: wrld_ba913a96-fac4-4048-a062-9aa5db092812:12345~hidden(usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469)~region(eu)~nonce(27e8414a-59a0-4f3d-af1f-f27557eb49a2)
      pattern: "(private|offline|(wrld|wld)_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}:(\\\
        d+)(~region\\(([\\w]+)\\))?(~([\\w]+)\\(usr_([\\w-]+)\\)((\\~canRequestInvite)?)(~region\\\
        (([\\w].+)\\))?~nonce\\((.+)\\))?)"
      title: InstanceID
      type: string
    InviteRequest:
      example:
        messageSlot: 0
        instanceId: wrld_ba913a96-fac4-4048-a062-9aa5db092812:12345~hidden(usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469)~region(eu)~nonce(27e8414a-59a0-4f3d-af1f-f27557eb49a2)
      properties:
        instanceId:
          description: InstanceID can be "offline" on User profiles if you are not
            friends with that user and "private" if you are friends and user is in
            private instance.
          example: wrld_ba913a96-fac4-4048-a062-9aa5db092812:12345~hidden(usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469)~region(eu)~nonce(27e8414a-59a0-4f3d-af1f-f27557eb49a2)
          pattern: "(private|offline|(wrld|wld)_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}:(\\\
            d+)(~region\\(([\\w]+)\\))?(~([\\w]+)\\(usr_([\\w-]+)\\)((\\~canRequestInvite)?)(~region\\\
            (([\\w].+)\\))?~nonce\\((.+)\\))?)"
          title: InstanceID
          type: string
        messageSlot:
          maximum: 11
          minimum: 0
          type: integer
      required:
      - instanceId
      title: InviteRequest
      type: object
    SentNotification:
      description: ""
      example:
        senderUserId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        created_at: 2000-01-23T04:56:07.000+00:00
        details: "OneOf: {}, NotificationDetailInvite, NotificationDetailInviteResponse,\
          \ NotificationDetailRequestInvite, NotificationDetailRequestInviteResponse,\
          \ NotificationDetailVoteToKick"
        recieverUserId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        id: id
        message: This is a generated invite to VRChat Hub
        type: null
        senderUsername: senderUsername
      properties:
        created_at:
          format: date-time
          type: string
        details:
          default: "{}"
          description: "**NOTICE:** This is not a JSON object, this is a json **encoded**\
            \ object, meaning you have to json-de-encode to get the NotificationDetail\
            \ object depending on the NotificationType."
          example: "OneOf: {}, NotificationDetailInvite, NotificationDetailInviteResponse,\
            \ NotificationDetailRequestInvite, NotificationDetailRequestInviteResponse,\
            \ NotificationDetailVoteToKick"
          type: string
        id:
          minLength: 1
          type: string
        message:
          description: ""
          example: This is a generated invite to VRChat Hub
          type: string
        recieverUserId:
          description: "A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`.\
            \ Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID\
            \ can never be changed."
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          title: UserID
          type: string
        senderUserId:
          description: "A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`.\
            \ Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID\
            \ can never be changed."
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          title: UserID
          type: string
        senderUsername:
          deprecated: true
          description: "-| **DEPRECATED:** VRChat API no longer return usernames of\
            \ other users. [See issue by Tupper for more information](https://github.com/pypy-vrc/VRCX/issues/429)."
          minLength: 1
          type: string
        type:
          $ref: '#/components/schemas/NotificationType'
      required:
      - created_at
      - details
      - id
      - message
      - recieverUserId
      - senderUserId
      - type
      title: SentNotification
      type: object
    RequestInviteRequest:
      example:
        messageSlot: 0
      properties:
        messageSlot:
          maximum: 11
          minimum: 0
          type: integer
      required:
      - instanceId
      title: RequestInviteRequest
      type: object
    InviteResponse:
      example:
        responseSlot: 0
      properties:
        responseSlot:
          maximum: 11
          minimum: 0
          type: integer
      required:
      - responseSlot
      title: InviteResponse
      type: object
    InviteMessageType:
      default: message
      description: ""
      enum:
      - message
      - response
      - request
      - requestResponse
      title: InviteMessageType
      type: string
    InviteMessageID:
      example: invm_24a1c14d-5e24-48e5-90e3-c3f712420ffa
      pattern: "(default|invm_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})"
      title: InviteMessageID
      type: string
    InviteMessage:
      description: ""
      example:
        remainingCooldownMinutes: 0
        messageType: null
        id: invm_24a1c14d-5e24-48e5-90e3-c3f712420ffa
        slot: 6
        canBeUpdated: true
        message: message
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        canBeUpdated:
          default: true
          type: boolean
        id:
          example: invm_24a1c14d-5e24-48e5-90e3-c3f712420ffa
          pattern: "(default|invm_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})"
          title: InviteMessageID
          type: string
        message:
          minLength: 1
          type: string
        messageType:
          $ref: '#/components/schemas/InviteMessageType'
        remainingCooldownMinutes:
          default: 0
          description: "Changes to 60 when updated, although probably server-side\
            \ configurable."
          minimum: 0
          type: integer
        slot:
          maximum: 11
          minimum: 0
          type: integer
        updatedAt:
          format: date-time
          type: string
      required:
      - canBeUpdated
      - id
      - message
      - messageType
      - remainingCooldownMinutes
      - slot
      - updatedAt
      title: InviteMessage
      type: object
    UpdateInviteMessageRequest:
      example:
        message: message
      properties:
        message:
          type: string
      required:
      - message
      title: UpdateInviteMessageRequest
      type: object
    Region:
      default: us
      description: API/Photon region.
      enum:
      - us
      - use
      - usw
      - eu
      - jp
      - unknown
      example: eu
      title: Region
      type: string
    InstancePlatforms:
      additionalProperties: false
      example:
        android: 1
        standalonewindows: 5
      properties:
        android:
          example: 1
          minimum: 0
          type: integer
        standalonewindows:
          example: 5
          minimum: 0
          type: integer
      required:
      - android
      - standalonewindows
      title: InstancePlatforms
      type: object
    InstanceType:
      description: ""
      enum:
      - public
      - hidden
      - friends
      - private
      example: hidden
      title: InstanceType
      type: string
    Instance:
      description: |-
        * `hidden` field is only present if InstanceType is `hidden` aka "Friends+", and is instance creator.
        * `friends` field is only present if InstanceType is `friends` aka "Friends", and is instance creator.
        * `private` field is only present if InstanceType is `private` aka "Invite" or "Invite+", and is instance creator.
      example:
        private: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        hidden: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        secureName: 7eavhhng
        worldId: wrld_ba913a96-fac4-4048-a062-9aa5db092812
        n_users: 6
        photonRegion: eu
        active: true
        clientNumber: clientNumber
        ownerId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        type: hidden
        friends: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        capacity: 8
        platforms:
          android: 1
          standalonewindows: 5
        tags:
        - show_social_rank
        - language_eng
        - language_jpn
        canRequestInvite: true
        instanceId: 12345~hidden(usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469)~region(eu)~nonce(27e8414a-59a0-4f3d-af1f-f27557eb49a2)
        permanent: false
        name: "12345"
        location: wrld_ba913a96-fac4-4048-a062-9aa5db092812:12345~hidden(usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469)~region(eu)~nonce(27e8414a-59a0-4f3d-af1f-f27557eb49a2)
        id: wrld_ba913a96-fac4-4048-a062-9aa5db092812:12345~hidden(usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469)~region(eu)~nonce(27e8414a-59a0-4f3d-af1f-f27557eb49a2)
        region: eu
        shortName: 02u7yz8j
        full: false
      properties:
        active:
          default: true
          example: true
          type: boolean
        canRequestInvite:
          default: true
          example: true
          type: boolean
        capacity:
          example: 8
          minimum: 0
          type: integer
        clientNumber:
          deprecated: true
          description: Always returns "unknown".
          minLength: 1
          type: string
        full:
          default: false
          type: boolean
        id:
          description: InstanceID can be "offline" on User profiles if you are not
            friends with that user and "private" if you are friends and user is in
            private instance.
          example: wrld_ba913a96-fac4-4048-a062-9aa5db092812:12345~hidden(usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469)~region(eu)~nonce(27e8414a-59a0-4f3d-af1f-f27557eb49a2)
          pattern: "(private|offline|(wrld|wld)_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}:(\\\
            d+)(~region\\(([\\w]+)\\))?(~([\\w]+)\\(usr_([\\w-]+)\\)((\\~canRequestInvite)?)(~region\\\
            (([\\w].+)\\))?~nonce\\((.+)\\))?)"
          title: InstanceID
          type: string
        instanceId:
          example: 12345~hidden(usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469)~region(eu)~nonce(27e8414a-59a0-4f3d-af1f-f27557eb49a2)
          minLength: 1
          type: string
        location:
          description: InstanceID can be "offline" on User profiles if you are not
            friends with that user and "private" if you are friends and user is in
            private instance.
          example: wrld_ba913a96-fac4-4048-a062-9aa5db092812:12345~hidden(usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469)~region(eu)~nonce(27e8414a-59a0-4f3d-af1f-f27557eb49a2)
          pattern: "(private|offline|(wrld|wld)_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}:(\\\
            d+)(~region\\(([\\w]+)\\))?(~([\\w]+)\\(usr_([\\w-]+)\\)((\\~canRequestInvite)?)(~region\\\
            (([\\w].+)\\))?~nonce\\((.+)\\))?)"
          title: InstanceID
          type: string
        n_users:
          example: 6
          minimum: 0
          type: integer
        name:
          example: "12345"
          minLength: 1
          type: string
        ownerId:
          description: "A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`.\
            \ Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID\
            \ can never be changed."
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          title: UserID
          type: string
        permanent:
          default: false
          type: boolean
        photonRegion:
          $ref: '#/components/schemas/Region'
        platforms:
          $ref: '#/components/schemas/InstancePlatforms'
        region:
          $ref: '#/components/schemas/Region'
        secureName:
          example: 7eavhhng
          minLength: 1
          type: string
        shortName:
          example: 02u7yz8j
          minLength: 1
          type: string
        tags:
          description: 'The tags array on Instances usually contain the language tags
            of the people in the instance. '
          example:
          - show_social_rank
          - language_eng
          - language_jpn
          items:
            $ref: '#/components/schemas/Tag'
          type: array
        type:
          $ref: '#/components/schemas/InstanceType'
        worldId:
          description: WorldID be "offline" on User profiles if you are not friends
            with that user.
          example: wrld_ba913a96-fac4-4048-a062-9aa5db092812
          pattern: "(^$|offline|(wrld|wld)_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})"
          title: WorldID
          type: string
        hidden:
          description: "A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`.\
            \ Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID\
            \ can never be changed."
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          title: UserID
          type: string
        friends:
          description: "A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`.\
            \ Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID\
            \ can never be changed."
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          title: UserID
          type: string
        private:
          description: "A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`.\
            \ Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID\
            \ can never be changed."
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          title: UserID
          type: string
      required:
      - active
      - canRequestInvite
      - capacity
      - clientNumber
      - full
      - id
      - instanceId
      - location
      - n_users
      - name
      - permanent
      - photonRegion
      - platforms
      - region
      - secureName
      - tags
      - type
      - worldId
      title: Instance
      type: object
    InstanceShortNameResponse:
      example:
        secureName: 7eavhhng
        shortName: 02u7yz8j
      properties:
        secureName:
          example: 7eavhhng
          minLength: 1
          type: string
        shortName:
          example: 02u7yz8j
          minLength: 1
          type: string
      required:
      - secureName
      title: InstanceShortNameResponse
      type: object
    PermissionID:
      example: prms_804ba021-9f47-4e25-9847-1f42fdb2e6ff
      pattern: "prms_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
      title: PermissionID
      type: string
    Permission:
      description: ""
      example:
        data:
          maxFavoriteGroups:
            avatar: 4
          maxFavoritesPerGroup:
            avatar: 25
        id: prms_804ba021-9f47-4e25-9847-1f42fdb2e6ff
        name: permission-extra-favorites-avatar-groups
        ownerId: usr_17f19d1e-fd48-493b-a8ad-807a3d8bdd1b
      properties:
        id:
          example: prms_804ba021-9f47-4e25-9847-1f42fdb2e6ff
          pattern: "prms_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          title: PermissionID
          type: string
        name:
          example: permission-invite-photos
          minLength: 1
          type: string
        ownerId:
          description: "A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`.\
            \ Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID\
            \ can never be changed."
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          title: UserID
          type: string
        data:
          type: object
      required:
      - id
      - name
      - ownerId
      title: Permission
      type: object
    PlayerModerationID:
      example: pmod_25551a8d-6f5d-430a-88d3-9c0ce08b5244
      pattern: "pmod_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
      title: PlayerModerationID
      type: string
    PlayerModerationType:
      default: unmute
      enum:
      - mute
      - unmute
      - block
      - unblock
      - interactOn
      - interactOff
      example: unmute
      title: PlayerModerationType
      type: string
    PlayerModeration:
      example:
        sourceDisplayName: sourceDisplayName
        created: 2000-01-23T04:56:07.000+00:00
        targetDisplayName: targetDisplayName
        targetUserId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        id: pmod_25551a8d-6f5d-430a-88d3-9c0ce08b5244
        sourceUserId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        type: unmute
      properties:
        created:
          format: date-time
          type: string
        id:
          example: pmod_25551a8d-6f5d-430a-88d3-9c0ce08b5244
          pattern: "pmod_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          title: PlayerModerationID
          type: string
        sourceDisplayName:
          minLength: 1
          type: string
        sourceUserId:
          description: "A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`.\
            \ Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID\
            \ can never be changed."
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          title: UserID
          type: string
        targetDisplayName:
          minLength: 1
          type: string
        targetUserId:
          description: "A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`.\
            \ Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID\
            \ can never be changed."
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          title: UserID
          type: string
        type:
          $ref: '#/components/schemas/PlayerModerationType'
      required:
      - created
      - id
      - sourceDisplayName
      - sourceUserId
      - targetDisplayName
      - targetUserId
      - type
      title: PlayerModeration
      type: object
    ModerateUserRequest:
      additionalProperties: false
      example:
        moderated: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        type: unmute
      properties:
        moderated:
          description: "A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`.\
            \ Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID\
            \ can never be changed."
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          title: UserID
          type: string
        type:
          $ref: '#/components/schemas/PlayerModerationType'
      required:
      - moderated
      - type
      title: ModerateUserRequest
      type: object
    APIConfigAnnouncement:
      deprecated: true
      description: Public Announcement
      properties:
        name:
          description: Announcement name
          minLength: 1
          type: string
        text:
          description: Announcement text
          minLength: 1
          type: string
      required:
      - name
      - text
      title: APIConfigAnnouncement
      type: object
    DeploymentGroup:
      default: blue
      description: |-
        Used to identify which API deployment cluster is currently responding.

        `blue` and `green` are used by Production.
        `grape`and `cherry` are used during Development.

        [Blue Green Deployment by Martin Fowler](https://martinfowler.com/bliki/BlueGreenDeployment.html)
      enum:
      - blue
      - green
      - grape
      - cherry
      title: DeploymentGroup
      type: string
    APIConfigDownloadURLList:
      additionalProperties: false
      description: Download links for various development assets.
      properties:
        sdk2:
          deprecated: true
          description: Download link for legacy SDK2
          minLength: 1
          type: string
        sdk3-avatars:
          description: Download link for SDK3 for Avatars
          minLength: 1
          type: string
        sdk3-worlds:
          description: Download link for SDK3 for Worlds
          minLength: 1
          type: string
        vcc:
          description: Download link for the Creator Companion
          minLength: 1
          type: string
        bootstrap:
          description: Download link for ???
          minLength: 1
          type: string
      required:
      - bootstrap
      - sdk2
      - sdk3-avatars
      - sdk3-worlds
      - vcc
      title: APIConfigDownloadURLList
      type: object
    DynamicContentRow:
      example:
        sortHeading: sortHeading
        sortOrder: sortOrder
        name: name
        index: 0
        tag: tag
        type: avatar
        platform: platform
        sortOwnership: sortOwnership
      properties:
        index:
          minimum: 0
          type: integer
        name:
          minLength: 1
          type: string
        platform:
          description: "Usually \"ThisPlatformSupported\", but can also be other values\
            \ such as \"all\" or platform specific identifiers."
          minLength: 1
          type: string
        sortHeading:
          minLength: 1
          type: string
        sortOrder:
          minLength: 1
          type: string
        sortOwnership:
          minLength: 1
          type: string
        tag:
          description: Tag to filter content for this row.
          minLength: 1
          type: string
        type:
          description: Type is not present if it is a world.
          example: avatar
          type: string
      required:
      - name
      - platform
      - sortHeading
      - sortOrder
      - sortOwnership
      title: DynamicContentRow
      type: object
    APIConfigEvents:
      properties:
        distanceClose:
          description: Unknown
          type: integer
        distanceFactor:
          description: Unknown
          type: integer
        distanceFar:
          description: Unknown
          type: integer
        groupDistance:
          description: Unknown
          type: integer
        maximumBunchSize:
          description: Unknown
          type: integer
        notVisibleFactor:
          description: Unknown
          type: integer
        playerOrderBucketSize:
          description: Unknown
          type: integer
        playerOrderFactor:
          description: Unknown
          type: integer
        slowUpdateFactorThreshold:
          description: Unknown
          type: integer
        viewSegmentLength:
          description: Unknown
          type: integer
      required:
      - distanceClose
      - distanceFactor
      - distanceFar
      - groupDistance
      - maximumBunchSize
      - notVisibleFactor
      - playerOrderBucketSize
      - playerOrderFactor
      - slowUpdateFactorThreshold
      - viewSegmentLength
      title: APIConfigEvents
      type: object
    APIConfig:
      description: ""
      example:
        VoiceEnableDegradation: false
        VoiceEnableReceiverLimiting: true
        address: "1062 Folsom St., Suite 200, San Francisco, CA, 94103"
        announcements:
        - name: 220121a_modified_clients
          text: |-
            As part of our continued commitment to improve
            safety and awareness, we want to remind you that
            <color='red'>modified clients of any kind are not allowed
            on VRChat</color>, for any reason, and are prohibited
            by the Terms of Service.

            There is no such thing as an 'approved'
            modification, nor do we permit the use of
            any modification, for any purpose, ever.
            <color='red'>Using them can and will result in your
            account being banned!</color>

            In addition, modified clients are the single
            greatest source of <color='red'>compromised and stolen
            accounts</color>-- so please, do not use them!
        appName: VrChat
        buildVersionTag: master-build-2021-09-23-edith-x-clickbaitcloud
        clientApiKey: JlE5Jldo5Jibnk5O5hTx6XVqsJu4WJ26
        clientBPSCeiling: 18432
        clientDisconnectTimeout: 30000
        clientReservedPlayerBPS: 7168
        clientSentCountAllowance: 15
        contactEmail: hello@vrchat.com
        copyrightEmail: copyright@vrchat.com
        currentTOSVersion: 7
        defaultAvatar: avtr_c38a1615-5bf5-42b4-84eb-a8b6c37cbd11
        deploymentGroup: blue
        devAppVersionStandalone: 0.12.0p3
        devDownloadLinkWindows: www.vrchat.net
        devSdkUrl: https://vrchat.com/home/download
        devSdkVersion: 2020.09.25.00.08
        devServerVersionStandalone: dev_server_01
        dis-countdown: 2021-01-01T01:01:01.000Z
        disableAvatarCopying: false
        disableAvatarGating: false
        disableCommunityLabs: false
        disableCommunityLabsPromotion: false
        disableEmail: false
        disableEventStream: false
        disableFeedbackGating: false
        disableFrontendBuilds: false
        disableHello: false
        disableOculusSubs: false
        disableRegistration: false
        disableSteamNetworking: true
        disableTwoFactorAuth: false
        disableUdon: false
        disableUpgradeAccount: false
        downloadLinkWindows: https://www.oculus.com/experiences/rift/997678176960598/
        downloadUrls:
          sdk2: https://files.vrchat.cloud/sdk/VRCSDK2-2021.09.03.09.25_Public.unitypackage
          sdk3-avatars: https://files.vrchat.cloud/sdk/VRCSDK3-AVATAR-2021.09.03.09.25_Public.unitypackage
          sdk3-worlds: https://files.vrchat.cloud/sdk/VRCSDK3-WORLD-2021.09.03.09.25_Public.unitypackage
          vcc: https://vrcpm.vrchat.cloud/vcc/Builds/2.1.1/VRChat_CreatorCompanion_Setup_2.1.1.exe
          bootstrap: https://github.com/vrchat/packages/releases/download/resolvers/latest-resolver.unitypackage
        dynamicWorldRows:
        - index: 1
          name: Hot
          platform: ThisPlatformSupported
          sortHeading: heat
          sortOrder: descending
          sortOwnership: any
        - index: 2
          name: "World Jam: Obstacle Course"
          platform: ThisPlatformSupported
          sortHeading: order
          sortOrder: ascending
          sortOwnership: any
          tag: admin_jam_obstacle
        - index: 3
          name: Exercise
          platform: Any
          sortHeading: shuffle
          sortOrder: descending
          sortOwnership: any
          tag: admin_exercise_row
        - index: 4
          name: Spotlight
          platform: ThisPlatformSupported
          sortHeading: updated
          sortOrder: descending
          sortOwnership: any
          tag: admin_community_spotlight
        - index: 5
          name: Community Labs
          platform: ThisPlatformSupported
          sortHeading: labs
          sortOrder: descending
          sortOwnership: any
        - index: 6
          name: Active Cross Platform
          platform: AllPlatforms
          sortHeading: active
          sortOrder: descending
          sortOwnership: any
        - index: 7
          name: Active My Platform
          platform: ThisPlatformOnly
          sortHeading: active
          sortOrder: descending
          sortOwnership: any
        - index: 8
          name: Random
          platform: ThisPlatformSupported
          sortHeading: shuffle
          sortOrder: descending
          sortOwnership: any
        - index: 9
          name: Avatar Worlds
          platform: ThisPlatformSupported
          sortHeading: heat
          sortOrder: descending
          sortOwnership: any
          tag: author_tag_avatar
        - index: 10
          name: Games
          platform: ThisPlatformSupported
          sortHeading: heat
          sortOrder: descending
          sortOwnership: any
          tag: author_tag_game
        - index: 11
          name: Updated Recently
          platform: ThisPlatformSupported
          sortHeading: updated
          sortOrder: descending
          sortOwnership: any
        - index: 12
          name: New
          platform: ThisPlatformSupported
          sortHeading: publication
          sortOrder: descending
          sortOwnership: any
        - index: 13
          name: Recent
          platform: ThisPlatformSupported
          sortHeading: recent
          sortOrder: descending
          sortOwnership: any
        - index: 14
          name: Mine
          platform: any
          sortHeading: updated
          sortOrder: descending
          sortOwnership: mine
        - index: 15
          name: Classics
          platform: ThisPlatformSupported
          sortHeading: trending
          sortOrder: descending
          sortOwnership: any
        events:
          distanceClose: 2
          distanceFactor: 100
          distanceFar: 80
          groupDistance: 3
          maximumBunchSize: 247
          notVisibleFactor: 100
          playerOrderBucketSize: 5
          playerOrderFactor: 55
          slowUpdateFactorThreshold: 25
          viewSegmentLength: 5
        gearDemoRoomId: "2282253502"
        homeWorldId: wrld_4432ea9b-729c-46e3-8eaf-846aa0a37fdd
        homepageRedirectTarget: https://hello.vrchat.com
        hubWorldId: wrld_ba913a96-fac4-4048-a062-9aa5db092812
        jobsEmail: jobs@vrchat.com
        messageOfTheDay: hello world
        moderationEmail: moderation@vrchat.com
        moderationQueryPeriod: 60
        notAllowedToSelectAvatarInPrivateWorldMessage: "For security reasons, you're\
          \ not yet allowed to select avatars in private worlds or upload content.\
          \ Please continue to enjoy VRChat and we'll message you when you've been\
          \ unlocked. Thanks and have fun!"
        plugin: no_kick_unlisted
        releaseAppVersionStandalone: 0.12.0p3
        releaseSdkUrl: http://files.vrchat.cloud/sdk/VRCSDK-2019.09.18.12.05_Public.unitypackage
        releaseSdkVersion: VRCSDK-2019.09.18.12.05_Public
        releaseServerVersionStandalone: public_server_01
        sdkDeveloperFaqUrl: https://docs.vrchat.com/docs/frequently-asked-questions#section-why-can-t-i-upload-content-yet-
        sdkDiscordUrl: https://discord.gg/vrchat
        sdkNotAllowedToPublishMessage: "Welcome the VRChat SDK!\r\n\r\nBefore you\
          \ can upload avatars or worlds to VRChat, you'll need to spend more time\
          \ enjoying the app. We do this for security reasons, and so you can learn\
          \ more about us.\r\n\r\nWhen you get the ability to upload, we will notify\
          \ you via email and in VRChat. For now, you can learn and test on your own\
          \ device.\r\n\r\nTo get started, check out the resources below.\r\n\r\n\
          Thank you for your patience, we can't wait to see what you'll build!"
        sdkUnityVersion: 2019.4.30f1
        serverName: prod-api-blue-house-fsm
        supportEmail: support@vrchat.com
        timeOutWorldId: wrld_5b89c79e-c340-4510-be1b-476e9fcdedcc
        tutorialWorldId: wld_7d3d25ec-663e-406e-96a3-e2c4fc0d8104
        updateRateMsMaximum: 1000
        updateRateMsMinimum: 50
        updateRateMsNormal: 200
        updateRateMsUdonManual: 50
        uploadAnalysisPercent: 1
        urlList:
        - drive.google.com
        - facebook.com
        - www.facebook.com
        - nicovideo.jp
        - www.nicovideo.jp
        - live.nicovideo.jp
        - live2.nicovideo.jp
        - game.nicovideo.jp
        - soundcloud.com
        - tiktok.com
        - www.tiktok.com
        - twitch.tv
        - www.twitch.tv
        - vimeo.com
        - player.vimeo.com
        - vrchat.cloud
        - youku.com
        - v.youku.com
        - youtube.com
        - www.youtube.com
        - youtu.be
        - assets.vrchat.com
        - www.v-market.work
        - vket6.v-market.work
        - mall.v-market.work
        - cdn.v-market.work
        - movie.cdn.v-market.work
        - wrs.nedo.go.jp
        useReliableUdpForVoice: false
        userUpdatePeriod: 60
        userVerificationDelay: 5
        userVerificationRetry: 30
        userVerificationTimeout: 60
        viveWindowsUrl: http://store.steampowered.com/app/438100/
        whiteListedAssetUrls:
        - http://dbinj8iahsbec.cloudfront.net/plugins
        - http://dbinj8iahsbec.cloudfront.net/
        - https://dbinj8iahsbec.cloudfront.net/
        - https://dev-api.vrchat.cloud/api/1/file/
        - https://api.vrchat.cloud/api/1/file/
        - https://files.vrchat.cloud/unmanaged/
        worldUpdatePeriod: 60
        player-url-resolver-hash: E3-C6-63-C3-27-3F-1C-47-48-C6-A7-52-A1-53-03-A5-10-6C-45-37-B1-C3-14-70-BA-44-1F-AE-0E-B2-32-36
        player-url-resolver-version: 2021-05-16
      properties:
        VoiceEnableDegradation:
          default: false
          description: "Unknown, probably voice optimization testing"
          type: boolean
        VoiceEnableReceiverLimiting:
          default: true
          description: "Unknown, probably voice optimization testing"
          type: boolean
        address:
          description: VRChat's office address
          minLength: 1
          type: string
        announcements:
          description: Public Announcements
          items:
            $ref: '#/components/schemas/APIConfigAnnouncement'
          minItems: 0
          type: array
          uniqueItems: true
        appName:
          default: VrChat
          deprecated: true
          description: Game name
          minLength: 1
          type: string
        buildVersionTag:
          description: Build tag of the API server
          minLength: 1
          type: string
        clientApiKey:
          description: apiKey to be used for all other requests
          minLength: 1
          type: string
        clientBPSCeiling:
          default: 18432
          description: Unknown
          type: integer
        clientDisconnectTimeout:
          default: 30000
          description: Unknown
          type: integer
        clientReservedPlayerBPS:
          default: 7168
          description: Unknown
          type: integer
        clientSentCountAllowance:
          default: 15
          description: Unknown
          type: integer
        contactEmail:
          description: VRChat's contact email
          minLength: 1
          type: string
        copyrightEmail:
          description: VRChat's copyright-issues-related email
          minLength: 1
          type: string
        currentTOSVersion:
          description: Current version number of the Terms of Service
          example: 7
          minimum: 0
          type: integer
        defaultAvatar:
          example: avtr_912d66a4-4714-43b8-8407-7de2cafbf55b
          pattern: "avtr_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          title: AvatarID
          type: string
        deploymentGroup:
          $ref: '#/components/schemas/DeploymentGroup'
        devAppVersionStandalone:
          deprecated: true
          description: Version number for game development build
          minLength: 1
          type: string
        devDownloadLinkWindows:
          deprecated: true
          description: Developer Download link
          minLength: 1
          type: string
        devSdkUrl:
          deprecated: true
          description: "Link to download the development SDK, use downloadUrls instead"
          minLength: 1
          type: string
        devSdkVersion:
          deprecated: true
          description: Version of the development SDK
          minLength: 1
          type: string
        devServerVersionStandalone:
          deprecated: true
          description: Version number for server development build
          minLength: 1
          type: string
        dis-countdown:
          description: "Unknown, \"dis\" maybe for disconnect?"
          format: date-time
          type: string
        disableAvatarCopying:
          default: false
          description: Toggles if copying avatars should be disabled
          type: boolean
        disableAvatarGating:
          default: false
          description: Toggles if avatar gating should be disabled. Avatar gating
            restricts uploading of avatars to people with the `system_avatar_access`
            Tag or `admin_avatar_access` Tag
          type: boolean
        disableCommunityLabs:
          default: false
          description: Toggles if the Community Labs should be disabled
          type: boolean
        disableCommunityLabsPromotion:
          default: false
          description: Toggles if promotion out of Community Labs should be disabled
          type: boolean
        disableEmail:
          default: false
          description: Unknown
          type: boolean
        disableEventStream:
          default: false
          description: Toggles if Analytics should be disabled.
          type: boolean
        disableFeedbackGating:
          default: false
          description: Toggles if feedback gating should be disabled. Feedback gating
            restricts submission of feedback (reporting a World or User) to people
            with the `system_feedback_access` Tag.
          type: boolean
        disableFrontendBuilds:
          default: false
          description: "Unknown, probably toggles compilation of frontend web builds?\
            \ So internal flag?"
          type: boolean
        disableHello:
          default: false
          description: Unknown
          type: boolean
        disableOculusSubs:
          default: false
          description: Toggles if signing up for Subscriptions in Oculus is disabled
            or not.
          type: boolean
        disableRegistration:
          default: false
          description: Toggles if new user account registration should be disabled.
          type: boolean
        disableSteamNetworking:
          default: true
          description: Toggles if Steam Networking should be disabled. VRChat these
            days uses Photon Unity Networking (PUN) instead.
          type: boolean
        disableTwoFactorAuth:
          default: false
          deprecated: true
          description: Toggles if 2FA should be disabled.
          type: boolean
        disableUdon:
          default: false
          description: Toggles if Udon should be universally disabled in-game.
          type: boolean
        disableUpgradeAccount:
          default: false
          description: Toggles if account upgrading "linking with Steam/Oculus" should
            be disabled.
          type: boolean
        downloadLinkWindows:
          description: Download link for game on the Oculus Rift website.
          minLength: 1
          type: string
        downloadUrls:
          $ref: '#/components/schemas/APIConfigDownloadURLList'
        dynamicWorldRows:
          description: "Array of DynamicWorldRow objects, used by the game to display\
            \ the list of world rows"
          items:
            $ref: '#/components/schemas/DynamicContentRow'
          minItems: 1
          type: array
          uniqueItems: true
        events:
          $ref: '#/components/schemas/APIConfigEvents'
        gearDemoRoomId:
          deprecated: true
          description: Unknown
          minLength: 1
          type: string
        homeWorldId:
          description: WorldID be "offline" on User profiles if you are not friends
            with that user.
          example: wrld_ba913a96-fac4-4048-a062-9aa5db092812
          pattern: "(^$|offline|(wrld|wld)_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})"
          title: WorldID
          type: string
        homepageRedirectTarget:
          default: https://hello.vrchat.com
          description: Redirect target if you try to open the base API domain in your
            browser
          minLength: 1
          type: string
        hubWorldId:
          description: WorldID be "offline" on User profiles if you are not friends
            with that user.
          example: wrld_ba913a96-fac4-4048-a062-9aa5db092812
          pattern: "(^$|offline|(wrld|wld)_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})"
          title: WorldID
          type: string
        jobsEmail:
          description: VRChat's job application email
          minLength: 1
          type: string
        messageOfTheDay:
          deprecated: true
          description: MOTD
          minLength: 1
          type: string
        moderationEmail:
          description: VRChat's moderation related email
          minLength: 1
          type: string
        moderationQueryPeriod:
          description: Unknown
          type: integer
        notAllowedToSelectAvatarInPrivateWorldMessage:
          description: Used in-game to notify a user they aren't allowed to select
            avatars in private worlds
          minLength: 1
          type: string
        plugin:
          description: "Extra [plugin](https://doc.photonengine.com/en-us/server/current/plugins/manual)\
            \ to run in each instance"
          minLength: 1
          type: string
        releaseAppVersionStandalone:
          deprecated: true
          description: Version number for game release build
          minLength: 1
          type: string
        releaseSdkUrl:
          deprecated: true
          description: Link to download the release SDK
          minLength: 1
          type: string
        releaseSdkVersion:
          deprecated: true
          description: Version of the release SDK
          minLength: 1
          type: string
        releaseServerVersionStandalone:
          deprecated: true
          description: Version number for server release build
          minLength: 1
          type: string
        sdkDeveloperFaqUrl:
          description: Link to the developer FAQ
          minLength: 1
          type: string
        sdkDiscordUrl:
          description: Link to the official VRChat Discord
          minLength: 1
          type: string
        sdkNotAllowedToPublishMessage:
          description: Used in the SDK to notify a user they aren't allowed to upload
            avatars/worlds yet
          minLength: 1
          type: string
        sdkUnityVersion:
          description: Unity version supported by the SDK
          minLength: 1
          type: string
        serverName:
          description: Server name of the API server currently responding
          minLength: 1
          type: string
        supportEmail:
          description: VRChat's support email
          minLength: 1
          type: string
        timeOutWorldId:
          description: WorldID be "offline" on User profiles if you are not friends
            with that user.
          example: wrld_ba913a96-fac4-4048-a062-9aa5db092812
          pattern: "(^$|offline|(wrld|wld)_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})"
          title: WorldID
          type: string
        tutorialWorldId:
          description: WorldID be "offline" on User profiles if you are not friends
            with that user.
          example: wrld_ba913a96-fac4-4048-a062-9aa5db092812
          pattern: "(^$|offline|(wrld|wld)_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})"
          title: WorldID
          type: string
        updateRateMsMaximum:
          description: Unknown
          type: integer
        updateRateMsMinimum:
          description: Unknown
          type: integer
        updateRateMsNormal:
          description: Unknown
          type: integer
        updateRateMsUdonManual:
          description: Unknown
          type: integer
        uploadAnalysisPercent:
          description: Unknown
          type: integer
        urlList:
          description: List of allowed URLs that bypass the "Allow untrusted URL's"
            setting in-game
          items:
            type: string
          type: array
        useReliableUdpForVoice:
          default: false
          description: Unknown
          type: boolean
        userUpdatePeriod:
          description: Unknown
          type: integer
        userVerificationDelay:
          description: Unknown
          type: integer
        userVerificationRetry:
          description: Unknown
          type: integer
        userVerificationTimeout:
          description: Unknown
          type: integer
        viveWindowsUrl:
          description: Download link for game on the Steam website.
          minLength: 1
          type: string
        whiteListedAssetUrls:
          description: List of allowed URLs that are allowed to host avatar assets
          items:
            type: string
          type: array
        worldUpdatePeriod:
          description: Unknown
          type: integer
        player-url-resolver-hash:
          description: Currently used youtube-dl.exe hash in SHA-256-delimited format
          minLength: 1
          type: string
        player-url-resolver-version:
          description: Currently used youtube-dl.exe version
          minLength: 1
          type: string
      required:
      - VoiceEnableDegradation
      - VoiceEnableReceiverLimiting
      - address
      - announcements
      - appName
      - buildVersionTag
      - clientApiKey
      - clientBPSCeiling
      - clientDisconnectTimeout
      - clientReservedPlayerBPS
      - clientSentCountAllowance
      - contactEmail
      - copyrightEmail
      - currentTOSVersion
      - defaultAvatar
      - deploymentGroup
      - devAppVersionStandalone
      - devDownloadLinkWindows
      - devSdkUrl
      - devSdkVersion
      - devServerVersionStandalone
      - dis-countdown
      - disableAvatarCopying
      - disableAvatarGating
      - disableCommunityLabs
      - disableCommunityLabsPromotion
      - disableEmail
      - disableEventStream
      - disableFeedbackGating
      - disableFrontendBuilds
      - disableHello
      - disableOculusSubs
      - disableRegistration
      - disableSteamNetworking
      - disableTwoFactorAuth
      - disableUdon
      - disableUpgradeAccount
      - downloadLinkWindows
      - downloadUrls
      - dynamicWorldRows
      - events
      - gearDemoRoomId
      - homeWorldId
      - homepageRedirectTarget
      - hubWorldId
      - jobsEmail
      - messageOfTheDay
      - moderationEmail
      - moderationQueryPeriod
      - notAllowedToSelectAvatarInPrivateWorldMessage
      - player-url-resolver-hash
      - player-url-resolver-version
      - plugin
      - releaseAppVersionStandalone
      - releaseSdkUrl
      - releaseSdkVersion
      - releaseServerVersionStandalone
      - sdkDeveloperFaqUrl
      - sdkDiscordUrl
      - sdkNotAllowedToPublishMessage
      - sdkUnityVersion
      - serverName
      - supportEmail
      - timeOutWorldId
      - tutorialWorldId
      - updateRateMsMaximum
      - updateRateMsMinimum
      - updateRateMsNormal
      - updateRateMsUdonManual
      - uploadAnalysisPercent
      - urlList
      - useReliableUdpForVoice
      - userUpdatePeriod
      - userVerificationDelay
      - userVerificationRetry
      - userVerificationTimeout
      - viveWindowsUrl
      - whiteListedAssetUrls
      - worldUpdatePeriod
      title: APIConfig
      type: object
    InfoPushDataClickable:
      example:
        parameters:
        - parameters
        - parameters
        command: OpenURL
      properties:
        command:
          enum:
          - OpenURL
          - OpenVRCPlusMenu
          - OpenSafetyMenu
          - CannedWorldSearch
          example: OpenURL
          minLength: 1
          type: string
        parameters:
          description: "In case of OpenURL, this would contain the link."
          items:
            type: string
          type: array
      required:
      - command
      title: InfoPushDataClickable
      type: object
    InfoPushDataArticleContent:
      example:
        imageUrl: imageUrl
        text: text
        onPressed:
          parameters:
          - parameters
          - parameters
          command: OpenURL
      properties:
        text:
          type: string
        imageUrl:
          type: string
        onPressed:
          $ref: '#/components/schemas/InfoPushDataClickable'
      title: InfoPushDataArticleContent
      type: object
    InfoPushDataArticle:
      example:
        content:
          imageUrl: imageUrl
          text: text
          onPressed:
            parameters:
            - parameters
            - parameters
            command: OpenURL
      properties:
        content:
          $ref: '#/components/schemas/InfoPushDataArticleContent'
      title: InfoPushDataArticle
      type: object
    InfoPushData:
      description: ""
      example:
        template: template
        imageUrl: imageUrl
        name: name
        description: description
        contentList:
          sortHeading: sortHeading
          sortOrder: sortOrder
          name: name
          index: 0
          tag: tag
          type: avatar
          platform: platform
          sortOwnership: sortOwnership
        version: 2021.3.4
        onPressed:
          parameters:
          - parameters
          - parameters
          command: OpenURL
        article:
          content:
            imageUrl: imageUrl
            text: text
            onPressed:
              parameters:
              - parameters
              - parameters
              command: OpenURL
      properties:
        contentList:
          $ref: '#/components/schemas/DynamicContentRow'
        description:
          type: string
        imageUrl:
          minLength: 1
          type: string
        name:
          type: string
        onPressed:
          $ref: '#/components/schemas/InfoPushDataClickable'
        template:
          type: string
        version:
          example: 2021.3.4
          minLength: 1
          type: string
        article:
          $ref: '#/components/schemas/InfoPushDataArticle'
      title: InfoPushData
      type: object
    InfoPush:
      description: ""
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        data:
          template: template
          imageUrl: imageUrl
          name: name
          description: description
          contentList:
            sortHeading: sortHeading
            sortOrder: sortOrder
            name: name
            index: 0
            tag: tag
            type: avatar
            platform: platform
            sortOwnership: sortOwnership
          version: 2021.3.4
          onPressed:
            parameters:
            - parameters
            - parameters
            command: OpenURL
          article:
            content:
              imageUrl: imageUrl
              text: text
              onPressed:
                parameters:
                - parameters
                - parameters
                command: OpenURL
        endDate: 2000-01-23T04:56:07.000+00:00
        isEnabled: true
        releaseStatus: public
        id: launch-beta
        priority: 0
        hash: hash
        startDate: 2000-01-23T04:56:07.000+00:00
        tags:
        - null
        - null
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          example: launch-beta
          minLength: 1
          type: string
        isEnabled:
          default: true
          type: boolean
        releaseStatus:
          $ref: '#/components/schemas/ReleaseStatus'
        priority:
          type: integer
        tags:
          description: ' '
          items:
            $ref: '#/components/schemas/Tag'
          type: array
        data:
          $ref: '#/components/schemas/InfoPushData'
        hash:
          description: "Unknown usage, MD5"
          minLength: 1
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        startDate:
          description: ""
          format: date-time
          type: string
        endDate:
          format: date-time
          type: string
      required:
      - createdAt
      - data
      - hash
      - id
      - isEnabled
      - priority
      - releaseStatus
      - tags
      - updatedAt
      title: InfoPush
      type: object
    APIHealth:
      example:
        serverName: serverName
        buildVersionTag: buildVersionTag
        ok: true
      properties:
        ok:
          type: boolean
        serverName:
          minLength: 1
          type: string
        buildVersionTag:
          minLength: 1
          type: string
      required:
      - buildVersionTag
      - ok
      - serverName
      title: APIHealth
      type: object
    User:
      example:
        last_platform: standalonewindows
        note: note
        currentAvatarImageUrl: https://api.vrchat.cloud/api/1/file/file_ae46d521-7281-4b38-b365-804b32a1d6a7/1/file
        displayName: displayName
        bio: bio
        travelingToWorld: travelingToWorld
        developerType: null
        instanceId: wrld_ba913a96-fac4-4048-a062-9aa5db092812:12345~hidden(usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469)~region(eu)~nonce(27e8414a-59a0-4f3d-af1f-f27557eb49a2)
        last_activity: last_activity
        travelingToLocation: travelingToLocation
        friendRequestStatus: friendRequestStatus
        isFriend: true
        date_joined: 2000-01-23
        id: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        state: null
        currentAvatarThumbnailImageUrl: https://api.vrchat.cloud/api/1/image/file_aae83ed9-d42d-4d72-9f4b-9f1e41ed17e1/1/256
        worldId: wrld_ba913a96-fac4-4048-a062-9aa5db092812
        allowAvatarCopying: true
        last_login: last_login
        travelingToInstance: travelingToInstance
        friendKey: friendKey
        tags:
        - null
        - null
        statusDescription: statusDescription
        bioLinks:
        - bioLinks
        - bioLinks
        location: wrld_ba913a96-fac4-4048-a062-9aa5db092812
        profilePicOverride: profilePicOverride
        userIcon: userIcon
        status: null
        username: username
      properties:
        allowAvatarCopying:
          default: true
          type: boolean
        bio:
          maxLength: 512
          minLength: 0
          type: string
        bioLinks:
          items:
            type: string
          type: array
        currentAvatarImageUrl:
          description: "When profilePicOverride is not empty, use it instead."
          example: https://api.vrchat.cloud/api/1/file/file_ae46d521-7281-4b38-b365-804b32a1d6a7/1/file
          title: CurrentAvatarImageUrl
          type: string
        currentAvatarThumbnailImageUrl:
          description: "When profilePicOverride is not empty, use it instead."
          example: https://api.vrchat.cloud/api/1/image/file_aae83ed9-d42d-4d72-9f4b-9f1e41ed17e1/1/256
          title: CurrentAvatarThumbnailImageUrl
          type: string
        date_joined:
          format: date
          type: string
        developerType:
          $ref: '#/components/schemas/DeveloperType'
        displayName:
          description: "A users visual display name. This is what shows up in-game,\
            \ and can different from their `username`. Changing display name is restricted\
            \ to a cooldown period."
          type: string
        friendKey:
          type: string
        friendRequestStatus:
          type: string
        id:
          description: "A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`.\
            \ Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID\
            \ can never be changed."
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          title: UserID
          type: string
        instanceId:
          description: InstanceID can be "offline" on User profiles if you are not
            friends with that user and "private" if you are friends and user is in
            private instance.
          example: wrld_ba913a96-fac4-4048-a062-9aa5db092812:12345~hidden(usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469)~region(eu)~nonce(27e8414a-59a0-4f3d-af1f-f27557eb49a2)
          pattern: "(private|offline|(wrld|wld)_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}:(\\\
            d+)(~region\\(([\\w]+)\\))?(~([\\w]+)\\(usr_([\\w-]+)\\)((\\~canRequestInvite)?)(~region\\\
            (([\\w].+)\\))?~nonce\\((.+)\\))?)"
          title: InstanceID
          type: string
        isFriend:
          description: "Either their `friendKey`, or empty string if you are not friends.\
            \ Unknown usage."
          type: boolean
        last_activity:
          description: Either a date-time or empty string.
          type: string
        last_login:
          description: Either a date-time or empty string.
          type: string
        last_platform:
          description: "This can be `standalonewindows` or `android`, but can also\
            \ pretty much be any random Unity verison such as `2019.2.4-801-Release`\
            \ or `2019.2.2-772-Release` or even `unknownplatform`."
          example: standalonewindows
          title: Platform
          type: string
        location:
          description: WorldID be "offline" on User profiles if you are not friends
            with that user.
          example: wrld_ba913a96-fac4-4048-a062-9aa5db092812
          pattern: "(^$|offline|(wrld|wld)_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})"
          title: WorldID
          type: string
        note:
          type: string
        profilePicOverride:
          type: string
        state:
          $ref: '#/components/schemas/UserState'
        status:
          $ref: '#/components/schemas/UserStatus'
        statusDescription:
          type: string
        tags:
          description: ' '
          items:
            $ref: '#/components/schemas/Tag'
          type: array
        travelingToInstance:
          type: string
        travelingToLocation:
          type: string
        travelingToWorld:
          type: string
        userIcon:
          type: string
        username:
          deprecated: true
          description: |-
            -| A users unique name, used during login. This is different from `displayName` which is what shows up in-game. A users `username` can never be changed.'
            **DEPRECATED:** VRChat API no longer return usernames of other users. [See issue by Tupper for more information](https://github.com/pypy-vrc/VRCX/issues/429).
          type: string
        worldId:
          description: WorldID be "offline" on User profiles if you are not friends
            with that user.
          example: wrld_ba913a96-fac4-4048-a062-9aa5db092812
          pattern: "(^$|offline|(wrld|wld)_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})"
          title: WorldID
          type: string
      required:
      - allowAvatarCopying
      - bio
      - bioLinks
      - currentAvatarImageUrl
      - currentAvatarThumbnailImageUrl
      - date_joined
      - developerType
      - displayName
      - friendKey
      - id
      - isFriend
      - last_activity
      - last_login
      - last_platform
      - profilePicOverride
      - state
      - status
      - statusDescription
      - tags
      - userIcon
      title: User
      type: object
    UpdateUserRequest:
      example:
        birthday: 2000-01-23
        statusDescription: statusDescription
        bio: bio
        bioLinks:
        - bioLinks
        - bioLinks
        acceptedTOSVersion: 0.8008281904610115
        userIcon: https://api.vrchat.cloud/api/1/file/file_76dc2964-0ce8-41df-b2e7-8edf994fee31/1
        email: email
        tags:
        - null
        - null
        status: null
      properties:
        email:
          type: string
        birthday:
          format: date
          type: string
        acceptedTOSVersion:
          type: number
        tags:
          description: ' '
          items:
            $ref: '#/components/schemas/Tag'
          type: array
        status:
          $ref: '#/components/schemas/UserStatus'
        statusDescription:
          type: string
        bio:
          minLength: 0
          type: string
        bioLinks:
          items:
            type: string
          type: array
        userIcon:
          description: MUST be a valid VRChat /file/ url.
          example: https://api.vrchat.cloud/api/1/file/file_76dc2964-0ce8-41df-b2e7-8edf994fee31/1
          minLength: 0
          type: string
      title: UpdateUserRequest
      type: object
    LimitedUnityPackage:
      description: ""
      example:
        unityVersion: 2018.4.14f1
        platform: standalonewindows
      properties:
        platform:
          description: "This can be `standalonewindows` or `android`, but can also\
            \ pretty much be any random Unity verison such as `2019.2.4-801-Release`\
            \ or `2019.2.2-772-Release` or even `unknownplatform`."
          example: standalonewindows
          title: Platform
          type: string
        unityVersion:
          example: 2018.4.14f1
          minLength: 1
          type: string
      required:
      - platform
      - unityVersion
      title: LimitedUnityPackage
      type: object
    LimitedWorld:
      description: ""
      example:
        favorites: 12024
        heat: 5
        created_at: 2000-01-23T04:56:07.000+00:00
        authorId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        capacity: 8
        tags:
        - null
        - null
        thumbnailImageUrl: thumbnailImageUrl
        updated_at: 2000-01-23T04:56:07.000+00:00
        authorName: authorName
        imageUrl: imageUrl
        organization: vrchat
        popularity: 8
        name: name
        releaseStatus: public
        id: wrld_ba913a96-fac4-4048-a062-9aa5db092812
        labsPublicationDate: none
        publicationDate: none
        unityPackages:
        - unityVersion: 2018.4.14f1
          platform: standalonewindows
        - unityVersion: 2018.4.14f1
          platform: standalonewindows
        occupants: 47
      properties:
        authorId:
          description: "A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`.\
            \ Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID\
            \ can never be changed."
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          title: UserID
          type: string
        authorName:
          minLength: 1
          type: string
        capacity:
          example: 8
          maximum: 40
          minimum: 0
          type: integer
        created_at:
          format: date-time
          type: string
        favorites:
          default: 0
          example: 12024
          minimum: 0
          type: integer
        heat:
          default: 0
          example: 5
          minimum: 0
          type: integer
        id:
          description: WorldID be "offline" on User profiles if you are not friends
            with that user.
          example: wrld_ba913a96-fac4-4048-a062-9aa5db092812
          pattern: "(^$|offline|(wrld|wld)_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})"
          title: WorldID
          type: string
        imageUrl:
          minLength: 1
          type: string
        labsPublicationDate:
          example: none
          minLength: 1
          type: string
        name:
          minLength: 1
          type: string
        occupants:
          default: 0
          example: 47
          minimum: 0
          type: integer
        organization:
          default: vrchat
          minLength: 1
          type: string
        popularity:
          default: 0
          example: 8
          minimum: 0
          type: integer
        publicationDate:
          example: none
          minLength: 1
          type: string
        releaseStatus:
          $ref: '#/components/schemas/ReleaseStatus'
        tags:
          description: ' '
          items:
            $ref: '#/components/schemas/Tag'
          type: array
        thumbnailImageUrl:
          minLength: 1
          type: string
        unityPackages:
          description: ' '
          items:
            $ref: '#/components/schemas/LimitedUnityPackage'
          minItems: 1
          type: array
        updated_at:
          format: date-time
          type: string
      required:
      - authorId
      - authorName
      - capacity
      - created_at
      - favorites
      - heat
      - id
      - imageUrl
      - labsPublicationDate
      - name
      - occupants
      - organization
      - popularity
      - publicationDate
      - releaseStatus
      - tags
      - thumbnailImageUrl
      - unityPackages
      - updated_at
      title: LimitedWorld
      type: object
    CreateWorldRequest:
      example:
        unityPackageUrl: unityPackageUrl
        description: description
        authorId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        platform: standalonewindows
        capacity: 8
        tags:
        - null
        - null
        unityVersion: 2018.4.20f1
        authorName: authorName
        assetVersion: 0
        imageUrl: imageUrl
        name: name
        releaseStatus: public
        id: wrld_ba913a96-fac4-4048-a062-9aa5db092812
        assetUrl: assetUrl
      properties:
        assetUrl:
          minLength: 1
          type: string
        assetVersion:
          minimum: 0
          type: integer
        authorId:
          description: "A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`.\
            \ Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID\
            \ can never be changed."
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          title: UserID
          type: string
        authorName:
          minLength: 1
          type: string
        capacity:
          example: 8
          maximum: 40
          minimum: 0
          type: integer
        description:
          type: string
        id:
          description: WorldID be "offline" on User profiles if you are not friends
            with that user.
          example: wrld_ba913a96-fac4-4048-a062-9aa5db092812
          pattern: "(^$|offline|(wrld|wld)_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})"
          title: WorldID
          type: string
        imageUrl:
          minLength: 1
          type: string
        name:
          minLength: 1
          type: string
        platform:
          description: "This can be `standalonewindows` or `android`, but can also\
            \ pretty much be any random Unity verison such as `2019.2.4-801-Release`\
            \ or `2019.2.2-772-Release` or even `unknownplatform`."
          example: standalonewindows
          title: Platform
          type: string
        releaseStatus:
          $ref: '#/components/schemas/ReleaseStatus'
        tags:
          description: ' '
          items:
            $ref: '#/components/schemas/Tag'
          type: array
        unityPackageUrl:
          minLength: 1
          type: string
        unityVersion:
          default: 5.3.4p1
          example: 2018.4.20f1
          minLength: 1
          type: string
      required:
      - assetUrl
      - imageUrl
      - name
      title: CreateWorldRequest
      type: object
    World:
      description: ""
      example:
        favorites: 12024
        heat: 5
        featured: false
        instances:
        - - ""
          - ""
        - - ""
          - ""
        created_at: 2000-01-23T04:56:07.000+00:00
        description: description
        publicOccupants: 46
        capacity: 8
        visits: 9988675
        thumbnailImageUrl: thumbnailImageUrl
        privateOccupants: 1
        updated_at: 2000-01-23T04:56:07.000+00:00
        imageUrl: imageUrl
        popularity: 8
        releaseStatus: public
        id: wrld_ba913a96-fac4-4048-a062-9aa5db092812
        publicationDate: none
        occupants: 47
        previewYoutubeId: previewYoutubeId
        authorId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        version: 68
        tags:
        - null
        - null
        authorName: authorName
        organization: vrchat
        name: name
        namespace: namespace
        labsPublicationDate: none
        unityPackages:
        - assetUrl: https://api.vrchat.cloud/api/1/file/file_cd0caa7b-69ba-4715-8dfe-7d667a9d2537/65/file
          assetUrlObject: {}
          assetVersion: 4
          created_at: 2020-09-10T06:13:27.777Z
          id: unp_52b12c39-4163-457d-a4a9-630e7aff1bff
          platform: standalonewindows
          pluginUrl: ""
          pluginUrlObject: {}
          unitySortNumber: 20180414000
          unityVersion: 2018.4.14f1
        - assetUrl: https://api.vrchat.cloud/api/1/file/file_cd0caa7b-69ba-4715-8dfe-7d667a9d2537/65/file
          assetUrlObject: {}
          assetVersion: 4
          created_at: 2020-09-10T06:13:27.777Z
          id: unp_52b12c39-4163-457d-a4a9-630e7aff1bff
          platform: standalonewindows
          pluginUrl: ""
          pluginUrlObject: {}
          unitySortNumber: 20180414000
          unityVersion: 2018.4.14f1
      properties:
        authorId:
          description: "A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`.\
            \ Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID\
            \ can never be changed."
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          title: UserID
          type: string
        authorName:
          minLength: 1
          type: string
        capacity:
          example: 8
          maximum: 40
          minimum: 0
          type: integer
        created_at:
          format: date-time
          type: string
        description:
          minLength: 0
          type: string
        favorites:
          default: 0
          example: 12024
          minimum: 0
          type: integer
        featured:
          default: false
          type: boolean
        heat:
          default: 0
          example: 5
          minimum: 0
          type: integer
        id:
          description: WorldID be "offline" on User profiles if you are not friends
            with that user.
          example: wrld_ba913a96-fac4-4048-a062-9aa5db092812
          pattern: "(^$|offline|(wrld|wld)_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})"
          title: WorldID
          type: string
        imageUrl:
          minLength: 1
          type: string
        instances:
          description: Will always be an empty list when unauthenticated.
          items:
            items: {}
            maxItems: 2
            minItems: 2
            type: array
          type: array
        labsPublicationDate:
          example: none
          minLength: 1
          type: string
        name:
          minLength: 1
          type: string
        namespace:
          type: string
        occupants:
          default: 0
          description: Will always be `0` when unauthenticated.
          example: 47
          minimum: 0
          type: integer
        organization:
          default: vrchat
          minLength: 1
          type: string
        popularity:
          default: 0
          example: 8
          minimum: 0
          type: integer
        previewYoutubeId:
          nullable: true
          type: string
        privateOccupants:
          default: 0
          description: Will always be `0` when unauthenticated.
          example: 1
          minimum: 0
          type: integer
        publicOccupants:
          default: 0
          description: Will always be `0` when unauthenticated.
          example: 46
          minimum: 0
          type: integer
        publicationDate:
          example: none
          minLength: 1
          type: string
        releaseStatus:
          $ref: '#/components/schemas/ReleaseStatus'
        tags:
          description: ' '
          items:
            $ref: '#/components/schemas/Tag'
          type: array
        thumbnailImageUrl:
          minLength: 1
          type: string
        unityPackages:
          description: Empty if unauthenticated.
          items:
            $ref: '#/components/schemas/UnityPackage'
          type: array
        updated_at:
          format: date-time
          type: string
        version:
          default: 0
          example: 68
          minimum: 0
          type: integer
        visits:
          default: 0
          example: 9988675
          minimum: 0
          type: integer
      required:
      - authorId
      - authorName
      - capacity
      - created_at
      - description
      - featured
      - heat
      - id
      - imageUrl
      - labsPublicationDate
      - name
      - namespace
      - organization
      - popularity
      - publicationDate
      - releaseStatus
      - tags
      - thumbnailImageUrl
      - unityPackages
      - updated_at
      - version
      - visits
      title: World
      type: object
    UpdateWorldRequest:
      example:
        unityPackageUrl: unityPackageUrl
        description: description
        authorId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
        platform: standalonewindows
        capacity: 8
        tags:
        - null
        - null
        unityVersion: 2018.4.20f1
        authorName: authorName
        assetVersion: assetVersion
        imageUrl: imageUrl
        name: name
        releaseStatus: public
        assetUrl: assetUrl
      properties:
        assetUrl:
          minLength: 1
          type: string
        assetVersion:
          minLength: 1
          type: string
        authorId:
          description: "A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`.\
            \ Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID\
            \ can never be changed."
          example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
          title: UserID
          type: string
        authorName:
          minLength: 1
          type: string
        capacity:
          example: 8
          maximum: 40
          minimum: 0
          type: integer
        description:
          type: string
        imageUrl:
          minLength: 1
          type: string
        name:
          minLength: 1
          type: string
        platform:
          description: "This can be `standalonewindows` or `android`, but can also\
            \ pretty much be any random Unity verison such as `2019.2.4-801-Release`\
            \ or `2019.2.2-772-Release` or even `unknownplatform`."
          example: standalonewindows
          title: Platform
          type: string
        releaseStatus:
          $ref: '#/components/schemas/ReleaseStatus'
        tags:
          description: ' '
          items:
            $ref: '#/components/schemas/Tag'
          type: array
        unityPackageUrl:
          minLength: 1
          type: string
        unityVersion:
          default: 5.3.4p1
          example: 2018.4.20f1
          minLength: 1
          type: string
      title: UpdateWorldRequest
      type: object
    WorldMetadata:
      additionalProperties: false
      example:
        metadata: "{}"
        id: wrld_ba913a96-fac4-4048-a062-9aa5db092812
      properties:
        id:
          description: WorldID be "offline" on User profiles if you are not friends
            with that user.
          example: wrld_ba913a96-fac4-4048-a062-9aa5db092812
          pattern: "(^$|offline|(wrld|wld)_[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})"
          title: WorldID
          type: string
        metadata:
          type: object
      required:
      - id
      - metadata
      title: WorldMetadata
      type: object
    WorldPublishStatus:
      additionalProperties: false
      example:
        canPubilsh: true
      properties:
        canPubilsh:
          default: true
          type: boolean
      required:
      - canPubilsh
      title: WorldPublishStatus
      type: object
    Avatar_unityPackageUrlObject:
      deprecated: true
      description: "**Deprecation:** `Object` has unknown usage/fields, and is always\
        \ empty. Use normal `Url` field instead."
      example:
        unityPackageUrl: unityPackageUrl
      properties:
        unityPackageUrl:
          type: string
      type: object
  securitySchemes:
    authHeader:
      description: Auth token via Header
      scheme: basic
      type: http
    authCookie:
      description: Auth Token via Cookie
      in: cookie
      name: auth
      type: apiKey
    twoFactorAuthCookie:
      description: 2FA device remembrance via Cookie
      in: cookie
      name: twoFactorAuth
      type: apiKey
