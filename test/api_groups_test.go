/*
VRChat API Documentation

Testing GroupsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package vrchatapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/vrchatapi/vrchatapi-go/vrchatapi"
)

func Test_vrchatapi_GroupsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test GroupsApiService AddGroupGalleryImage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string
		var groupGalleryId string

		resp, httpRes, err := apiClient.GroupsApi.AddGroupGalleryImage(context.Background(), groupId, groupGalleryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsApiService AddGroupMemberRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string
		var userId string
		var groupRoleId string

		resp, httpRes, err := apiClient.GroupsApi.AddGroupMemberRole(context.Background(), groupId, userId, groupRoleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsApiService BanGroupMember", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GroupsApi.BanGroupMember(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsApiService CancelGroupRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		httpRes, err := apiClient.GroupsApi.CancelGroupRequest(context.Background(), groupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsApiService CreateGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.GroupsApi.CreateGroup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsApiService CreateGroupAnnouncement", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GroupsApi.CreateGroupAnnouncement(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsApiService CreateGroupGallery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GroupsApi.CreateGroupGallery(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsApiService CreateGroupInvite", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		httpRes, err := apiClient.GroupsApi.CreateGroupInvite(context.Background(), groupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsApiService CreateGroupRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GroupsApi.CreateGroupRole(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsApiService DeleteGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GroupsApi.DeleteGroup(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsApiService DeleteGroupAnnouncement", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GroupsApi.DeleteGroupAnnouncement(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsApiService DeleteGroupGallery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string
		var groupGalleryId string

		resp, httpRes, err := apiClient.GroupsApi.DeleteGroupGallery(context.Background(), groupId, groupGalleryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsApiService DeleteGroupGalleryImage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string
		var groupGalleryId string
		var groupGalleryImageId string

		resp, httpRes, err := apiClient.GroupsApi.DeleteGroupGalleryImage(context.Background(), groupId, groupGalleryId, groupGalleryImageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsApiService DeleteGroupInvite", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string
		var userId string

		httpRes, err := apiClient.GroupsApi.DeleteGroupInvite(context.Background(), groupId, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsApiService DeleteGroupRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string
		var groupRoleId string

		resp, httpRes, err := apiClient.GroupsApi.DeleteGroupRole(context.Background(), groupId, groupRoleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsApiService GetGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GroupsApi.GetGroup(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsApiService GetGroupAnnouncements", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GroupsApi.GetGroupAnnouncements(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsApiService GetGroupAuditLogs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GroupsApi.GetGroupAuditLogs(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsApiService GetGroupBans", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GroupsApi.GetGroupBans(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsApiService GetGroupGalleryImages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string
		var groupGalleryId string

		resp, httpRes, err := apiClient.GroupsApi.GetGroupGalleryImages(context.Background(), groupId, groupGalleryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsApiService GetGroupInvites", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GroupsApi.GetGroupInvites(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsApiService GetGroupMember", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string
		var userId string

		resp, httpRes, err := apiClient.GroupsApi.GetGroupMember(context.Background(), groupId, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsApiService GetGroupMembers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GroupsApi.GetGroupMembers(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsApiService GetGroupPermissions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GroupsApi.GetGroupPermissions(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsApiService GetGroupRequests", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GroupsApi.GetGroupRequests(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsApiService GetGroupRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GroupsApi.GetGroupRoles(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsApiService JoinGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GroupsApi.JoinGroup(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsApiService KickGroupMember", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string
		var userId string

		httpRes, err := apiClient.GroupsApi.KickGroupMember(context.Background(), groupId, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsApiService LeaveGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		httpRes, err := apiClient.GroupsApi.LeaveGroup(context.Background(), groupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsApiService RemoveGroupMemberRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string
		var userId string
		var groupRoleId string

		resp, httpRes, err := apiClient.GroupsApi.RemoveGroupMemberRole(context.Background(), groupId, userId, groupRoleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsApiService RespondGroupJoinRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string
		var userId string

		httpRes, err := apiClient.GroupsApi.RespondGroupJoinRequest(context.Background(), groupId, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsApiService UnbanGroupMember", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string
		var userId string

		resp, httpRes, err := apiClient.GroupsApi.UnbanGroupMember(context.Background(), groupId, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsApiService UpdateGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GroupsApi.UpdateGroup(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsApiService UpdateGroupGallery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string
		var groupGalleryId string

		resp, httpRes, err := apiClient.GroupsApi.UpdateGroupGallery(context.Background(), groupId, groupGalleryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsApiService UpdateGroupMember", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string
		var userId string

		resp, httpRes, err := apiClient.GroupsApi.UpdateGroupMember(context.Background(), groupId, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupsApiService UpdateGroupRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string
		var groupRoleId string

		resp, httpRes, err := apiClient.GroupsApi.UpdateGroupRole(context.Background(), groupId, groupRoleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
