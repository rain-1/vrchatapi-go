/*
VRChat API Documentation

Testing InviteApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package vrchatapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/vrchatapi/vrchatapi-go/vrchatapi"
)

func Test_vrchatapi_InviteApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test InviteApiService GetInviteMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string
		var messageType InviteMessageType
		var slot int32

		resp, httpRes, err := apiClient.InviteApi.GetInviteMessage(context.Background(), userId, messageType, slot).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InviteApiService GetInviteMessages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string
		var messageType InviteMessageType

		resp, httpRes, err := apiClient.InviteApi.GetInviteMessages(context.Background(), userId, messageType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InviteApiService InviteMyselfTo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var worldId string
		var instanceId string

		resp, httpRes, err := apiClient.InviteApi.InviteMyselfTo(context.Background(), worldId, instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InviteApiService InviteUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		resp, httpRes, err := apiClient.InviteApi.InviteUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InviteApiService RequestInvite", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		resp, httpRes, err := apiClient.InviteApi.RequestInvite(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InviteApiService ResetInviteMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string
		var messageType InviteMessageType
		var slot int32

		resp, httpRes, err := apiClient.InviteApi.ResetInviteMessage(context.Background(), userId, messageType, slot).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InviteApiService RespondInvite", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var notificationId string

		resp, httpRes, err := apiClient.InviteApi.RespondInvite(context.Background(), notificationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InviteApiService UpdateInviteMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string
		var messageType InviteMessageType
		var slot int32

		resp, httpRes, err := apiClient.InviteApi.UpdateInviteMessage(context.Background(), userId, messageType, slot).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
