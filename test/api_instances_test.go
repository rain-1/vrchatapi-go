/*
VRChat API Documentation

Testing InstancesApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package vrchatapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/vrchatapi/vrchatapi-go/vrchatapi"
)

func Test_vrchatapi_InstancesApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test InstancesApiService GetInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var worldId string
		var instanceId string

		resp, httpRes, err := apiClient.InstancesApi.GetInstance(context.Background(), worldId, instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstancesApiService GetInstanceByShortName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var shortName string

		resp, httpRes, err := apiClient.InstancesApi.GetInstanceByShortName(context.Background(), shortName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstancesApiService GetShortName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var worldId string
		var instanceId string

		resp, httpRes, err := apiClient.InstancesApi.GetShortName(context.Background(), worldId, instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstancesApiService SendSelfInvite", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var worldId string
		var instanceId string

		resp, httpRes, err := apiClient.InstancesApi.SendSelfInvite(context.Background(), worldId, instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
