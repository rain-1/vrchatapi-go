/*
VRChat API Documentation

Testing FilesApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package vrchatapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/vrchatapi/vrchatapi-go/vrchatapi"
)

func Test_vrchatapi_FilesApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test FilesApiService CreateFile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FilesApi.CreateFile(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FilesApiService CreateFileVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fileId string

		resp, httpRes, err := apiClient.FilesApi.CreateFileVersion(context.Background(), fileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FilesApiService DeleteFile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fileId string

		resp, httpRes, err := apiClient.FilesApi.DeleteFile(context.Background(), fileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FilesApiService DeleteFileVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fileId string
		var versionId int32

		resp, httpRes, err := apiClient.FilesApi.DeleteFileVersion(context.Background(), fileId, versionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FilesApiService DownloadFileVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fileId string
		var versionId int32

		httpRes, err := apiClient.FilesApi.DownloadFileVersion(context.Background(), fileId, versionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FilesApiService FinishFileDataUpload", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fileId string
		var versionId int32
		var fileType string

		resp, httpRes, err := apiClient.FilesApi.FinishFileDataUpload(context.Background(), fileId, versionId, fileType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FilesApiService GetFile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fileId string

		resp, httpRes, err := apiClient.FilesApi.GetFile(context.Background(), fileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FilesApiService GetFileDataUploadStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fileId string
		var versionId int32
		var fileType string

		resp, httpRes, err := apiClient.FilesApi.GetFileDataUploadStatus(context.Background(), fileId, versionId, fileType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FilesApiService GetFiles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FilesApi.GetFiles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FilesApiService StartFileDataUpload", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fileId string
		var versionId int32
		var fileType string

		resp, httpRes, err := apiClient.FilesApi.StartFileDataUpload(context.Background(), fileId, versionId, fileType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
