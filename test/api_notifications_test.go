/*
VRChat API Documentation

Testing NotificationsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package vrchatapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/vrchatapi/vrchatapi-go/vrchatapi"
)

func Test_vrchatapi_NotificationsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test NotificationsApiService AcceptFriendRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var notificationId string

		resp, httpRes, err := apiClient.NotificationsApi.AcceptFriendRequest(context.Background(), notificationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationsApiService ClearNotifications", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.NotificationsApi.ClearNotifications(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationsApiService DeleteNotification", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var notificationId string

		resp, httpRes, err := apiClient.NotificationsApi.DeleteNotification(context.Background(), notificationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationsApiService GetNotifications", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.NotificationsApi.GetNotifications(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationsApiService MarkNotificationAsRead", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var notificationId string

		resp, httpRes, err := apiClient.NotificationsApi.MarkNotificationAsRead(context.Background(), notificationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
