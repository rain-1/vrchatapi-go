/*
VRChat API Documentation

Testing PlayermoderationApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package vrchatapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/vrchatapi/vrchatapi-go/vrchatapi"
)

func Test_vrchatapi_PlayermoderationApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PlayermoderationApiService ClearAllPlayerModerations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PlayermoderationApi.ClearAllPlayerModerations(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlayermoderationApiService DeletePlayerModeration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var playerModerationId string

		resp, httpRes, err := apiClient.PlayermoderationApi.DeletePlayerModeration(context.Background(), playerModerationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlayermoderationApiService GetPlayerModeration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var playerModerationId string

		resp, httpRes, err := apiClient.PlayermoderationApi.GetPlayerModeration(context.Background(), playerModerationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlayermoderationApiService GetPlayerModerations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PlayermoderationApi.GetPlayerModerations(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlayermoderationApiService ModerateUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PlayermoderationApi.ModerateUser(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlayermoderationApiService UnmoderateUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PlayermoderationApi.UnmoderateUser(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
