/*
VRChat API Documentation

Testing WorldsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package vrchatapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/vrchatapi/vrchatapi-go/vrchatapi"
)

func Test_vrchatapi_WorldsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test WorldsApiService CreateWorld", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.WorldsApi.CreateWorld(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorldsApiService DeleteWorld", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var worldId string

		httpRes, err := apiClient.WorldsApi.DeleteWorld(context.Background(), worldId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorldsApiService GetActiveWorlds", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.WorldsApi.GetActiveWorlds(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorldsApiService GetFavoritedWorlds", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.WorldsApi.GetFavoritedWorlds(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorldsApiService GetRecentWorlds", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.WorldsApi.GetRecentWorlds(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorldsApiService GetWorld", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var worldId string

		resp, httpRes, err := apiClient.WorldsApi.GetWorld(context.Background(), worldId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorldsApiService GetWorldInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var worldId string
		var instanceId string

		resp, httpRes, err := apiClient.WorldsApi.GetWorldInstance(context.Background(), worldId, instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorldsApiService GetWorldMetadata", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var worldId string

		resp, httpRes, err := apiClient.WorldsApi.GetWorldMetadata(context.Background(), worldId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorldsApiService GetWorldPublishStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var worldId string

		resp, httpRes, err := apiClient.WorldsApi.GetWorldPublishStatus(context.Background(), worldId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorldsApiService PublishWorld", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var worldId string

		httpRes, err := apiClient.WorldsApi.PublishWorld(context.Background(), worldId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorldsApiService SearchWorlds", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.WorldsApi.SearchWorlds(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorldsApiService UnpublishWorld", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var worldId string

		httpRes, err := apiClient.WorldsApi.UnpublishWorld(context.Background(), worldId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorldsApiService UpdateWorld", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var worldId string

		resp, httpRes, err := apiClient.WorldsApi.UpdateWorld(context.Background(), worldId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
