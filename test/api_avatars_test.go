/*
VRChat API Documentation

Testing AvatarsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package vrchatapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/vrchatapi/vrchatapi-go/vrchatapi"
)

func Test_vrchatapi_AvatarsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AvatarsApiService CreateAvatar", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AvatarsApi.CreateAvatar(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AvatarsApiService DeleteAvatar", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var avatarId string

		resp, httpRes, err := apiClient.AvatarsApi.DeleteAvatar(context.Background(), avatarId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AvatarsApiService GetAvatar", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var avatarId string

		resp, httpRes, err := apiClient.AvatarsApi.GetAvatar(context.Background(), avatarId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AvatarsApiService GetFavoritedAvatars", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AvatarsApi.GetFavoritedAvatars(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AvatarsApiService GetOwnAvatar", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		resp, httpRes, err := apiClient.AvatarsApi.GetOwnAvatar(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AvatarsApiService SearchAvatars", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AvatarsApi.SearchAvatars(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AvatarsApiService SelectAvatar", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var avatarId string

		resp, httpRes, err := apiClient.AvatarsApi.SelectAvatar(context.Background(), avatarId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AvatarsApiService SelectFallbackAvatar", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var avatarId string

		resp, httpRes, err := apiClient.AvatarsApi.SelectFallbackAvatar(context.Background(), avatarId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AvatarsApiService UpdateAvatar", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var avatarId string

		resp, httpRes, err := apiClient.AvatarsApi.UpdateAvatar(context.Background(), avatarId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
